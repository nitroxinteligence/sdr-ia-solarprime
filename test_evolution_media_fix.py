#!/usr/bin/env python3
"""
Test Evolution API Media Fix
============================
Script para testar as corre√ß√µes no download de m√≠dia da Evolution API
"""

import asyncio
import os
import httpx
from datetime import datetime
from loguru import logger
import tempfile
import base64

# Configurar logging detalhado
logger.add("evolution_media_test.log", level="DEBUG", rotation="10 MB")

async def test_evolution_api_connection():
    """Testa conex√£o b√°sica com Evolution API"""
    from services.evolution_api import evolution_client
    
    logger.info("=== TESTE DE CONEX√ÉO EVOLUTION API ===")
    
    # Inicializar cliente
    await evolution_client.initialize()
    
    # Testar conex√£o
    status = await evolution_client.check_connection()
    logger.info(f"Status da conex√£o: {status}")
    
    return status.get("state") == "open"


async def test_download_strategies():
    """Testa diferentes estrat√©gias de download"""
    from services.evolution_api import evolution_client
    
    logger.info("\n=== TESTE DE ESTRAT√âGIAS DE DOWNLOAD ===")
    
    # Simular download com diferentes cen√°rios
    test_cases = [
        {
            "name": "Download via base64",
            "message_id": "BAE5F1234567890",
            "media_url": None
        },
        {
            "name": "Download com URL fallback",
            "message_id": "BAE5F1234567891",
            "media_url": "https://mmg.whatsapp.net/v/t62.7119-24/12345.pdf"
        }
    ]
    
    for test in test_cases:
        logger.info(f"\nüìã Testando: {test['name']}")
        
        try:
            result = await evolution_client.download_media(
                message_id=test["message_id"],
                media_url=test.get("media_url")
            )
            
            if result:
                logger.success(f"‚úÖ Download bem-sucedido: {len(result)} bytes")
            else:
                logger.warning(f"‚ö†Ô∏è Download retornou None")
                
        except Exception as e:
            logger.error(f"‚ùå Erro no teste: {e}")


async def test_pdf_processing_flow():
    """Testa fluxo completo de processamento de PDF"""
    from services.whatsapp_service import whatsapp_service
    
    logger.info("\n=== TESTE DE FLUXO COMPLETO DE PDF ===")
    
    # Criar PDF de teste
    test_pdf_content = b"%PDF-1.4\n%Test PDF Content\nstream\nTeste de conta de luz\nValor: R$ 250,00\nendstream"
    
    # Simular dados de mensagem com PDF
    test_message_data = {
        "key": {
            "id": "TEST_MESSAGE_123",
            "remoteJid": "5511999999999@s.whatsapp.net",
            "fromMe": False
        },
        "messageTimestamp": int(datetime.now().timestamp()),
        "pushName": "Teste User",
        "message": {
            "documentMessage": {
                "fileName": "conta_luz_teste.pdf",
                "mimetype": "application/pdf",
                "url": "https://example.com/test.pdf",
                "directPath": "/v/t62.7119-24/test.pdf",
                "mediaKey": "test_media_key"
            }
        }
    }
    
    # Salvar PDF tempor√°rio para simular cache
    with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp:
        tmp.write(test_pdf_content)
        test_pdf_path = tmp.name
    
    logger.info(f"PDF de teste criado: {test_pdf_path}")
    
    try:
        # Simular processamento
        result = await whatsapp_service._process_media(
            message_id="TEST_MESSAGE_123",
            media_type="document",
            media_info={
                "filename": "conta_luz_teste.pdf",
                "mimetype": "application/pdf",
                "url": "https://example.com/test.pdf"
            }
        )
        
        if result:
            logger.success("‚úÖ Processamento de m√≠dia bem-sucedido")
            logger.info(f"Resultado: {list(result.keys())}")
            logger.info(f"Arquivo salvo em: {result.get('path')}")
            logger.info(f"Tamanho: {result.get('size')} bytes")
            logger.info(f"Base64 presente: {'base64' in result}")
            logger.info(f"Content presente: {'content' in result}")
            
            # Verificar arquivo
            if result.get('path') and os.path.exists(result['path']):
                logger.success(f"‚úÖ Arquivo existe e tem {os.path.getsize(result['path'])} bytes")
            else:
                logger.error("‚ùå Arquivo n√£o encontrado ap√≥s processamento")
                
        else:
            logger.error("‚ùå Processamento retornou None")
            
    except Exception as e:
        logger.error(f"‚ùå Erro no processamento: {e}", exc_info=True)
    
    finally:
        # Limpar arquivo tempor√°rio
        if os.path.exists(test_pdf_path):
            os.unlink(test_pdf_path)


async def test_media_url_construction():
    """Testa constru√ß√£o de URLs de m√≠dia"""
    logger.info("\n=== TESTE DE CONSTRU√á√ÉO DE URLs ===")
    
    test_cases = [
        {
            "directPath": "/v/t62.7119-24/12345.pdf",
            "expected": "https://mmg.whatsapp.net/v/t62.7119-24/12345.pdf"
        },
        {
            "url": "https://media.whatsapp.net/file.pdf",
            "expected": "https://media.whatsapp.net/file.pdf"
        }
    ]
    
    for test in test_cases:
        if "directPath" in test:
            url = f"https://mmg.whatsapp.net{test['directPath']}"
        else:
            url = test.get("url", "")
            
        logger.info(f"Constru√≠do: {url}")
        logger.info(f"Esperado: {test['expected']}")
        logger.success(f"‚úÖ Match: {url == test['expected']}")


async def main():
    """Executa todos os testes"""
    logger.info("üöÄ INICIANDO TESTES DE CORRE√á√ÉO EVOLUTION API")
    logger.info(f"Timestamp: {datetime.now().isoformat()}")
    
    # 1. Testar conex√£o
    connected = await test_evolution_api_connection()
    
    if connected:
        # 2. Testar estrat√©gias de download
        await test_download_strategies()
        
        # 3. Testar fluxo completo
        await test_pdf_processing_flow()
    else:
        logger.warning("‚ö†Ô∏è Evolution API n√£o est√° conectada. Alguns testes ser√£o pulados.")
    
    # 4. Testar constru√ß√£o de URLs (sempre executa)
    await test_media_url_construction()
    
    logger.info("\nüìä RESUMO DAS CORRE√á√ïES APLICADAS:")
    logger.info("1. ‚úÖ download_media agora tem 3 estrat√©gias de fallback")
    logger.info("2. ‚úÖ URLs de m√≠dia s√£o extra√≠das e passadas para download")
    logger.info("3. ‚úÖ Conte√∫do bin√°rio √© sempre inclu√≠do no retorno")
    logger.info("4. ‚úÖ Base64 √© sempre gerado para todos os tipos de m√≠dia")
    logger.info("5. ‚úÖ Verifica√ß√£o de arquivo ap√≥s salvamento")
    
    logger.info("\nüí° PR√ìXIMOS PASSOS:")
    logger.info("1. Reiniciar o servidor para aplicar as mudan√ßas")
    logger.info("2. Enviar um PDF real via WhatsApp")
    logger.info("3. Monitorar os logs para ver qual estrat√©gia funciona")
    logger.info("4. Verificar se o agente consegue processar o conte√∫do")


if __name__ == "__main__":
    asyncio.run(main())