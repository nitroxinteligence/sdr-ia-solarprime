#!/usr/bin/env python3
"""
Teste b√°sico para validar as corre√ß√µes implementadas no sistema SDR Agent.
Este script testa as principais funcionalidades corrigidas.
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio do projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """Testa se todos os imports cr√≠ticos funcionam"""
    print("üß™ Testando imports...")
    
    try:
        # Test core types
        from agente.core.types import WhatsAppMessage, Lead, Conversation, Message, AgentResponse
        print("‚úÖ Core types importados com sucesso")
        
        # Test repositories
        from agente.repositories.lead_repository import LeadRepository
        from agente.repositories.conversation_repository import ConversationRepository  
        from agente.repositories.message_repository import MessageRepository
        print("‚úÖ Repositories importados com sucesso")
        
        # Test core components
        from agente.core.context_manager import ContextManager
        from agente.core.session_manager import SessionManager
        print("‚úÖ Core components importados com sucesso")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado nos imports: {e}")
        return False

def test_pydantic_models():
    """Testa se os modelos Pydantic est√£o funcionando"""
    print("üß™ Testando modelos Pydantic...")
    
    try:
        from agente.core.types import WhatsAppMessage, Lead, Conversation
        
        # Test WhatsAppMessage
        msg = WhatsAppMessage(
            instance_id="test_instance",
            phone="5511999999999",
            name="Test User",
            message="Ol√°, teste!",
            message_id="test_msg_123",
            timestamp="2025-01-01T12:00:00Z"
        )
        print(f"‚úÖ WhatsAppMessage criada: {msg.phone}")
        
        # Test Lead
        lead = Lead(
            phone_number="5511999999999",
            name="Test Lead"
        )
        print(f"‚úÖ Lead criado: {lead.name}")
        
        # Test Conversation
        import uuid
        conv = Conversation(
            lead_id=uuid.uuid4(),
            session_id="test_session",
            phone="5511999999999"
        )
        print(f"‚úÖ Conversation criada: {conv.session_id}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos modelos Pydantic: {e}")
        return False

def test_repository_aliases():
    """Testa se os m√©todos alias dos repositories funcionam"""
    print("üß™ Testando m√©todos alias dos repositories...")
    
    try:
        from agente.repositories.lead_repository import LeadRepository
        from agente.repositories.conversation_repository import ConversationRepository
        
        # Test LeadRepository alias
        lead_repo = LeadRepository()
        if hasattr(lead_repo, 'get_by_phone'):
            print("‚úÖ LeadRepository.get_by_phone() alias existe")
        else:
            print("‚ùå LeadRepository.get_by_phone() alias faltando")
            return False
        
        # Test ConversationRepository alias  
        conv_repo = ConversationRepository()
        if hasattr(conv_repo, 'get_or_create'):
            print("‚úÖ ConversationRepository.get_or_create() alias existe")
        else:
            print("‚ùå ConversationRepository.get_or_create() alias faltando")
            return False
            
        if hasattr(conv_repo, 'update_last_message_at'):
            print("‚úÖ ConversationRepository.update_last_message_at() m√©todo existe")
        else:
            print("‚ùå ConversationRepository.update_last_message_at() m√©todo faltando")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro testando repository aliases: {e}")
        return False

async def test_context_manager():
    """Testa se o ContextManager pode ser inicializado"""
    print("üß™ Testando ContextManager...")
    
    try:
        from agente.core.context_manager import ContextManager
        
        # Test initialization
        context_mgr = ContextManager()
        print("‚úÖ ContextManager inicializado com sucesso")
        
        # Test if repositories are properly initialized
        if hasattr(context_mgr, 'lead_repo') and context_mgr.lead_repo:
            print("‚úÖ LeadRepository inicializado no ContextManager")
        else:
            print("‚ùå LeadRepository n√£o inicializado no ContextManager")
            return False
            
        if hasattr(context_mgr, 'conversation_repo') and context_mgr.conversation_repo:
            print("‚úÖ ConversationRepository inicializado no ContextManager")
        else:
            print("‚ùå ConversationRepository n√£o inicializado no ContextManager")  
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro testando ContextManager: {e}")
        return False

def test_agent_response_extraction():
    """Testa a fun√ß√£o de extra√ß√£o de resposta do agente"""
    print("üß™ Testando extra√ß√£o de resposta do agente...")
    
    try:
        from agente.core.agent import SDRAgent
        
        # Create a mock agent without full initialization
        agent = object.__new__(SDRAgent)
        agent.name = "Test Agent"
        
        # Test different response types
        test_cases = [
            ("string response", "Ol√°! Como posso ajudar?"),
            ("boolean True", True),
            ("boolean False", False),
            ("dict response", {"content": "Resposta em dict"}),
            ("None response", None)
        ]
        
        for case_name, test_response in test_cases:
            try:
                result = agent._extract_response_text(test_response)
                print(f"‚úÖ {case_name}: {result[:50]}...")
            except Exception as e:
                print(f"‚ùå {case_name} falhou: {e}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro testando extra√ß√£o de resposta: {e}")
        return False

def test_configuration():
    """Testa se as configura√ß√µes est√£o carregando"""
    print("üß™ Testando configura√ß√µes...")
    
    try:
        from agente.core.config import GEMINI_API_KEY, EVOLUTION_API_URL, SUPABASE_URL
        
        # Check if critical configs are defined (not necessarily filled)
        if GEMINI_API_KEY is not None:
            print("‚úÖ GEMINI_API_KEY configurado")
        else:
            print("‚ö†Ô∏è  GEMINI_API_KEY n√£o configurado")
            
        if EVOLUTION_API_URL is not None:
            print("‚úÖ EVOLUTION_API_URL configurado")
        else:
            print("‚ö†Ô∏è  EVOLUTION_API_URL n√£o configurado")
            
        if SUPABASE_URL is not None:
            print("‚úÖ SUPABASE_URL configurado")
        else:
            print("‚ö†Ô∏è  SUPABASE_URL n√£o configurado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro testando configura√ß√µes: {e}")
        return False

async def run_all_tests():
    """Executa todos os testes"""
    print("üöÄ Iniciando testes do sistema SDR Agent...")
    print("=" * 60)
    
    tests = [
        ("Imports", test_imports),
        ("Modelos Pydantic", test_pydantic_models),  
        ("Repository Aliases", test_repository_aliases),
        ("ContextManager", test_context_manager),
        ("Agent Response Extraction", test_agent_response_extraction),
        ("Configura√ß√µes", test_configuration)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            if result:
                passed += 1
                print(f"‚úÖ {test_name} PASSOU")
            else:
                failed += 1
                print(f"‚ùå {test_name} FALHOU")
                
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name} ERRO: {e}")
    
    print("\n" + "=" * 60)
    print("üìä RESULTADOS DOS TESTES")
    print("=" * 60)
    print(f"‚úÖ Testes que passaram: {passed}")
    print(f"‚ùå Testes que falharam: {failed}")
    print(f"üìà Taxa de sucesso: {(passed/(passed+failed)*100):.1f}%")
    
    if failed == 0:
        print("\nüéâ TODOS OS TESTES PASSARAM! Sistema pronto para uso.")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {failed} teste(s) falharam. Verifique os erros acima.")
        return False

if __name__ == "__main__":
    asyncio.run(run_all_tests())