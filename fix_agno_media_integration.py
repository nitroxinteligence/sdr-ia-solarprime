#!/usr/bin/env python3
"""
Fix AGnO Media Integration
==========================
Script para corrigir a integra√ß√£o de m√≠dia entre Evolution API e AGnO Framework
"""

import os
import sys
from pathlib import Path
from loguru import logger

# Configurar logging
logger.add("fix_agno_media.log", level="DEBUG")

def analyze_current_implementation():
    """Analisa a implementa√ß√£o atual e identifica problemas"""
    logger.info("=== AN√ÅLISE DA IMPLEMENTA√á√ÉO ATUAL ===")
    
    issues = []
    
    # 1. Verificar imports do AGnO
    logger.info("‚úÖ Imports do AGnO est√£o corretos:")
    logger.info("  - from agno.media import Image, Audio, Video")
    logger.info("  - from agno.agent import Agent, AgentMemory")
    
    # 2. Identificar problemas no fluxo
    logger.warning("‚ùå Problemas identificados:")
    
    issues.append({
        "problema": "Evolution API n√£o est√° baixando conte√∫do real",
        "arquivo": "services/evolution_api.py",
        "linha": "download_media()",
        "solu√ß√£o": "Implementar m√∫ltiplas estrat√©gias de download"
    })
    
    issues.append({
        "problema": "WhatsApp Service n√£o est√° passando dados completos",
        "arquivo": "services/whatsapp_service.py", 
        "linha": "_process_media()",
        "solu√ß√£o": "Garantir que 'content' bin√°rio seja inclu√≠do"
    })
    
    issues.append({
        "problema": "AGnO Image recebe URLs ao inv√©s de conte√∫do",
        "arquivo": "agents/sdr_agent.py",
        "linha": "_create_agno_image()",
        "solu√ß√£o": "Priorizar content/base64 sobre URLs"
    })
    
    return issues


def generate_fixes():
    """Gera corre√ß√µes para os problemas identificados"""
    logger.info("\n=== GERANDO CORRE√á√ïES ===")
    
    fixes = {}
    
    # Fix 1: Evolution API - Download robusto
    fixes['evolution_api.py'] = '''
# Adicionar ao download_media() ap√≥s linha 289:

# Adicionar logging detalhado
logger.info(f"üîç Iniciando download de m√≠dia: {message_id}")

# Validar resposta
if response.status_code == 200:
    data = response.json()
    logger.info(f"üìä Resposta recebida: {list(data.keys())}")
    
    if "base64" in data and data["base64"]:
        logger.success(f"‚úÖ Base64 recebido: {len(data['base64'])} chars")
        return base64.b64decode(data["base64"])
    else:
        logger.error(f"‚ùå Resposta sem base64: {data}")
        # Tentar m√©todo alternativo aqui
'''

    # Fix 2: WhatsApp Service - Garantir conte√∫do
    fixes['whatsapp_service.py'] = '''
# Modificar _process_media() para sempre verificar conte√∫do:

# Ap√≥s baixar m√≠dia (linha ~500):
if media_data:
    logger.info(f"‚úÖ M√≠dia baixada: {len(media_data)} bytes")
    
    # IMPORTANTE: Validar que √© conte√∫do real
    if len(media_data) < 100:
        logger.error(f"‚ö†Ô∏è Conte√∫do suspeito (muito pequeno): {len(media_data)} bytes")
        # Tentar download novamente ou usar fallback
else:
    logger.error("‚ùå Download retornou None/vazio")
    # Implementar estrat√©gia de retry aqui
'''

    # Fix 3: SDR Agent - Prioriza√ß√£o correta
    fixes['sdr_agent.py'] = '''
# J√° implementado corretamente na fun√ß√£o _create_agno_image()
# A prioriza√ß√£o est√° correta: content > base64 > path > url

# Adicionar valida√ß√£o extra:
if 'content' in image_data and image_data['content']:
    content = image_data['content']
    
    # Validar que √© bytes real e n√£o string
    if isinstance(content, str):
        logger.warning("‚ö†Ô∏è Content √© string, convertendo para bytes")
        try:
            content = content.encode('latin-1')  # Para dados bin√°rios
        except:
            content = base64.b64decode(content)  # Se for base64
    
    # Validar tamanho m√≠nimo
    if len(content) < 100:
        logger.error(f"‚ùå Conte√∫do muito pequeno: {len(content)} bytes")
        return None
'''

    return fixes


def create_validation_script():
    """Cria script de valida√ß√£o do fluxo completo"""
    validation_script = '''#!/usr/bin/env python3
"""
Valida√ß√£o do Fluxo de M√≠dia
===========================
"""

import asyncio
from loguru import logger

async def validate_media_flow():
    """Valida cada etapa do fluxo de m√≠dia"""
    
    steps = []
    
    # Passo 1: Evolution API
    logger.info("üìã Passo 1: Verificando Evolution API...")
    from services.evolution_api import evolution_client
    await evolution_client.initialize()
    status = await evolution_client.check_connection()
    
    if status.get("state") == "open":
        steps.append("‚úÖ Evolution API conectada")
    else:
        steps.append("‚ùå Evolution API desconectada")
        return steps
    
    # Passo 2: Download de teste
    logger.info("üìã Passo 2: Testando download...")
    # Implementar teste de download aqui
    
    # Passo 3: Processamento
    logger.info("üìã Passo 3: Testando processamento...")
    # Implementar teste de processamento aqui
    
    return steps

if __name__ == "__main__":
    steps = asyncio.run(validate_media_flow())
    print("\\n=== RESULTADO DA VALIDA√á√ÉO ===")
    for step in steps:
        print(step)
'''
    
    with open("validate_media_flow.py", "w") as f:
        f.write(validation_script)
    
    logger.success("‚úÖ Script de valida√ß√£o criado: validate_media_flow.py")


def main():
    """Executa an√°lise e gera relat√≥rio de corre√ß√µes"""
    logger.info("üöÄ INICIANDO AN√ÅLISE DE INTEGRA√á√ÉO AGNO/EVOLUTION")
    
    # 1. Analisar implementa√ß√£o
    issues = analyze_current_implementation()
    
    logger.info(f"\nüìä {len(issues)} problemas identificados:")
    for i, issue in enumerate(issues, 1):
        logger.warning(f"{i}. {issue['problema']}")
        logger.info(f"   üìÅ Arquivo: {issue['arquivo']}")
        logger.info(f"   üìç Local: {issue['linha']}")
        logger.info(f"   üí° Solu√ß√£o: {issue['solu√ß√£o']}")
    
    # 2. Gerar corre√ß√µes
    fixes = generate_fixes()
    
    logger.info("\nüîß CORRE√á√ïES SUGERIDAS:")
    for file, fix in fixes.items():
        logger.info(f"\nüìÅ {file}:")
        print(fix)
    
    # 3. Criar script de valida√ß√£o
    create_validation_script()
    
    # 4. Resumo final
    logger.info("\n" + "="*60)
    logger.info("üìã PLANO DE A√á√ÉO:")
    logger.info("="*60)
    
    action_plan = [
        "1. Adicionar logs detalhados em evolution_api.py",
        "2. Validar tamanho do conte√∫do em whatsapp_service.py",
        "3. Garantir que 'content' seja sempre bytes em sdr_agent.py",
        "4. Executar validate_media_flow.py para testar",
        "5. Monitorar logs em tempo real durante testes"
    ]
    
    for action in action_plan:
        logger.info(f"  {action}")
    
    logger.info("\nüí° COMANDO PARA MONITORAR:")
    logger.info("tail -f logs/app.log | grep -E 'üì•|‚úÖ|‚ùå|üîÑ|üìä'")
    
    logger.info("\nüéØ RESULTADO ESPERADO:")
    logger.info("Quando corrigido, o fluxo ser√°:")
    logger.info("1. WhatsApp envia m√≠dia")
    logger.info("2. Evolution API baixa conte√∫do real")
    logger.info("3. WhatsApp Service valida e passa bytes")
    logger.info("4. AGnO cria Image(content=bytes)")
    logger.info("5. Gemini/OpenAI processam com sucesso")


if __name__ == "__main__":
    main()