"""
Utilit√°rios de formata√ß√£o para o sistema SDR Agent
"""

import re
from typing import Optional, Union
from datetime import datetime, timedelta, timezone
from decimal import Decimal

from loguru import logger


def format_phone_number(phone: str) -> str:
    """
    Formata n√∫mero de telefone para o padr√£o brasileiro
    
    Args:
        phone: N√∫mero de telefone em qualquer formato
        
    Returns:
        N√∫mero formatado: +5511999999999
    """
    # Remove todos os caracteres n√£o num√©ricos
    digits = re.sub(r'\D', '', phone)
    
    # Remove o 9 extra se tiver 13 d√≠gitos (5511999999999)
    if len(digits) == 13 and digits[4] == '9':
        digits = digits[:4] + digits[5:]
    
    # Adiciona c√≥digo do pa√≠s se n√£o tiver
    if not digits.startswith('55'):
        digits = '55' + digits
    
    # Adiciona + no in√≠cio
    return '+' + digits


def format_currency(value: Union[float, Decimal, str]) -> str:
    """
    Formata valor monet√°rio para o padr√£o brasileiro
    
    Args:
        value: Valor monet√°rio
        
    Returns:
        Valor formatado: R$ 1.234,56
    """
    if isinstance(value, str):
        # Remove R$ e espa√ßos, substitui v√≠rgula por ponto
        value = value.replace('R$', '').replace(' ', '').replace(',', '.')
        value = float(value)
    
    return f"R$ {value:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')


def format_cpf_cnpj(document: str) -> str:
    """
    Formata CPF ou CNPJ
    
    Args:
        document: CPF ou CNPJ sem formata√ß√£o
        
    Returns:
        Documento formatado
    """
    # Remove caracteres n√£o num√©ricos
    digits = re.sub(r'\D', '', document)
    
    if len(digits) == 11:  # CPF
        return f"{digits[:3]}.{digits[3:6]}.{digits[6:9]}-{digits[9:]}"
    elif len(digits) == 14:  # CNPJ
        return f"{digits[:2]}.{digits[2:5]}.{digits[5:8]}/{digits[8:12]}-{digits[12:]}"
    else:
        return document  # Retorna original se n√£o for v√°lido


def format_address(
    street: Optional[str] = None,
    number: Optional[str] = None,
    complement: Optional[str] = None,
    neighborhood: Optional[str] = None,
    city: Optional[str] = None,
    state: Optional[str] = None,
    zip_code: Optional[str] = None
) -> str:
    """
    Formata endere√ßo completo
    
    Returns:
        Endere√ßo formatado
    """
    parts = []
    
    if street:
        if number:
            parts.append(f"{street}, {number}")
            if complement:
                parts[-1] += f" - {complement}"
        else:
            parts.append(street)
    
    if neighborhood:
        parts.append(neighborhood)
    
    if city:
        if state:
            parts.append(f"{city}/{state}")
        else:
            parts.append(city)
    
    if zip_code:
        # Formata CEP: 12345-678
        zip_clean = re.sub(r'\D', '', zip_code)
        if len(zip_clean) == 8:
            parts.append(f"CEP: {zip_clean[:5]}-{zip_clean[5:]}")
        else:
            parts.append(f"CEP: {zip_code}")
    
    return ", ".join(parts)


def format_datetime(dt: datetime, format: str = "full") -> str:
    """
    Formata datetime para exibi√ß√£o
    
    Args:
        dt: Datetime para formatar
        format: Tipo de formato (full, date, time, relative)
        
    Returns:
        Data/hora formatada
    """
    if format == "full":
        return dt.strftime("%d/%m/%Y √†s %H:%M")
    elif format == "date":
        return dt.strftime("%d/%m/%Y")
    elif format == "time":
        return dt.strftime("%H:%M")
    elif format == "relative":
        return format_relative_time(dt)
    else:
        return str(dt)


def format_relative_time(dt: datetime) -> str:
    """
    Formata tempo relativo (ex: h√° 5 minutos)
    
    Args:
        dt: Datetime para comparar
        
    Returns:
        Tempo relativo formatado
    """
    now = datetime.now()
    diff = now - dt
    
    if diff < timedelta(minutes=1):
        return "agora mesmo"
    elif diff < timedelta(hours=1):
        minutes = int(diff.total_seconds() / 60)
        return f"h√° {minutes} minuto{'s' if minutes > 1 else ''}"
    elif diff < timedelta(days=1):
        hours = int(diff.total_seconds() / 3600)
        return f"h√° {hours} hora{'s' if hours > 1 else ''}"
    elif diff < timedelta(days=7):
        days = diff.days
        return f"h√° {days} dia{'s' if days > 1 else ''}"
    else:
        return dt.strftime("%d/%m/%Y")


def format_consumption(kwh: Union[int, float]) -> str:
    """
    Formata consumo de energia
    
    Args:
        kwh: Consumo em kWh
        
    Returns:
        Consumo formatado
    """
    return f"{int(kwh):,} kWh".replace(',', '.')


def format_percentage(value: float, decimals: int = 1) -> str:
    """
    Formata percentual
    
    Args:
        value: Valor entre 0 e 1 ou 0 e 100
        decimals: Casas decimais
        
    Returns:
        Percentual formatado
    """
    # Se valor menor que 1, assume que est√° em decimal
    if value <= 1:
        value = value * 100
    
    if decimals == 0:
        return f"{int(value)}%"
    else:
        return f"{value:.{decimals}f}%"


def format_meeting_title(lead_name: str, company: str = "SolarPrime") -> str:
    """
    Formata t√≠tulo da reuni√£o
    
    Args:
        lead_name: Nome do lead
        company: Nome da empresa
        
    Returns:
        T√≠tulo formatado
    """
    return f"Reuni√£o {company} - {lead_name}"


def format_meeting_description(
    lead_name: str,
    phone: str,
    consultant: str = "Helen Vieira",
    address: Optional[str] = None,
    bill_value: Optional[float] = None
) -> str:
    """
    Formata descri√ß√£o completa da reuni√£o
    
    Returns:
        Descri√ß√£o formatada
    """
    description = f"""üìÖ Reuni√£o de Apresenta√ß√£o - Energia Solar SolarPrime

üë§ Cliente: {lead_name}
üì± WhatsApp: {phone}
üë©‚Äçüíº Consultora: {consultant}

üè† Endere√ßo: {address or 'A confirmar'}
üí∞ Valor atual da conta: {format_currency(bill_value) if bill_value else 'A informar'}

üìã Pauta:
‚Ä¢ Apresenta√ß√£o da solu√ß√£o de energia solar
‚Ä¢ An√°lise personalizada de economia
‚Ä¢ Esclarecimento de d√∫vidas
‚Ä¢ Proposta comercial

‚è±Ô∏è Dura√ß√£o estimada: 1 hora

üí¨ Confirme sua presen√ßa respondendo esta mensagem!
"""
    return description


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    Trunca texto longo preservando palavras completas
    
    Args:
        text: Texto para truncar
        max_length: Tamanho m√°ximo
        suffix: Sufixo para adicionar
        
    Returns:
        Texto truncado
    """
    if len(text) <= max_length:
        return text
    
    # Encontra o √∫ltimo espa√ßo antes do limite
    truncated = text[:max_length]
    last_space = truncated.rfind(' ')
    
    if last_space > 0:
        truncated = truncated[:last_space]
    
    return truncated + suffix


def clean_text(text: str) -> str:
    """
    Limpa texto removendo caracteres especiais e espa√ßos extras
    
    Args:
        text: Texto para limpar
        
    Returns:
        Texto limpo
    """
    # Remove m√∫ltiplos espa√ßos
    text = re.sub(r'\s+', ' ', text)
    
    # Remove espa√ßos no in√≠cio e fim
    text = text.strip()
    
    # Remove caracteres de controle
    text = re.sub(r'[\x00-\x1F\x7F-\x9F]', '', text)
    
    return text


def extract_numbers(text: str) -> list[float]:
    """
    Extrai n√∫meros de um texto
    
    Args:
        text: Texto para extrair n√∫meros
        
    Returns:
        Lista de n√∫meros encontrados
    """
    # Padr√£o para n√∫meros com v√≠rgula como decimal
    pattern = r'\d+(?:[.,]\d+)?'
    matches = re.findall(pattern, text)
    
    numbers = []
    for match in matches:
        # Substitui v√≠rgula por ponto
        number_str = match.replace(',', '.')
        try:
            numbers.append(float(number_str))
        except ValueError:
            logger.warning(f"N√£o foi poss√≠vel converter '{match}' para n√∫mero")
    
    return numbers


def format_bullet_list(items: list[str], bullet: str = "‚Ä¢") -> str:
    """
    Formata lista com bullets
    
    Args:
        items: Itens da lista
        bullet: Caractere do bullet
        
    Returns:
        Lista formatada
    """
    return "\n".join([f"{bullet} {item}" for item in items])


def format_stage_name(stage: str) -> str:
    """
    Formata nome do est√°gio para exibi√ß√£o
    
    Args:
        stage: Nome do est√°gio em UPPER_CASE
        
    Returns:
        Nome formatado
    """
    stage_names = {
        "INITIAL_CONTACT": "Contato Inicial",
        "IDENTIFYING": "Identificando",
        "QUALIFYING": "Qualificando",
        "QUALIFIED": "Qualificado",
        "SCHEDULING": "Agendando",
        "SCHEDULED": "Agendado",
        "NOT_INTERESTED": "N√£o Interessado",
        "LOST": "Perdido"
    }
    
    return stage_names.get(stage, stage.replace("_", " ").title())


def ensure_timezone_aware(dt: Union[datetime, str, None]) -> Optional[datetime]:
    """
    Garante que um datetime seja timezone-aware (UTC).
    
    Esta fun√ß√£o resolve o erro comum "can't subtract offset-naive and offset-aware datetimes"
    garantindo que todos os datetimes tenham informa√ß√£o de timezone.
    
    Args:
        dt: Datetime, string ISO ou None
        
    Returns:
        Datetime timezone-aware em UTC ou None
        
    Examples:
        >>> ensure_timezone_aware("2025-01-01T10:00:00Z")
        datetime(2025, 1, 1, 10, 0, tzinfo=timezone.utc)
        
        >>> ensure_timezone_aware("2025-01-01T10:00:00")  # sem timezone
        datetime(2025, 1, 1, 10, 0, tzinfo=timezone.utc)
    """
    if dt is None:
        return None
    
    try:
        # Se j√° √© datetime
        if isinstance(dt, datetime):
            # Se j√° tem timezone, retorna como est√°
            if dt.tzinfo is not None:
                return dt
            # Se n√£o tem timezone, assume UTC
            return dt.replace(tzinfo=timezone.utc)
        
        # Se √© string, converte para datetime
        if isinstance(dt, str):
            # Trata diferentes padr√µes de string ISO
            dt_str = dt.strip()
            
            # Se termina com Z, substitui por +00:00
            if dt_str.endswith('Z'):
                dt_str = dt_str[:-1] + '+00:00'
            
            # Se n√£o tem timezone info, adiciona UTC
            if '+' not in dt_str and 'Z' not in dt and dt_str.count('T') == 1:
                dt_str += '+00:00'
            
            # Converte usando fromisoformat
            parsed_dt = datetime.fromisoformat(dt_str)
            
            # Se ainda n√£o tem timezone ap√≥s convers√£o, assume UTC
            if parsed_dt.tzinfo is None:
                parsed_dt = parsed_dt.replace(tzinfo=timezone.utc)
            
            return parsed_dt
            
    except (ValueError, TypeError) as e:
        logger.warning(f"Erro ao converter datetime '{dt}' para timezone-aware: {e}")
        return None
    
    # Se chegou aqui, tipo n√£o suportado
    logger.warning(f"Tipo n√£o suportado para ensure_timezone_aware: {type(dt)}")
    return None