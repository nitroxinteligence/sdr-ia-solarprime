#!/usr/bin/env python3
"""
Script para testar DIRETAMENTE os testes reais do Google Calendar
Executa valida√ß√µes sem depender do framework pytest.
"""

import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# Adiciona o diret√≥rio raiz ao Python path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

# CARREGA O .ENV CORRETAMENTE
env_path = root_dir / '.env'
print(f"üîß Carregando vari√°veis de ambiente de: {env_path}")
load_dotenv(env_path)

from agente.core.config import (
    GOOGLE_SERVICE_ACCOUNT_EMAIL,
    GOOGLE_PRIVATE_KEY,
    GOOGLE_PROJECT_ID,
    GOOGLE_CALENDAR_ID,
    DISABLE_GOOGLE_CALENDAR
)

def check_credentials():
    """Verifica se temos credenciais reais do Google Calendar."""
    print("üîç VERIFICANDO CREDENCIAIS GOOGLE CALENDAR")
    print("=" * 50)
    
    required_vars = {
        'GOOGLE_SERVICE_ACCOUNT_EMAIL': GOOGLE_SERVICE_ACCOUNT_EMAIL,
        'GOOGLE_PRIVATE_KEY': GOOGLE_PRIVATE_KEY,
        'GOOGLE_PROJECT_ID': GOOGLE_PROJECT_ID,
        'GOOGLE_CALENDAR_ID': GOOGLE_CALENDAR_ID or 'primary'
    }
    
    print("üìã Status das vari√°veis:")
    for name, value in required_vars.items():
        if value and value.strip() and not value.startswith('test-'):
            status = "‚úÖ REAL"
            print(f"   {name}: {status}")
        elif value and value.strip():
            status = "‚ö†Ô∏è  TESTE/DUMMY"  
            print(f"   {name}: {status}")
        else:
            status = "‚ùå AUSENTE"
            print(f"   {name}: {status}")
    
    print(f"\nüîß DISABLE_GOOGLE_CALENDAR: {DISABLE_GOOGLE_CALENDAR}")
    
    # Determina se temos credenciais reais
    has_real_creds = all(
        var and var.strip() and not var.startswith('test-') 
        for var in [GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY, GOOGLE_PROJECT_ID]
    )
    
    print(f"\nüìä RESULTADO:")
    if has_real_creds and not DISABLE_GOOGLE_CALENDAR:
        print("   ‚úÖ CREDENCIAIS REAIS DISPON√çVEIS - Testes reais podem executar")
        return True
    elif DISABLE_GOOGLE_CALENDAR:
        print("   ‚ö†Ô∏è  GOOGLE CALENDAR DESABILITADO - Testes ser√£o pulados")
        return False
    else:
        print("   ‚ùå CREDENCIAIS REAIS N√ÉO DISPON√çVEIS - Testes ser√£o pulados")
        print("\nüí° Para executar testes reais, configure:")
        print("   - GOOGLE_SERVICE_ACCOUNT_EMAIL")
        print("   - GOOGLE_PRIVATE_KEY") 
        print("   - GOOGLE_PROJECT_ID")
        return False

def test_basic_google_auth():
    """Testa autentica√ß√£o b√°sica do Google Calendar (apenas se credenciais reais)."""
    print("\nüîê TESTANDO AUTENTICA√á√ÉO GOOGLE CALENDAR")
    print("=" * 50)
    
    if not check_credentials():
        print("   ‚è≠Ô∏è  PULANDO - Credenciais n√£o dispon√≠veis")
        return False
    
    try:
        from google.oauth2 import service_account
        from googleapiclient.discovery import build
        import httplib2
        import google_auth_httplib2
        
        print("üì¶ Importa√ß√µes realizadas com sucesso")
        
        # Cria credenciais
        service_account_info = {
            "type": "service_account", 
            "project_id": GOOGLE_PROJECT_ID,
            "private_key": GOOGLE_PRIVATE_KEY,
            "client_email": GOOGLE_SERVICE_ACCOUNT_EMAIL,
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token"
        }
        
        credentials = service_account.Credentials.from_service_account_info(
            service_account_info, scopes=['https://www.googleapis.com/auth/calendar']
        )
        
        print("‚úÖ Credenciais criadas com sucesso")
        print(f"   üìß Service Account: {credentials.service_account_email}")
        
        # Cria servi√ßo
        http = google_auth_httplib2.AuthorizedHttp(credentials, http=httplib2.Http())
        service = build('calendar', 'v3', http=http, cache_discovery=False)
        
        print("‚úÖ Servi√ßo Google Calendar criado")
        
        # Testa chamada real √† API
        print("üîÑ Fazendo chamada REAL √† API...")
        calendar_info = service.calendars().get(calendarId=GOOGLE_CALENDAR_ID or 'primary').execute()
        
        print("‚úÖ SUCESSO! Chamada real √† API funcionou")
        print(f"   üìÖ Calend√°rio: {calendar_info.get('summary', 'N/A')}")
        print(f"   üÜî ID: {calendar_info.get('id', 'N/A')}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå ERRO DE IMPORTA√á√ÉO: {e}")
        print("   üí° Instale as depend√™ncias: pip install google-auth google-api-python-client")
        return False
    except Exception as e:
        print(f"‚ùå ERRO NA AUTENTICA√á√ÉO: {e}")
        print("   üí° Verifique se as credenciais est√£o corretas")
        return False

def main():
    """Fun√ß√£o principal."""
    print("üöÄ TESTE DIRETO DE INTEGRA√á√ÉO REAL - GOOGLE CALENDAR")
    print("=" * 60)
    print("Este script testa a integra√ß√£o real sem mocks ou frameworks")
    print()
    
    # Define environment para indicar que √© teste
    os.environ['PYTEST_RUNNING'] = 'true'
    
    # Executa valida√ß√µes
    has_creds = check_credentials()
    
    if has_creds:
        success = test_basic_google_auth()
        if success:
            print("\nüéâ TODOS OS TESTES PASSARAM!")
            print("   Os testes reais est√£o prontos para execu√ß√£o")
        else:
            print("\n‚ùå FALHA NOS TESTES")
            print("   Verifique as credenciais e configura√ß√µes")
    else:
        print("\n‚ö†Ô∏è  TESTES N√ÉO EXECUTADOS")
        print("   Configure credenciais reais para executar testes reais")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()