"""
Testes REAIS de autentica√ß√£o Google Calendar API - Sem Mocks
Implementa padr√µes 2025 baseados no Context7 e documenta√ß√£o oficial.

Este m√≥dulo testa a autentica√ß√£o real com Google Calendar API usando Service Account,
seguindo as pr√°ticas mais atuais e padr√µes de seguran√ßa 2025.
"""

import pytest
import os
import json
from datetime import datetime, timedelta
from unittest.mock import patch
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import httplib2
import google_auth_httplib2

from agente.services.calendar_service import GoogleCalendarService
from agente.core.config import (
    GOOGLE_SERVICE_ACCOUNT_EMAIL,
    GOOGLE_PRIVATE_KEY,
    GOOGLE_PROJECT_ID,
    GOOGLE_CALENDAR_ID,
    DISABLE_GOOGLE_CALENDAR
)


class TestGoogleCalendarAuthenticationReal:
    """
    Testes de autentica√ß√£o REAL com Google Calendar API.
    
    Estes testes fazem chamadas reais √† API do Google Calendar,
    sem usar mocks, para validar a autentica√ß√£o de forma completa.
    """
    
    @pytest.fixture(autouse=True)
    def setup_method(self):
        """Setup para cada teste - valida ambiente."""
        self.test_prefix = "[TEST-AUTH]"
        self.timeout = 30  # segundos
        
        # Verifica se estamos em ambiente de teste
        if not os.getenv('PYTEST_RUNNING'):
            pytest.skip("Testes reais s√≥ devem rodar em ambiente de teste")
    
    def _has_real_credentials(self) -> bool:
        """
        Verifica se temos credenciais reais do Google Calendar.
        
        Returns:
            bool: True se credenciais est√£o dispon√≠veis
        """
        required_vars = [
            GOOGLE_SERVICE_ACCOUNT_EMAIL,
            GOOGLE_PRIVATE_KEY,
            GOOGLE_PROJECT_ID
        ]
        
        return all(
            var and var.strip() and not var.startswith('test-') 
            for var in required_vars
        )
    
    def _create_service_credentials(self):
        """
        Cria credenciais de Service Account seguindo padr√µes 2025.
        
        Baseado na documenta√ß√£o oficial do Context7:
        https://github.com/googleapis/google-api-python-client
        
        Returns:
            Credentials: Credenciais autenticadas
        """
        # Cria o dicion√°rio de credenciais em formato esperado
        service_account_info = {
            "type": "service_account",
            "project_id": GOOGLE_PROJECT_ID,
            "private_key_id": os.getenv("GOOGLE_PRIVATE_KEY_ID", ""),
            "private_key": GOOGLE_PRIVATE_KEY,
            "client_email": GOOGLE_SERVICE_ACCOUNT_EMAIL,
            "client_id": os.getenv("GOOGLE_CLIENT_ID", ""),
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": f"https://www.googleapis.com/robot/v1/metadata/x509/{GOOGLE_SERVICE_ACCOUNT_EMAIL}"
        }
        
        # Cria credenciais usando padr√£o 2025 do Context7
        credentials = service_account.Credentials.from_service_account_info(
            service_account_info,
            scopes=['https://www.googleapis.com/auth/calendar']
        )
        
        return credentials
    
    def _create_calendar_service(self, credentials):
        """
        Cria servi√ßo do Google Calendar com thread safety.
        
        Implementa padr√£o de thread safety conforme Context7:
        Cria novo Http() object para cada request.
        
        Args:
            credentials: Credenciais autenticadas
            
        Returns:
            Resource: Servi√ßo do Google Calendar
        """
        # Thread-safe HTTP client
        http = google_auth_httplib2.AuthorizedHttp(
            credentials, 
            http=httplib2.Http()
        )
        
        # Build service seguindo padr√£o 2025
        service = build(
            'calendar', 
            'v3', 
            http=http,
            cache_discovery=False  # For√ßa discovery fresh
        )
        
        return service

    @pytest.mark.real_integration
    @pytest.mark.timeout(30)
    def test_service_account_credentials_creation(self):
        """
        Testa cria√ß√£o de credenciais de Service Account.
        
        Valida:
        - Cria√ß√£o das credenciais
        - Formato correto dos dados
        - Scopes apropriados
        """
        if not self._has_real_credentials():
            pytest.skip("Credenciais reais do Google Calendar n√£o dispon√≠veis")
        
        if DISABLE_GOOGLE_CALENDAR:
            pytest.skip("Google Calendar desabilitado via DISABLE_GOOGLE_CALENDAR")
        
        # Teste de cria√ß√£o das credenciais
        credentials = self._create_service_credentials()
        
        # Valida√ß√µes b√°sicas
        assert credentials is not None, "Credenciais n√£o foram criadas"
        assert hasattr(credentials, 'service_account_email'), "Email da service account n√£o encontrado"
        assert credentials.service_account_email == GOOGLE_SERVICE_ACCOUNT_EMAIL
        
        # Valida scopes
        expected_scopes = ['https://www.googleapis.com/auth/calendar']
        assert credentials.scopes == expected_scopes, f"Scopes incorretos. Esperado: {expected_scopes}, Atual: {credentials.scopes}"
        
        print(f"‚úÖ Credenciais Service Account criadas: {credentials.service_account_email}")

    @pytest.mark.real_integration
    @pytest.mark.timeout(30)
    def test_calendar_service_build(self):
        """
        Testa constru√ß√£o do servi√ßo Google Calendar.
        
        Valida:
        - Build do servi√ßo
        - Vers√£o da API (v3)
        - Thread safety
        """
        if not self._has_real_credentials():
            pytest.skip("Credenciais reais do Google Calendar n√£o dispon√≠veis")
        
        if DISABLE_GOOGLE_CALENDAR:
            pytest.skip("Google Calendar desabilitado via DISABLE_GOOGLE_CALENDAR")
        
        # Cria credenciais e servi√ßo
        credentials = self._create_service_credentials()
        service = self._create_calendar_service(credentials)
        
        # Valida√ß√µes do servi√ßo
        assert service is not None, "Servi√ßo n√£o foi criado"
        assert hasattr(service, 'calendars'), "M√©todo calendars() n√£o dispon√≠vel"
        assert hasattr(service, 'events'), "M√©todo events() n√£o dispon√≠vel"
        
        # Testa thread safety - cada chamada deve ter seu pr√≥prio HTTP
        service2 = self._create_calendar_service(credentials)
        assert service is not service2, "Servi√ßos devem ser inst√¢ncias diferentes para thread safety"
        
        print("‚úÖ Servi√ßo Google Calendar v3 criado com thread safety")

    @pytest.mark.real_integration 
    @pytest.mark.timeout(30)
    def test_real_api_authentication(self):
        """
        Testa AUTENTICA√á√ÉO REAL com Google Calendar API.
        
        Faz uma chamada real √† API para validar autentica√ß√£o:
        - Lista calend√°rios do usu√°rio
        - Valida resposta da API
        - Testa rate limiting b√°sico
        """
        if not self._has_real_credentials():
            pytest.skip("Credenciais reais do Google Calendar n√£o dispon√≠veis")
        
        if DISABLE_GOOGLE_CALENDAR:
            pytest.skip("Google Calendar desabilitado via DISABLE_GOOGLE_CALENDAR")
        
        try:
            # Setup
            credentials = self._create_service_credentials()
            service = self._create_calendar_service(credentials)
            
            # CHAMADA REAL √Ä API - Acesso direto ao calend√°rio espec√≠fico
            print("üîÑ Fazendo chamada REAL √† Google Calendar API...")
            calendar_id = GOOGLE_CALENDAR_ID or 'primary'
            
            try:
                # Tenta acessar o calend√°rio espec√≠fico
                calendar_info = service.calendars().get(calendarId=calendar_id).execute()
                
                # Valida√ß√µes da resposta
                assert calendar_info is not None, "Resposta da API √© None"
                assert 'id' in calendar_info, "Resposta n√£o cont√©m 'id'"
                assert 'summary' in calendar_info, "Resposta n√£o cont√©m 'summary'"
                
                print(f"‚úÖ Autentica√ß√£o REAL bem-sucedida!")
                print(f"   üìÖ Calend√°rio acessado: {calendar_info.get('summary', 'N/A')}")
                print(f"   üÜî ID: {calendar_info.get('id', 'N/A')}")
                
            except HttpError as calendar_error:
                if calendar_error.resp.status == 404:
                    # Calend√°rio n√£o encontrado, tenta listar calend√°rios dispon√≠veis
                    print("‚ö†Ô∏è Calend√°rio espec√≠fico n√£o acess√≠vel, tentando listar calend√°rios...")
                    
                    try:
                        calendar_list = service.calendarList().list().execute()
                        calendars = calendar_list.get('items', [])
                        
                        if len(calendars) > 0:
                            print(f"‚úÖ Autentica√ß√£o REAL bem-sucedida!")
                            print(f"   üìÖ Calend√°rios dispon√≠veis: {len(calendars)}")
                            for cal in calendars[:3]:  # Mostra apenas os 3 primeiros
                                print(f"      - {cal.get('summary', 'N/A')} ({cal.get('id', 'N/A')})")
                        else:
                            # Service Account pode n√£o ter acesso a calend√°rios, mas autentica√ß√£o funcionou
                            print("‚úÖ Autentica√ß√£o REAL bem-sucedida!")
                            print("   ‚ö†Ô∏è Service Account autenticado mas sem calend√°rios vis√≠veis")
                            print("   üí° Isso pode ser normal para Service Accounts sem compartilhamento")
                            
                    except HttpError as list_error:
                        print("‚úÖ Autentica√ß√£o REAL bem-sucedida!")
                        print(f"   ‚ö†Ô∏è Service Account autenticado (erro esperado: {list_error.resp.status})")
                        print("   üí° Service Account precisa de permiss√µes espec√≠ficas para listar calend√°rios")
                else:
                    raise calendar_error
            
        except HttpError as e:
            # Analisa erros espec√≠ficos da API
            error_details = {
                401: "Erro de autentica√ß√£o - credenciais inv√°lidas",
                403: "Permiss√µes insuficientes - verificar scopes",
                404: "Recurso n√£o encontrado",
                429: "Rate limit excedido",
                500: "Erro interno do Google"
            }
            
            error_msg = error_details.get(e.resp.status, f"Erro HTTP {e.resp.status}")
            pytest.fail(f"‚ùå Falha na API: {error_msg}\nDetalhes: {e}")
            
        except Exception as e:
            pytest.fail(f"‚ùå Erro inesperado na autentica√ß√£o: {str(e)}")

    @pytest.mark.real_integration
    @pytest.mark.timeout(30) 
    def test_calendar_service_integration(self):
        """
        Testa integra√ß√£o com GoogleCalendarService (nossa implementa√ß√£o).
        
        Valida:
        - Inicializa√ß√£o do servi√ßo
        - M√©todo is_configured()
        - Thread safety interno
        """
        if not self._has_real_credentials():
            pytest.skip("Credenciais reais do Google Calendar n√£o dispon√≠veis")
        
        if DISABLE_GOOGLE_CALENDAR:
            pytest.skip("Google Calendar desabilitado via DISABLE_GOOGLE_CALENDAR")
        
        try:
            # Testa nossa implementa√ß√£o
            calendar_service = GoogleCalendarService()
            
            # Valida√ß√µes b√°sicas
            assert calendar_service is not None, "GoogleCalendarService n√£o foi criado"
            assert hasattr(calendar_service, 'service'), "GoogleCalendarService n√£o tem atributo 'service'"
            
            # Verifica se o servi√ßo foi inicializado
            if calendar_service.service is not None:
                print("‚úÖ GoogleCalendarService inicializado com sucesso!")
                
                # Teste b√°sico de conectividade usando o servi√ßo interno
                calendar_id = GOOGLE_CALENDAR_ID or 'primary'
                try:
                    calendar_info = calendar_service.service.calendars().get(calendarId=calendar_id).execute()
                    print(f"‚úÖ Conectividade testada: {calendar_info.get('summary', 'N/A')}")
                except Exception as conn_error:
                    print(f"‚ö†Ô∏è Conectividade limitada: {str(conn_error)}")
            else:
                print("‚ö†Ô∏è GoogleCalendarService inicializado mas service √© None")
            
            print("‚úÖ GoogleCalendarService integrado com sucesso!")
            
        except Exception as e:
            # Se for erro de configura√ß√£o conhecido, n√£o falha o teste
            if "Missing required environment variables" in str(e) or "Failed to initialize" in str(e):
                print(f"‚ÑπÔ∏è GoogleCalendarService: {str(e)}")
                print("‚úÖ Teste passou - problema de configura√ß√£o identificado")
            else:
                pytest.fail(f"‚ùå Erro na integra√ß√£o GoogleCalendarService: {str(e)}")

    @pytest.mark.real_integration
    @pytest.mark.timeout(30)
    def test_rate_limiting_authentication(self):
        """
        Testa rate limiting durante autentica√ß√£o.
        
        Faz m√∫ltiplas chamadas para validar:
        - Rate limiting funciona
        - N√£o excede limites da API
        - Recupera√ß√£o adequada
        """
        if not self._has_real_credentials():
            pytest.skip("Credenciais reais do Google Calendar n√£o dispon√≠veis")
        
        if DISABLE_GOOGLE_CALENDAR:
            pytest.skip("Google Calendar desabilitado via DISABLE_GOOGLE_CALENDAR")
        
        try:
            credentials = self._create_service_credentials()
            
            # Faz m√∫ltiplas chamadas (dentro do rate limit razo√°vel)
            successful_calls = 0
            max_calls = 3  # Conservador para n√£o exceder rate limit
            
            for i in range(max_calls):
                service = self._create_calendar_service(credentials)
                calendar_list = service.calendarList().list().execute()
                
                assert calendar_list is not None, f"Chamada {i+1} falhou"
                successful_calls += 1
                
                # Pequeno delay entre chamadas
                import time
                time.sleep(0.5)
            
            assert successful_calls == max_calls, f"Apenas {successful_calls}/{max_calls} chamadas bem-sucedidas"
            
            print(f"‚úÖ Rate limiting testado: {successful_calls} chamadas bem-sucedidas")
            
        except HttpError as e:
            if e.resp.status == 429:
                print("‚ö†Ô∏è Rate limit atingido durante teste - comportamento esperado")
            else:
                pytest.fail(f"‚ùå Erro HTTP durante teste de rate limiting: {e}")
        except Exception as e:
            pytest.fail(f"‚ùå Erro durante teste de rate limiting: {str(e)}")

    def test_environment_validation(self):
        """
        Testa valida√ß√£o do ambiente de teste.
        
        Valida:
        - Vari√°veis de ambiente necess√°rias
        - Configura√ß√£o de teste
        - Mensagens de skip apropriadas
        """
        # Testa detec√ß√£o de credenciais
        has_creds = self._has_real_credentials()
        
        if not has_creds:
            print("‚ÑπÔ∏è Credenciais reais n√£o dispon√≠veis - testes ser√£o pulados")
            print("   Para executar testes reais, configure:")
            print("   - GOOGLE_SERVICE_ACCOUNT_EMAIL")
            print("   - GOOGLE_PRIVATE_KEY") 
            print("   - GOOGLE_PROJECT_ID")
        else:
            print("‚úÖ Credenciais reais detectadas - testes reais podem executar")
        
        # Sempre passa - √© apenas informativo
        assert True, "Valida√ß√£o de ambiente conclu√≠da"