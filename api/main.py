"""
FastAPI Main Application
========================
API principal para o SDR SolarPrime
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
import logging
import os
from typing import Optional
import asyncio

from api.routes import webhooks, health, instance, webhook_admin, auth, kommo_webhooks, diagnostics
from services.evolution_api import evolution_client
from services.connection_monitor import connection_monitor
from middleware.rate_limiter import RateLimiter, RateLimiterMiddleware
from workflows.follow_up_workflow import follow_up_scheduler
from config.agent_config import config as agent_config

# Importar validador de startup
try:
    from api.startup_config import validate_startup_config
except ImportError:
    validate_startup_config = None

logger = logging.getLogger(__name__)

# Vari√°vel global para a task de reconfigura√ß√£o do webhook
webhook_reconfigure_task: Optional[asyncio.Task] = None


async def webhook_reconfigure_loop():
    """Loop que reconfigura o webhook periodicamente"""
    interval_minutes = int(os.getenv("WEBHOOK_RECONFIGURE_INTERVAL", "30"))
    interval_seconds = interval_minutes * 60
    
    logger.info(f"Iniciando loop de reconfigura√ß√£o de webhook a cada {interval_minutes} minutos")
    
    while True:
        try:
            await asyncio.sleep(interval_seconds)
            
            logger.info("‚è∞ Executando reconfigura√ß√£o autom√°tica do webhook...")
            
            # Importar aqui para evitar importa√ß√£o circular
            from api.routes.webhook_admin import reconfigure_webhook
            
            # Chamar a fun√ß√£o diretamente (sem depend√™ncias do FastAPI)
            webhook_base_url = os.getenv("WEBHOOK_BASE_URL")
            if not webhook_base_url:
                if os.getenv("ENVIRONMENT", "development") == "production":
                    service_name = os.getenv("SERVICE_NAME", "sdr-ia")
                    webhook_base_url = f"http://{service_name}:8000"
                else:
                    webhook_base_url = "http://localhost:8000"
            
            webhook_url = f"{webhook_base_url}/webhook/whatsapp"
            
            # Verificar se URL mudou
            current_config = await evolution_client.get_webhook_info()
            current_url = current_config.get("webhook", {}).get("url", "")
            
            if current_url != webhook_url:
                logger.warning(f"‚ö†Ô∏è Webhook URL mudou! Atual: {current_url}, Esperado: {webhook_url}")
                
                # Reconfigurar
                result = await evolution_client.create_webhook(
                    webhook_url=webhook_url,
                    events=["MESSAGES_UPSERT", "MESSAGES_UPDATE", "CONNECTION_UPDATE", "PRESENCE_UPDATE", "QRCODE_UPDATED"],
                    webhook_by_events=False,
                    webhook_base64=False
                )
                
                if result:
                    logger.success("‚úÖ Webhook reconfigurado automaticamente!")
                else:
                    logger.error("‚ùå Falha na reconfigura√ß√£o autom√°tica do webhook")
            else:
                logger.info("‚úÖ Webhook URL est√° correto, nenhuma a√ß√£o necess√°ria")
                
        except Exception as e:
            logger.error(f"Erro no loop de reconfigura√ß√£o do webhook: {e}")
            # Continuar executando mesmo com erro
            await asyncio.sleep(60)  # Aguardar 1 minuto antes de tentar novamente


# Lifespan para startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia ciclo de vida da aplica√ß√£o"""
    # Startup
    logger.info("Iniciando aplica√ß√£o SDR SolarPrime...")
    
    # Validar configura√ß√£o no startup
    if validate_startup_config:
        if not validate_startup_config():
            logger.error("‚ùå Valida√ß√£o de configura√ß√£o falhou!")
            # Em desenvolvimento, continuar mesmo com erro
            if os.getenv("ENVIRONMENT", "development") == "production":
                raise RuntimeError("Configura√ß√£o inv√°lida para produ√ß√£o")
    
    # Rate limiter j√° foi configurado antes do app iniciar
    logger.info("‚úÖ Rate limiter j√° configurado")
    
    # Inicializar Evolution API Client
    try:
        await evolution_client.initialize()
        
        # Verificar conex√£o
        connection_status = await evolution_client.check_connection()
        
        if connection_status.get("state") == "open":
            logger.info("‚úÖ Evolution API conectada e WhatsApp online")
            
            # Configurar webhook automaticamente
            webhook_url = os.getenv("WEBHOOK_BASE_URL", "http://localhost:8000")
            webhook_endpoint = f"{webhook_url}/webhook/whatsapp"
            
            try:
                # Verificar se webhook j√° est√° configurado
                webhook_info = await evolution_client.get_webhook_info()
                
                if not webhook_info or webhook_info.get("url") != webhook_endpoint:
                    # Configurar novo webhook
                    logger.info(f"Configurando webhook: {webhook_endpoint}")
                    
                    # Selecionar apenas eventos essenciais para SDR
                    essential_events = [
                        "MESSAGES_UPSERT",      # Novas mensagens
                        "MESSAGES_UPDATE",      # Status de mensagens
                        "CONNECTION_UPDATE",    # Status da conex√£o
                        "PRESENCE_UPDATE",      # Presen√ßa (online/offline)
                        "QRCODE_UPDATED"        # QR Code atualizado
                    ]
                    
                    webhook_result = await evolution_client.create_webhook(
                        webhook_url=webhook_endpoint,
                        events=essential_events,
                        webhook_by_events=False,
                        webhook_base64=False
                    )
                    
                    if webhook_result:
                        logger.info("‚úÖ Webhook configurado com sucesso")
                    else:
                        logger.warning("‚ö†Ô∏è Falha ao configurar webhook")
                else:
                    logger.info("‚úÖ Webhook j√° est√° configurado corretamente")
                    
            except Exception as webhook_error:
                logger.error(f"‚ùå Erro ao configurar webhook: {webhook_error}")
                
        elif connection_status.get("state") == "close":
            logger.warning("‚ö†Ô∏è WhatsApp desconectado - necess√°rio escanear QR Code")
            
            # Tentar obter QR Code
            qr_info = await evolution_client.get_qrcode()
            if qr_info and qr_info.get("qrcode"):
                logger.info(f"üì± QR Code dispon√≠vel: {qr_info.get('qrcode', {}).get('base64', '')[:50]}...")
                
        else:
            logger.warning(f"‚ö†Ô∏è Evolution API em estado desconhecido: {connection_status.get('state')}")
            
    except Exception as e:
        if os.getenv("ENVIRONMENT", "development") == "development":
            logger.info("‚ÑπÔ∏è Evolution API n√£o dispon√≠vel em desenvolvimento")
            logger.info("üí° A aplica√ß√£o funcionar√° sem WhatsApp")
        else:
            logger.error(f"‚ùå Erro ao verificar Evolution API: {e}")
        # N√£o falhar a aplica√ß√£o se Evolution API estiver offline
    
    # Iniciar monitor de conex√£o se configurado
    if os.getenv("CONNECTION_MONITOR_ENABLED", "true").lower() == "true":
        try:
            # Aguardar um pouco para garantir que Evolution API est√° pronta
            await asyncio.sleep(2)
            await connection_monitor.start()
            logger.info("‚úÖ Monitor de conex√£o WhatsApp iniciado")
        except Exception as monitor_error:
            logger.error(f"‚ùå Erro ao iniciar monitor de conex√£o: {monitor_error}")
            # N√£o falhar a aplica√ß√£o se o monitor falhar
    
    # Iniciar Follow-up Scheduler se configurado
    if agent_config.enable_follow_up:
        try:
            asyncio.create_task(follow_up_scheduler.start())
            logger.info("‚úÖ Follow-up scheduler iniciado")
            logger.info(f"  üìÖ Verificando follow-ups a cada 1 minuto")
            logger.info(f"  ‚è∞ Primeiro follow-up ap√≥s {agent_config.follow_up_delay_minutes} minutos")
            logger.info(f"  ‚è∞ Segundo follow-up ap√≥s {agent_config.follow_up_second_delay_hours} horas")
        except Exception as scheduler_error:
            logger.error(f"‚ùå Erro ao iniciar follow-up scheduler: {scheduler_error}")
            # N√£o falhar a aplica√ß√£o se o scheduler falhar
    
    # Iniciar reconfigura√ß√£o autom√°tica de webhook em produ√ß√£o
    global webhook_reconfigure_task
    if os.getenv("ENVIRONMENT", "development") == "production":
        if os.getenv("WEBHOOK_AUTO_RECONFIGURE", "true").lower() == "true":
            try:
                webhook_reconfigure_task = asyncio.create_task(webhook_reconfigure_loop())
                logger.info("‚úÖ Reconfigura√ß√£o autom√°tica de webhook iniciada")
                logger.info(f"  üîÑ Verificando webhook a cada {os.getenv('WEBHOOK_RECONFIGURE_INTERVAL', '30')} minutos")
            except Exception as e:
                logger.error(f"‚ùå Erro ao iniciar reconfigura√ß√£o autom√°tica de webhook: {e}")
    
    logger.info("Aplica√ß√£o iniciada com sucesso!")
    
    yield
    
    # Shutdown
    logger.info("Encerrando aplica√ß√£o...")
    
    # Parar monitor de conex√£o
    try:
        await connection_monitor.stop()
    except Exception as e:
        logger.warning(f"Erro ao parar monitor de conex√£o: {e}")
    
    # Parar follow-up scheduler
    if agent_config.enable_follow_up:
        try:
            await follow_up_scheduler.stop()
            logger.info("‚úÖ Follow-up scheduler parado")
        except Exception as e:
            logger.warning(f"Erro ao parar follow-up scheduler: {e}")
    
    # Parar reconfigura√ß√£o autom√°tica de webhook
    if webhook_reconfigure_task and not webhook_reconfigure_task.done():
        webhook_reconfigure_task.cancel()
        try:
            await webhook_reconfigure_task
        except asyncio.CancelledError:
            logger.info("‚úÖ Reconfigura√ß√£o autom√°tica de webhook parada")
    
    # Fechar cliente Evolution API
    try:
        await evolution_client.close()
    except Exception as e:
        logger.warning(f"Erro ao fechar cliente Evolution API: {e}")
    
    logger.info("Aplica√ß√£o encerrada")

# Criar aplica√ß√£o
app = FastAPI(
    title="SDR IA SolarPrime API",
    description="API do Agente de Vendas Inteligente para Energia Solar",
    version="1.0.0",
    docs_url="/docs" if os.getenv("ENVIRONMENT", "development") == "development" else None,
    redoc_url="/redoc" if os.getenv("ENVIRONMENT", "development") == "development" else None,
    lifespan=lifespan
)

# Inicializar rate limiter antes de adicionar middlewares
rate_limiter = RateLimiter()

# Configurar CORS
allowed_origins = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware de seguran√ßa
allowed_hosts = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=allowed_hosts
)

# Adicionar rate limiter middleware
app.add_middleware(RateLimiterMiddleware, rate_limiter=rate_limiter)

# Iniciar task de limpeza do rate limiter no startup
@app.on_event("startup")
async def startup_rate_limiter():
    await rate_limiter.start_cleanup_task()
    logger.info("‚úÖ Rate limiter cleanup task iniciada")

# Incluir rotas
app.include_router(webhooks.router, tags=["webhooks"])
app.include_router(health.router, prefix="/health", tags=["health"])
app.include_router(instance.router, prefix="/instance", tags=["instance"])
app.include_router(webhook_admin.router, tags=["webhook-admin"])
app.include_router(auth.router, tags=["authentication"])
app.include_router(kommo_webhooks.router, tags=["kommo-webhooks"])
app.include_router(diagnostics.router, tags=["diagnostics"])

# Tratamento global de erros
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Erro n√£o tratado: {exc}", exc_info=True)
    return {
        "error": "Internal Server Error",
        "message": "Ocorreu um erro inesperado",
        "request_id": getattr(request.state, 'request_id', None)
    }

# Root endpoint
@app.get("/")
async def root():
    return {
        "app": "SDR IA SolarPrime",
        "version": "1.0.0",
        "status": "operational",
        "agent": "Luna - Agente de IA SolarPrime"
    }