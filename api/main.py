"""
FastAPI Main Application
========================
API principal para o SDR SolarPrime
"""

# Importar m√≥dulo de compatibilidade antes de qualquer outra coisa
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
try:
    import google_genai_compat
except ImportError:
    pass

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
import logging
import os
from typing import Optional
import asyncio

from api.routes import webhooks, health, instance, webhook_admin
from services.evolution_api import evolution_client
from services.connection_monitor import connection_monitor
from middleware.rate_limiter import RateLimiter, RateLimiterMiddleware

logger = logging.getLogger(__name__)

# Lifespan para startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia ciclo de vida da aplica√ß√£o"""
    # Startup
    logger.info("Iniciando aplica√ß√£o SDR SolarPrime...")
    
    # Rate limiter j√° foi configurado antes do app iniciar
    logger.info("‚úÖ Rate limiter j√° configurado")
    
    # Inicializar Evolution API Client
    try:
        await evolution_client.initialize()
        
        # Verificar conex√£o
        connection_status = await evolution_client.check_connection()
        
        if connection_status.get("state") == "open":
            logger.info("‚úÖ Evolution API conectada e WhatsApp online")
            
            # Configurar webhook automaticamente
            webhook_url = os.getenv("WEBHOOK_BASE_URL", "http://localhost:8000")
            webhook_endpoint = f"{webhook_url}/webhook/whatsapp"
            
            try:
                # Verificar se webhook j√° est√° configurado
                webhook_info = await evolution_client.get_webhook_info()
                
                if not webhook_info or webhook_info.get("url") != webhook_endpoint:
                    # Configurar novo webhook
                    logger.info(f"Configurando webhook: {webhook_endpoint}")
                    
                    # Selecionar apenas eventos essenciais para SDR
                    essential_events = [
                        "MESSAGES_UPSERT",      # Novas mensagens
                        "MESSAGES_UPDATE",      # Status de mensagens
                        "CONNECTION_UPDATE",    # Status da conex√£o
                        "PRESENCE_UPDATE",      # Presen√ßa (online/offline)
                        "QRCODE_UPDATED"        # QR Code atualizado
                    ]
                    
                    webhook_result = await evolution_client.create_webhook(
                        webhook_url=webhook_endpoint,
                        events=essential_events,
                        webhook_by_events=False,
                        webhook_base64=False
                    )
                    
                    if webhook_result:
                        logger.info("‚úÖ Webhook configurado com sucesso")
                    else:
                        logger.warning("‚ö†Ô∏è Falha ao configurar webhook")
                else:
                    logger.info("‚úÖ Webhook j√° est√° configurado corretamente")
                    
            except Exception as webhook_error:
                logger.error(f"‚ùå Erro ao configurar webhook: {webhook_error}")
                
        elif connection_status.get("state") == "close":
            logger.warning("‚ö†Ô∏è WhatsApp desconectado - necess√°rio escanear QR Code")
            
            # Tentar obter QR Code
            qr_info = await evolution_client.get_qrcode()
            if qr_info and qr_info.get("qrcode"):
                logger.info(f"üì± QR Code dispon√≠vel: {qr_info.get('qrcode', {}).get('base64', '')[:50]}...")
                
        else:
            logger.warning(f"‚ö†Ô∏è Evolution API em estado desconhecido: {connection_status.get('state')}")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar Evolution API: {e}")
        # N√£o falhar a aplica√ß√£o se Evolution API estiver offline
    
    # Iniciar monitor de conex√£o se configurado
    if os.getenv("CONNECTION_MONITOR_ENABLED", "true").lower() == "true":
        try:
            # Aguardar um pouco para garantir que Evolution API est√° pronta
            await asyncio.sleep(2)
            await connection_monitor.start()
            logger.info("‚úÖ Monitor de conex√£o WhatsApp iniciado")
        except Exception as monitor_error:
            logger.error(f"‚ùå Erro ao iniciar monitor de conex√£o: {monitor_error}")
            # N√£o falhar a aplica√ß√£o se o monitor falhar
    
    logger.info("Aplica√ß√£o iniciada com sucesso!")
    
    yield
    
    # Shutdown
    logger.info("Encerrando aplica√ß√£o...")
    
    # Parar monitor de conex√£o
    try:
        await connection_monitor.stop()
    except:
        pass
    
    # Fechar cliente Evolution API
    try:
        await evolution_client.close()
    except:
        pass
    
    logger.info("Aplica√ß√£o encerrada")

# Criar aplica√ß√£o
app = FastAPI(
    title="SDR IA SolarPrime API",
    description="API do Agente de Vendas Inteligente para Energia Solar",
    version="1.0.0",
    docs_url="/docs" if os.getenv("ENVIRONMENT", "development") == "development" else None,
    redoc_url="/redoc" if os.getenv("ENVIRONMENT", "development") == "development" else None,
    lifespan=lifespan
)

# Inicializar rate limiter antes de adicionar middlewares
rate_limiter = RateLimiter()

# Configurar CORS
allowed_origins = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware de seguran√ßa
allowed_hosts = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=allowed_hosts
)

# Adicionar rate limiter middleware
app.add_middleware(RateLimiterMiddleware, rate_limiter=rate_limiter)

# Iniciar task de limpeza do rate limiter no startup
@app.on_event("startup")
async def startup_rate_limiter():
    await rate_limiter.start_cleanup_task()
    logger.info("‚úÖ Rate limiter cleanup task iniciada")

# Incluir rotas
app.include_router(webhooks.router, tags=["webhooks"])
app.include_router(health.router, prefix="/health", tags=["health"])
app.include_router(instance.router, prefix="/instance", tags=["instance"])
app.include_router(webhook_admin.router, tags=["webhook-admin"])

# Tratamento global de erros
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Erro n√£o tratado: {exc}", exc_info=True)
    return {
        "error": "Internal Server Error",
        "message": "Ocorreu um erro inesperado",
        "request_id": getattr(request.state, 'request_id', None)
    }

# Root endpoint
@app.get("/")
async def root():
    return {
        "app": "SDR IA SolarPrime",
        "version": "1.0.0",
        "status": "operational",
        "agent": "Luna - Agente de IA SolarPrime"
    }