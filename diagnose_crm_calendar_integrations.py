#!/usr/bin/env python3
"""
DIAGN√ìSTICO CR√çTICO - Integra√ß√£o KommoCRM e Google Calendar
Verifica conectividade, configura√ß√µes e funcionamento das tools
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path

# Adicionar projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

# CR√çTICO: Carregar .env explicitamente
from dotenv import load_dotenv
env_file = Path(__file__).parent / '.env'
if env_file.exists():
    load_dotenv(env_file)
    print(f"‚úÖ Arquivo .env carregado: {env_file}")
else:
    print(f"‚ùå Arquivo .env n√£o encontrado: {env_file}")

# Configurar environment
os.environ.setdefault('ENVIRONMENT', 'production')

from agente.services.kommo_service import get_kommo_service, KommoAPIError
from agente.services.calendar_service import get_calendar_service
from agente.core.config import (
    KOMMO_BASE_URL,
    KOMMO_LONG_LIVED_TOKEN,
    KOMMO_SUBDOMAIN,
    GOOGLE_SERVICE_ACCOUNT_EMAIL,
    GOOGLE_PRIVATE_KEY,
    GOOGLE_CALENDAR_ID,
    DISABLE_GOOGLE_CALENDAR
)


class IntegrationDiagnostic:
    """Diagn√≥stico completo das integra√ß√µes CRM e Calendar"""
    
    def __init__(self):
        self.results = {
            'kommo': {'connected': False, 'errors': [], 'details': {}},
            'calendar': {'connected': False, 'errors': [], 'details': {}},
            'tools': {'kommo_tools_ok': False, 'calendar_tools_ok': False}
        }
    
    async def diagnose_kommo_integration(self):
        """Diagn√≥stica integra√ß√£o KommoCRM"""
        print("\nüîç DIAGN√ìSTICO KOMMO CRM")
        print("=" * 50)
        
        try:
            # Verificar configura√ß√µes
            print("üìã Verificando configura√ß√µes...")
            if not KOMMO_BASE_URL:
                self.results['kommo']['errors'].append("KOMMO_BASE_URL n√£o configurada")
            if not KOMMO_LONG_LIVED_TOKEN:
                self.results['kommo']['errors'].append("KOMMO_LONG_LIVED_TOKEN n√£o configurada")
            if not KOMMO_SUBDOMAIN:
                self.results['kommo']['errors'].append("KOMMO_SUBDOMAIN n√£o configurada")
            
            print(f"   - Base URL: {'‚úÖ' if KOMMO_BASE_URL else '‚ùå'} {KOMMO_BASE_URL}")
            print(f"   - Token: {'‚úÖ' if KOMMO_LONG_LIVED_TOKEN else '‚ùå'} {'*' * 20 if KOMMO_LONG_LIVED_TOKEN else 'MISSING'}")
            print(f"   - Subdomain: {'‚úÖ' if KOMMO_SUBDOMAIN else '‚ùå'} {KOMMO_SUBDOMAIN}")
            
            if self.results['kommo']['errors']:
                print(f"‚ùå Configura√ß√µes incompletas: {len(self.results['kommo']['errors'])} erros")
                return
            
            # Testar conectividade
            print("\nüåê Testando conectividade...")
            kommo_service = get_kommo_service()
            
            # Teste 1: Account info
            try:
                account_info = await kommo_service.get_account_info()
                if account_info:
                    self.results['kommo']['details']['account'] = account_info
                    print(f"‚úÖ Conta conectada: {account_info.get('name', 'Unknown')}")
                else:
                    self.results['kommo']['errors'].append("Falha ao obter informa√ß√µes da conta")
                    print("‚ùå Falha ao conectar com conta")
            except Exception as e:
                self.results['kommo']['errors'].append(f"Erro ao conectar: {str(e)}")
                print(f"‚ùå Erro de conectividade: {e}")
                return
            
            # Teste 2: Pipelines
            try:
                pipelines = await kommo_service.get_pipelines()
                if pipelines:
                    self.results['kommo']['details']['pipelines'] = len(pipelines)
                    print(f"‚úÖ Pipelines encontrados: {len(pipelines)}")
                    for pipeline in pipelines[:3]:  # Mostrar primeiros 3
                        print(f"   - {pipeline.get('name', 'Unknown')}")
            except Exception as e:
                self.results['kommo']['errors'].append(f"Erro ao buscar pipelines: {str(e)}")
                print(f"‚ùå Erro pipelines: {e}")
            
            # Teste 3: Custom Fields
            try:
                fields = await kommo_service.get_custom_fields('leads')
                if fields:
                    self.results['kommo']['details']['custom_fields'] = len(fields)
                    print(f"‚úÖ Campos customizados: {len(fields)}")
            except Exception as e:
                self.results['kommo']['errors'].append(f"Erro ao buscar campos: {str(e)}")
                print(f"‚ùå Erro campos customizados: {e}")
            
            # Teste 4: Criar lead de teste
            try:
                test_lead_data = {
                    'name': f'Teste Diagn√≥stico {datetime.now().strftime("%H:%M:%S")}',
                    'custom_fields_values': [
                        {'field_id': 'PHONE', 'values': [{'value': '11999999999'}]}
                    ]
                }
                
                created_lead = await kommo_service.create_lead(test_lead_data)
                if created_lead and 'id' in created_lead:
                    lead_id = created_lead['id']
                    print(f"‚úÖ Lead teste criado: ID {lead_id}")
                    
                    # Limpar lead teste
                    try:
                        await kommo_service.delete_lead(lead_id)
                        print(f"‚úÖ Lead teste removido: ID {lead_id}")
                    except:
                        print(f"‚ö†Ô∏è  Lead teste n√£o removido: ID {lead_id}")
                    
                    self.results['kommo']['connected'] = True
                    self.results['kommo']['details']['test_lead'] = 'success'
                else:
                    self.results['kommo']['errors'].append("Falha ao criar lead de teste")
                    print("‚ùå Falha ao criar lead teste")
                    
            except Exception as e:
                self.results['kommo']['errors'].append(f"Erro ao criar lead teste: {str(e)}")
                print(f"‚ùå Erro lead teste: {e}")
            
        except Exception as e:
            self.results['kommo']['errors'].append(f"Erro geral Kommo: {str(e)}")
            print(f"‚ùå ERRO GERAL KOMMO: {e}")
    
    async def diagnose_calendar_integration(self):
        """Diagn√≥stica integra√ß√£o Google Calendar"""
        print("\nüìÖ DIAGN√ìSTICO GOOGLE CALENDAR")
        print("=" * 50)
        
        try:
            # Verificar se est√° desabilitado
            if DISABLE_GOOGLE_CALENDAR:
                print("‚ö†Ô∏è  Google Calendar DESABILITADO via configura√ß√£o")
                self.results['calendar']['errors'].append("Google Calendar desabilitado")
                return
            
            # Verificar configura√ß√µes
            print("üìã Verificando configura√ß√µes...")
            if not GOOGLE_SERVICE_ACCOUNT_EMAIL:
                self.results['calendar']['errors'].append("GOOGLE_SERVICE_ACCOUNT_EMAIL n√£o configurada")
            if not GOOGLE_PRIVATE_KEY:
                self.results['calendar']['errors'].append("GOOGLE_PRIVATE_KEY n√£o configurada")
            if not GOOGLE_CALENDAR_ID:
                self.results['calendar']['errors'].append("GOOGLE_CALENDAR_ID n√£o configurada")
            
            print(f"   - Service Account: {'‚úÖ' if GOOGLE_SERVICE_ACCOUNT_EMAIL else '‚ùå'} {GOOGLE_SERVICE_ACCOUNT_EMAIL}")
            print(f"   - Private Key: {'‚úÖ' if GOOGLE_PRIVATE_KEY else '‚ùå'} {'*' * 20 if GOOGLE_PRIVATE_KEY else 'MISSING'}")
            print(f"   - Calendar ID: {'‚úÖ' if GOOGLE_CALENDAR_ID else '‚ùå'} {GOOGLE_CALENDAR_ID}")
            
            if self.results['calendar']['errors']:
                print(f"‚ùå Configura√ß√µes incompletas: {len(self.results['calendar']['errors'])} erros")
                return
            
            # Testar conectividade
            print("\nüåê Testando conectividade...")
            calendar_service = get_calendar_service()
            
            # Teste 1: Calendar info
            try:
                calendar_info = await calendar_service.get_calendar_info()
                if calendar_info:
                    self.results['calendar']['details']['calendar'] = calendar_info
                    print(f"‚úÖ Calend√°rio conectado: {calendar_info.get('summary', 'Unknown')}")
                else:
                    self.results['calendar']['errors'].append("Falha ao obter informa√ß√µes do calend√°rio")
                    print("‚ùå Falha ao conectar com calend√°rio")
            except Exception as e:
                self.results['calendar']['errors'].append(f"Erro ao conectar: {str(e)}")
                print(f"‚ùå Erro de conectividade: {e}")
                return
            
            # Teste 2: Listar eventos pr√≥ximos
            try:
                now = datetime.now()
                events = await calendar_service.list_events(
                    start_time=now,
                    end_time=now + timedelta(days=7),
                    max_results=5
                )
                if events is not None:
                    self.results['calendar']['details']['events_count'] = len(events)
                    print(f"‚úÖ Eventos pr√≥ximos: {len(events)}")
                else:
                    print("‚ö†Ô∏è  N√£o foi poss√≠vel listar eventos")
            except Exception as e:
                self.results['calendar']['errors'].append(f"Erro ao listar eventos: {str(e)}")
                print(f"‚ùå Erro eventos: {e}")
            
            # Teste 3: Criar evento de teste
            try:
                test_event = {
                    'summary': f'Teste Diagn√≥stico {datetime.now().strftime("%H:%M:%S")}',
                    'start': {'dateTime': (datetime.now() + timedelta(hours=1)).isoformat()},
                    'end': {'dateTime': (datetime.now() + timedelta(hours=2)).isoformat()},
                    'description': 'Evento de teste criado pelo diagn√≥stico'
                }
                
                created_event = await calendar_service.create_event(test_event)
                if created_event and 'id' in created_event:
                    event_id = created_event['id']
                    print(f"‚úÖ Evento teste criado: ID {event_id}")
                    
                    # Limpar evento teste
                    try:
                        await calendar_service.delete_event(event_id)
                        print(f"‚úÖ Evento teste removido: ID {event_id}")
                    except:
                        print(f"‚ö†Ô∏è  Evento teste n√£o removido: ID {event_id}")
                    
                    self.results['calendar']['connected'] = True
                    self.results['calendar']['details']['test_event'] = 'success'
                else:
                    self.results['calendar']['errors'].append("Falha ao criar evento de teste")
                    print("‚ùå Falha ao criar evento teste")
                    
            except Exception as e:
                self.results['calendar']['errors'].append(f"Erro ao criar evento teste: {str(e)}")
                print(f"‚ùå Erro evento teste: {e}")
            
        except Exception as e:
            self.results['calendar']['errors'].append(f"Erro geral Calendar: {str(e)}")
            print(f"‚ùå ERRO GERAL CALENDAR: {e}")
    
    def diagnose_tools_registration(self):
        """Diagn√≥stica se as tools est√£o registradas corretamente"""
        print("\nüîß DIAGN√ìSTICO TOOLS REGISTRATION")
        print("=" * 50)
        
        try:
            # Importar agent e verificar tools
            from agente.core.agent import SDRAgent
            
            # Verificar se podemos criar o agente (sem inicializar completamente)
            print("üìã Verificando registro das tools no AGnO Agent...")
            
            # Verificar imports das tools
            kommo_tools_imported = False
            calendar_tools_imported = False
            
            try:
                from agente.tools.kommo import (
                    search_kommo_lead,
                    create_kommo_lead,
                    update_kommo_lead,
                    update_kommo_stage,
                    add_kommo_note,
                    schedule_kommo_activity
                )
                kommo_tools_imported = True
                print("‚úÖ Tools Kommo importadas com sucesso")
            except Exception as e:
                print(f"‚ùå Erro importando tools Kommo: {e}")
            
            try:
                from agente.tools.calendar import (
                    check_availability,
                    create_meeting,
                    update_meeting,
                    cancel_meeting,
                    send_calendar_invite
                )
                calendar_tools_imported = True
                print("‚úÖ Tools Calendar importadas com sucesso")
            except Exception as e:
                print(f"‚ùå Erro importando tools Calendar: {e}")
            
            self.results['tools']['kommo_tools_ok'] = kommo_tools_imported
            self.results['tools']['calendar_tools_ok'] = calendar_tools_imported
            
            # Verificar se agent pode ser inicializado
            try:
                # S√≥ verifica se pode importar, n√£o inicializa (evita API calls)
                agent_class = SDRAgent
                print("‚úÖ Classe SDRAgent pode ser importada")
            except Exception as e:
                print(f"‚ùå Erro ao importar SDRAgent: {e}")
            
        except Exception as e:
            print(f"‚ùå ERRO GERAL TOOLS: {e}")
    
    def print_summary(self):
        """Imprime resumo do diagn√≥stico"""
        print("\n" + "=" * 60)
        print("üìä RESUMO DO DIAGN√ìSTICO")
        print("=" * 60)
        
        # Status Kommo
        kommo_status = "‚úÖ CONECTADO" if self.results['kommo']['connected'] else "‚ùå FALHA"
        kommo_errors = len(self.results['kommo']['errors'])
        print(f"üîç KOMMO CRM: {kommo_status}")
        if kommo_errors > 0:
            print(f"   ‚îî‚îÄ Erros: {kommo_errors}")
            for error in self.results['kommo']['errors'][:3]:  # Primeiros 3
                print(f"      ‚Ä¢ {error}")
        
        # Status Calendar  
        calendar_status = "‚úÖ CONECTADO" if self.results['calendar']['connected'] else "‚ùå FALHA"
        calendar_errors = len(self.results['calendar']['errors'])
        print(f"üìÖ GOOGLE CALENDAR: {calendar_status}")
        if calendar_errors > 0:
            print(f"   ‚îî‚îÄ Erros: {calendar_errors}")
            for error in self.results['calendar']['errors'][:3]:  # Primeiros 3
                print(f"      ‚Ä¢ {error}")
        
        # Status Tools
        kommo_tools = "‚úÖ OK" if self.results['tools']['kommo_tools_ok'] else "‚ùå FALHA"
        calendar_tools = "‚úÖ OK" if self.results['tools']['calendar_tools_ok'] else "‚ùå FALHA"
        print(f"üîß TOOLS KOMMO: {kommo_tools}")
        print(f"üîß TOOLS CALENDAR: {calendar_tools}")
        
        # Status Geral
        all_ok = (
            self.results['kommo']['connected'] and 
            self.results['calendar']['connected'] and
            self.results['tools']['kommo_tools_ok'] and
            self.results['tools']['calendar_tools_ok']
        )
        
        print(f"\nüéØ STATUS GERAL: {'‚úÖ TODAS INTEGRA√á√ïES OK' if all_ok else '‚ùå PROBLEMAS DETECTADOS'}")
        
        if not all_ok:
            print("\nüìã PR√ìXIMOS PASSOS:")
            if not self.results['kommo']['connected']:
                print("   1. Verificar configura√ß√µes KOMMO_* no .env")
                print("   2. Validar token Kommo (pode ter expirado)")
            if not self.results['calendar']['connected']:
                print("   3. Verificar configura√ß√µes GOOGLE_* no .env")
                print("   4. Validar Service Account permissions")
            if not (self.results['tools']['kommo_tools_ok'] and self.results['tools']['calendar_tools_ok']):
                print("   5. Verificar imports das tools")
                print("   6. Verificar AGnO Framework installation")
        
        return all_ok


async def main():
    """Executa diagn√≥stico completo"""
    print("üöÄ DIAGN√ìSTICO INTEGRA√á√ÉO CRM + CALENDAR")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    diagnostic = IntegrationDiagnostic()
    
    # Executar diagn√≥sticos
    await diagnostic.diagnose_kommo_integration()
    await diagnostic.diagnose_calendar_integration()
    diagnostic.diagnose_tools_registration()
    
    # Resumo final
    all_ok = diagnostic.print_summary()
    
    print(f"\n‚è∞ Conclu√≠do em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return 0 if all_ok else 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ùå Diagn√≥stico interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERRO FATAL: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)