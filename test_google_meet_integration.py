#!/usr/bin/env python3
"""
TESTE GOOGLE MEET INTEGRATION - SDR IA SolarPrime
Testa especificamente a integra√ß√£o do Google Meet no Calendar Service

Este teste verifica:
1. Cria√ß√£o de eventos com Google Meet
2. Extra√ß√£o correta do link do Meet
3. Fallback para eventos sem Meet
4. Atualiza√ß√£o de eventos mantendo Meet
"""

import sys
import os
import asyncio
from pathlib import Path
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Setup do ambiente
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

# Carrega .env
env_path = root_dir / '.env'
load_dotenv(env_path)

print("üéØ TESTE GOOGLE MEET INTEGRATION - SDR IA SOLARPRIME")
print("=" * 70)

# Importa servi√ßos
from agente.services.calendar_service import GoogleCalendarService


class GoogleMeetIntegrationTest:
    """Teste espec√≠fico para integra√ß√£o Google Meet"""
    
    def __init__(self):
        """Inicializa o teste"""
        self.test_prefix = "[GOOGLE-MEET-TEST]"
        self.calendar = GoogleCalendarService()
        self.created_events = []
        
        print(f"üìã CONFIGURA√á√ÉO DO TESTE:")
        print(f"   üéØ Foco: Google Meet Integration")
        print(f"   üìß Service: {self.calendar.service is not None}")
        print(f"   üìÖ Calendar ID: {self.calendar.calendar_id}")
    
    async def test_1_create_event_with_meet(self) -> bool:
        """TESTE 1: Criar evento com Google Meet"""
        print("\nüéØ TESTE 1: CRIAR EVENTO COM GOOGLE MEET")
        print("-" * 50)
        
        try:
            # Data para teste (pr√≥xima hora)
            meeting_date = datetime.now() + timedelta(hours=1)
            meeting_date = meeting_date.replace(minute=0, second=0, microsecond=0)
            
            print(f"   üìÖ Data: {meeting_date.strftime('%d/%m/%Y %H:%M')}")
            print(f"   üéØ Objetivo: Criar evento com Google Meet habilitado")
            
            # Criar evento com Google Meet (SEM convidados para evitar Domain-Wide Delegation)
            event = await self.calendar.create_meeting(
                title=f"{self.test_prefix} Reuni√£o com Google Meet",
                description="Teste de integra√ß√£o Google Meet - SDR IA SolarPrime",
                start_time=meeting_date,
                duration_minutes=30,
                attendees=None,  # Sem convidados para evitar erro de Domain-Wide Delegation
                create_meet_link=True  # Explicitamente solicitar Google Meet
            )
            
            if event:
                self.created_events.append(event.id)
                print(f"   ‚úÖ Evento criado: {event.id}")
                print(f"   üìß T√≠tulo: {event.title}")
                print(f"   üìç Localiza√ß√£o: {event.location}")
                print(f"   üîó Google Meet Link: {event.meet_link or 'N√ÉO CRIADO'}")
                
                if event.meet_link:
                    print(f"   üéâ SUCESSO: Google Meet link gerado!")
                    return True
                else:
                    print(f"   ‚ö†Ô∏è PARCIAL: Evento criado mas sem Google Meet link")
                    return True  # Ainda √© considerado sucesso parcial
            else:
                print(f"   ‚ùå FALHA: Evento n√£o foi criado")
                return False
                
        except Exception as e:
            print(f"   ‚ùå ERRO: {str(e)}")
            return False
    
    async def test_2_create_event_without_meet(self) -> bool:
        """TESTE 2: Criar evento SEM Google Meet (fallback)"""
        print("\nüéØ TESTE 2: CRIAR EVENTO SEM GOOGLE MEET")
        print("-" * 50)
        
        try:
            meeting_date = datetime.now() + timedelta(hours=2)
            meeting_date = meeting_date.replace(minute=0, second=0, microsecond=0)
            
            print(f"   üìÖ Data: {meeting_date.strftime('%d/%m/%Y %H:%M')}")
            print(f"   üéØ Objetivo: Criar evento sem Google Meet")
            
            # Criar evento SEM Google Meet
            event = await self.calendar.create_meeting(
                title=f"{self.test_prefix} Reuni√£o sem Google Meet",
                description="Teste sem Google Meet - SDR IA SolarPrime", 
                start_time=meeting_date,
                duration_minutes=30,
                create_meet_link=False  # Explicitamente N√ÉO solicitar Google Meet
            )
            
            if event:
                self.created_events.append(event.id)
                print(f"   ‚úÖ Evento criado: {event.id}")
                print(f"   üìß T√≠tulo: {event.title}")
                print(f"   üìç Localiza√ß√£o: {event.location}")
                print(f"   üîó Google Meet Link: {event.meet_link or 'N√ÉO CRIADO'}")
                
                if not event.meet_link:
                    print(f"   ‚úÖ SUCESSO: Evento criado sem Google Meet conforme esperado")
                    return True
                else:
                    print(f"   ‚ö†Ô∏è INESPERADO: Google Meet link foi criado mesmo com create_meet_link=False")
                    return True  # Ainda funciona
            else:
                print(f"   ‚ùå FALHA: Evento n√£o foi criado")
                return False
                
        except Exception as e:
            print(f"   ‚ùå ERRO: {str(e)}")
            return False
    
    async def test_3_list_created_events(self) -> bool:
        """TESTE 3: Listar eventos criados e verificar Google Meet"""
        print("\nüéØ TESTE 3: LISTAR E VERIFICAR EVENTOS CRIADOS")
        print("-" * 50)
        
        try:
            # Buscar eventos das pr√≥ximas 4 horas
            time_min = datetime.now()
            time_max = datetime.now() + timedelta(hours=4)
            
            print(f"   üîç Buscando eventos entre {time_min.strftime('%H:%M')} e {time_max.strftime('%H:%M')}")
            
            events = await self.calendar.get_calendar_events(time_min, time_max)
            test_events = [e for e in events if self.test_prefix in e.title]
            
            print(f"   üìã Eventos encontrados: {len(events)} total, {len(test_events)} de teste")
            
            meet_count = 0
            for event in test_events:
                print(f"   üìÖ {event.title}")
                print(f"      üÜî ID: {event.id}")
                print(f"      üìç Local: {event.location}")
                print(f"      üîó Meet: {event.meet_link or 'N√ÉO DISPON√çVEL'}")
                if event.meet_link:
                    meet_count += 1
                print()
            
            print(f"   üìä Eventos com Google Meet: {meet_count}/{len(test_events)}")
            return len(test_events) >= 2  # Pelo menos os 2 eventos de teste
            
        except Exception as e:
            print(f"   ‚ùå ERRO: {str(e)}")
            return False
    
    async def test_4_update_event_preserve_meet(self) -> bool:
        """TESTE 4: Atualizar evento preservando Google Meet"""
        print("\nüéØ TESTE 4: ATUALIZAR EVENTO PRESERVANDO GOOGLE MEET")
        print("-" * 50)
        
        try:
            if not self.created_events:
                print(f"   ‚ö†Ô∏è Nenhum evento criado para testar")
                return False
            
            event_id = self.created_events[0]
            print(f"   üéØ Atualizando evento: {event_id}")
            
            # Atualizar t√≠tulo do evento
            updated_event = await self.calendar.update_event(
                event_id, 
                {
                    'title': f"{self.test_prefix} Reuni√£o ATUALIZADA com Google Meet",
                    'description': "Evento atualizado - teste Google Meet"
                }
            )
            
            if updated_event:
                print(f"   ‚úÖ Evento atualizado: {updated_event.id}")
                print(f"   üìß Novo t√≠tulo: {updated_event.title}")
                print(f"   üìç Localiza√ß√£o: {updated_event.location}")
                print(f"   üîó Google Meet Link: {updated_event.meet_link or 'N√ÉO DISPON√çVEL'}")
                
                if updated_event.meet_link:
                    print(f"   ‚úÖ SUCESSO: Google Meet link preservado ap√≥s atualiza√ß√£o")
                    return True
                else:
                    print(f"   ‚ö†Ô∏è Google Meet link n√£o encontrado ap√≥s atualiza√ß√£o")
                    return True  # Ainda √© um sucesso parcial
            else:
                print(f"   ‚ùå FALHA: Evento n√£o foi atualizado")
                return False
                
        except Exception as e:
            print(f"   ‚ùå ERRO: {str(e)}")
            return False
    
    async def cleanup_test_events(self):
        """Limpar eventos de teste criados"""
        print("\nüßπ LIMPEZA DOS EVENTOS DE TESTE")
        print("-" * 50)
        
        cleaned = 0
        for event_id in self.created_events:
            try:
                success = await self.calendar.cancel_event(event_id, send_notifications=False)
                if success:
                    cleaned += 1
                    print(f"   üóëÔ∏è Evento removido: {event_id}")
                else:
                    print(f"   ‚ö†Ô∏è Falha ao remover: {event_id}")
            except Exception as e:
                print(f"   ‚ùå Erro ao remover {event_id}: {str(e)}")
        
        print(f"   üìä Eventos limpos: {cleaned}/{len(self.created_events)}")
    
    async def run_google_meet_tests(self) -> bool:
        """Executa todos os testes do Google Meet"""
        print(f"üéØ INICIANDO TESTES GOOGLE MEET INTEGRATION")
        print(f"‚è∞ Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if not self.calendar.service:
            print(f"‚ùå Google Calendar service n√£o inicializado")
            return False
        
        tests_results = []
        
        try:
            # Executar todos os testes
            tests = [
                ("Criar evento com Google Meet", self.test_1_create_event_with_meet),
                ("Criar evento sem Google Meet", self.test_2_create_event_without_meet),
                ("Listar e verificar eventos", self.test_3_list_created_events),
                ("Atualizar evento preservando Meet", self.test_4_update_event_preserve_meet)
            ]
            
            for test_name, test_function in tests:
                print(f"\n‚è≥ Executando: {test_name}...")
                result = await test_function()
                tests_results.append({
                    'name': test_name,
                    'success': result
                })
                
                status = "‚úÖ SUCESSO" if result else "‚ùå FALHA"
                print(f"   {status}")
                
                # Pequeno delay entre testes
                await asyncio.sleep(2)
        
        finally:
            # Sempre fazer cleanup
            await self.cleanup_test_events()
        
        # Gerar relat√≥rio final
        return self._generate_final_report(tests_results)
    
    def _generate_final_report(self, tests_results: list) -> bool:
        """Gera relat√≥rio final dos testes Google Meet"""
        print("\n" + "=" * 70)
        print("üéØ RELAT√ìRIO FINAL - Google Meet Integration Tests")
        print("=" * 70)
        
        successful_tests = sum(1 for test in tests_results if test['success'])
        total_tests = len(tests_results)
        success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        
        print(f"üìä RESUMO EXECUTIVO:")
        print(f"   ‚úÖ Testes bem-sucedidos: {successful_tests}/{total_tests}")
        print(f"   üìà Taxa de sucesso: {success_rate:.1f}%")
        print(f"   üéØ Funcionalidade: Google Meet Integration")
        
        print(f"\nüìã DETALHAMENTO POR TESTE:")
        for i, test in enumerate(tests_results, 1):
            status = "‚úÖ PASSOU" if test['success'] else "‚ùå FALHOU"
            print(f"   {i}. {test['name']}: {status}")
        
        # Avalia√ß√£o final
        if success_rate >= 75:  # 3 de 4 testes = 75%
            print(f"\nüéâ GOOGLE MEET INTEGRATION: APROVADO!")
            print(f"   ‚úÖ Google Meet est√° funcionando adequadamente")
            print(f"   ‚úÖ Fallback para eventos sem Meet operacional")
            print(f"   ‚úÖ Sistema pronto para produ√ß√£o")
            result = True
        else:
            print(f"\n‚ùå GOOGLE MEET INTEGRATION: REPROVADO!")
            print(f"   ‚ö†Ô∏è Google Meet apresenta problemas cr√≠ticos")
            print(f"   ‚ö†Ô∏è Necess√°ria revis√£o antes da produ√ß√£o")
            result = False
        
        print("=" * 70)
        return result


async def main():
    """Fun√ß√£o principal do teste"""
    print("Inicializando teste Google Meet Integration...")
    
    test = GoogleMeetIntegrationTest()
    success = await test.run_google_meet_tests()
    
    if success:
        print(f"\nüéØ RESULTADO FINAL: GOOGLE MEET INTEGRATION APROVADO!")
        print(f"   Google Meet est√° funcionando corretamente no SDR IA SolarPrime!")
    else:
        print(f"\n‚ùå RESULTADO FINAL: GOOGLE MEET INTEGRATION REPROVADO!")
        print(f"   Google Meet apresenta problemas que precisam ser corrigidos!")
    
    return success


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)