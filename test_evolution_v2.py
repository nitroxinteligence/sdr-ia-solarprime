#!/usr/bin/env python3
"""
Test script para validar o novo Evolution API Service v2
Testa todas as funcionalidades principais do servi√ßo refatorado
"""

import asyncio
import sys
from datetime import datetime
from loguru import logger

# Adiciona o diret√≥rio pai ao path para importar o m√≥dulo
sys.path.insert(0, '.')

from agente.services import get_evolution_service
from agente.services.evolution import EvolutionService


# Configurar logger para o teste
logger.remove()
logger.add(sys.stdout, level="INFO", format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{message}</cyan>")


async def test_connection(service: EvolutionService) -> bool:
    """Testa conex√£o com a inst√¢ncia"""
    logger.info("üîç Testando conex√£o com inst√¢ncia WhatsApp...")
    
    try:
        # Verifica status
        status = await service.get_instance_status()
        
        if status:
            state = status.get("state", "unknown")
            logger.info(f"üìä Status da inst√¢ncia: {state}")
            
            if state == "open":
                logger.success("‚úÖ Inst√¢ncia conectada e pronta!")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è  Inst√¢ncia n√£o est√° conectada: {state}")
                
                # Tenta conectar
                logger.info("üîÑ Tentando conectar inst√¢ncia...")
                connected = await service.connect_instance()
                
                if connected:
                    logger.success("‚úÖ Inst√¢ncia conectada com sucesso!")
                    return True
                else:
                    logger.error("‚ùå Falha ao conectar inst√¢ncia")
                    return False
        else:
            logger.error("‚ùå N√£o foi poss√≠vel obter status da inst√¢ncia")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar conex√£o: {e}")
        return False


async def test_text_message(service: EvolutionService, phone: str) -> bool:
    """Testa envio de mensagem de texto"""
    logger.info("üìù Testando envio de mensagem de texto...")
    
    try:
        # Mensagem simples
        result = await service.send_text_message(
            phone=phone,
            text=f"üß™ Teste Evolution API v2\nüìÖ {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n‚ú® Novo servi√ßo funcionando!"
        )
        
        if result:
            logger.success(f"‚úÖ Mensagem enviada! ID: {result.key.id}")
            
            # Testa mensagem longa (chunking)
            logger.info("üìù Testando mensagem longa (chunking)...")
            long_text = """
üß™ TESTE DE MENSAGEM LONGA - Evolution API v2

Esta √© uma mensagem muito longa para testar o sistema de chunking autom√°tico do novo servi√ßo.

üìã Funcionalidades testadas:
1. Divis√£o autom√°tica de mensagens longas
2. Quebra em pontos naturais (senten√ßas)
3. Delay progressivo entre chunks
4. Manuten√ß√£o da ordem das mensagens

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

Esta mensagem deve ser dividida em m√∫ltiplos chunks de forma inteligente, preservando a legibilidade e mantendo o contexto.

‚úÖ Fim do teste de mensagem longa!
"""
            
            result_long = await service.send_text_message(
                phone=phone,
                text=long_text
            )
            
            if result_long:
                logger.success(f"‚úÖ Mensagem longa enviada em chunks!")
                return True
            else:
                logger.error("‚ùå Falha ao enviar mensagem longa")
                return False
        else:
            logger.error("‚ùå Falha ao enviar mensagem de texto")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar mensagem: {e}")
        return False


async def test_media(service: EvolutionService, phone: str) -> bool:
    """Testa envio de m√≠dia"""
    logger.info("üñºÔ∏è Testando envio de m√≠dia...")
    
    # URLs de exemplo (substitua por URLs v√°lidas)
    test_media = {
        "image": "https://via.placeholder.com/300x200/007bff/ffffff?text=Evolution+API+v2",
        "document": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
    }
    
    try:
        # Testa imagem
        logger.info("üñºÔ∏è Enviando imagem de teste...")
        result = await service.send_image(
            phone=phone,
            image_url=test_media["image"],
            caption="üñºÔ∏è Imagem de teste - Evolution API v2"
        )
        
        if result:
            logger.success(f"‚úÖ Imagem enviada! ID: {result.key.id}")
        else:
            logger.warning("‚ö†Ô∏è  Falha ao enviar imagem (verifique a URL)")
        
        # Testa documento
        logger.info("üìÑ Enviando documento de teste...")
        result = await service.send_document(
            phone=phone,
            document_url=test_media["document"],
            caption="üìÑ Documento de teste - Evolution API v2"
        )
        
        if result:
            logger.success(f"‚úÖ Documento enviado! ID: {result.key.id}")
            return True
        else:
            logger.warning("‚ö†Ô∏è  Falha ao enviar documento (verifique a URL)")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar m√≠dia: {e}")
        return False


async def test_location(service: EvolutionService, phone: str) -> bool:
    """Testa envio de localiza√ß√£o"""
    logger.info("üìç Testando envio de localiza√ß√£o...")
    
    try:
        # Coordenadas da Praia de Boa Viagem, Recife
        result = await service.send_location(
            phone=phone,
            latitude=-8.126371,
            longitude=-34.904990,
            name="üèñÔ∏è Praia de Boa Viagem - Teste Evolution API v2"
        )
        
        if result:
            logger.success(f"‚úÖ Localiza√ß√£o enviada! ID: {result.key.id}")
            return True
        else:
            logger.error("‚ùå Falha ao enviar localiza√ß√£o")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar localiza√ß√£o: {e}")
        return False


async def test_webhook(service: EvolutionService) -> bool:
    """Testa configura√ß√£o de webhook"""
    logger.info("üîó Testando configura√ß√£o de webhook...")
    
    try:
        # URL de exemplo (substitua por sua URL de webhook)
        webhook_url = "https://webhook.site/test-evolution-v2"
        
        result = await service.set_webhook(
            url=webhook_url,
            events=["messages.upsert", "connection.update"]
        )
        
        if result:
            logger.success(f"‚úÖ Webhook configurado: {webhook_url}")
            return True
        else:
            logger.error("‚ùå Falha ao configurar webhook")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar webhook: {e}")
        return False


async def main():
    """Fun√ß√£o principal de teste"""
    logger.info("üöÄ Iniciando testes do Evolution API Service v2")
    logger.info("=" * 60)
    
    # Solicita n√∫mero de telefone para teste
    phone = input("üì± Digite o n√∫mero de telefone para teste (formato: 5511999999999): ").strip()
    
    if not phone or len(phone) < 10:
        logger.error("‚ùå N√∫mero de telefone inv√°lido!")
        return
    
    # Obt√©m servi√ßo
    service = get_evolution_service()
    
    # Contadores
    total_tests = 0
    passed_tests = 0
    
    # Executa testes
    tests = [
        ("Conex√£o", test_connection(service)),
        ("Mensagem de Texto", test_text_message(service, phone)),
        ("M√≠dia", test_media(service, phone)),
        ("Localiza√ß√£o", test_location(service, phone)),
        ("Webhook", test_webhook(service))
    ]
    
    logger.info("=" * 60)
    
    for test_name, test_coro in tests:
        total_tests += 1
        logger.info(f"üß™ Executando teste: {test_name}")
        
        try:
            result = await test_coro
            if result:
                passed_tests += 1
                logger.success(f"‚úÖ {test_name}: PASSOU")
            else:
                logger.error(f"‚ùå {test_name}: FALHOU")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: ERRO - {e}")
        
        logger.info("-" * 40)
    
    # Resumo
    logger.info("=" * 60)
    logger.info("üìä RESUMO DOS TESTES")
    logger.info(f"Total de testes: {total_tests}")
    logger.info(f"Testes aprovados: {passed_tests}")
    logger.info(f"Testes falhados: {total_tests - passed_tests}")
    logger.info(f"Taxa de sucesso: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        logger.success("üéâ TODOS OS TESTES PASSARAM!")
    else:
        logger.warning(f"‚ö†Ô∏è  {total_tests - passed_tests} testes falharam")
    
    # Fecha conex√µes
    await service.close()
    logger.info("üîö Testes finalizados")


if __name__ == "__main__":
    asyncio.run(main())