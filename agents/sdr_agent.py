"""
Agente SDR Principal - SolarPrime
================================
Implementa√ß√£o do agente de vendas usando AGnO Framework
"""

import json
import asyncio
import os
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from loguru import logger
import base64
from uuid import UUID

# AGnO Framework - API Correta
from agno.agent import Agent, AgentMemory
from agno.models.google import Gemini
from agno.models.openai import OpenAIChat
from agno.storage.agent.sqlite import SqliteAgentStorage

# Importar m√≥dulos multimodais do AGnO - Documenta√ß√£o oficial
from agno.media import Image, Audio, Video
AGNO_MEDIA_AVAILABLE = True

# Nota: PDFs ser√£o processados diretamente pelo Gemini 2.5 Pro que suporta PDFs nativamente
# PDFReader/PDFImageReader s√£o para criar knowledge bases, n√£o para processamento multimodal direto
logger.info("‚úÖ Processamento de PDFs ser√° feito nativamente pelo Gemini 2.5 Pro")

# Imports para retry e fallback
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type
import httpx

# Configura√ß√µes locais
from config.agent_config import config, get_config
from config.prompts import PromptTemplates, get_example_response
from config.messages import (
    get_error_message, get_fallback_message, get_follow_up_message,
    IMAGE_ERRORS, PDF_ERRORS, AUDIO_ERRORS, personalize_message
)
from utils.helpers import calculate_typing_delay, format_phone_number
from utils.currency_parser import parse_brazilian_currency

# Importar reposit√≥rios Supabase
from repositories.lead_repository import lead_repository
from repositories.conversation_repository import conversation_repository
from repositories.message_repository import message_repository
from models.lead import LeadCreate, LeadUpdate
from models.conversation import ConversationCreate

# Importar servi√ßos de integra√ß√£o
from services.kommo_service import KommoService
from services.google_calendar_service import GoogleCalendarService
from models.kommo_models import KommoLead, LeadStatus, SolutionType
from services.evolution_api import evolution_client as evolution_api


class SDRAgent:
    """Agente SDR principal para vendas de energia solar usando AGnO Framework"""
    
    def __init__(self):
        """Inicializa o agente SDR com AGnO"""
        self.config = get_config()
        self.agents: Dict[str, Agent] = {}  # Um agente por telefone
        
        # Configura√ß√£o do modelo Gemini (principal)
        self.model = Gemini(
            id=self.config.gemini.model,
            api_key=self.config.gemini.api_key
        )
        
        # Configura√ß√£o do modelo OpenAI (fallback)
        self.fallback_model = None
        if self.config.enable_fallback and self.config.openai.api_key:
            try:
                self.fallback_model = OpenAIChat(
                    id=self.config.openai.model,
                    api_key=self.config.openai.api_key
                )
                logger.info(f"Modelo de fallback OpenAI configurado: {self.config.openai.model}")
            except Exception as e:
                logger.warning(f"Erro ao configurar modelo de fallback OpenAI: {e}")
        
        # Configura√ß√£o do storage para persist√™ncia
        self.storage = SqliteAgentStorage(
            table_name="sdr_sessions",
            db_file="data/agent_storage.db"
        )
        
        # Configura√ß√£o de mem√≥ria
        self.memory_config = AgentMemory(
            role="Voc√™ √© Luna, uma consultora especializada em energia solar.",
            instructions="Mantenha o contexto das conversas e lembre-se de informa√ß√µes importantes dos leads."
        )
        
        # Cache de respostas (simples em mem√≥ria por enquanto)
        self._response_cache: Dict[str, Tuple[str, datetime]] = {}
        
        # Inicializar servi√ßos de integra√ß√£o
        self.kommo_service = None
        self.calendar_service = None
        
        # Tentar inicializar Kommo Service
        try:
            if os.getenv("KOMMO_LONG_LIVED_TOKEN"):
                self.kommo_service = KommoService()
                logger.info("‚úÖ KommoService inicializado com sucesso")
            else:
                logger.warning("‚ö†Ô∏è KOMMO_LONG_LIVED_TOKEN n√£o configurado - Kommo desabilitado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar KommoService: {e}")
            
        # Tentar inicializar Google Calendar Service
        try:
            if os.getenv("DISABLE_GOOGLE_CALENDAR", "false").lower() == "true":
                logger.info("‚ÑπÔ∏è Google Calendar desabilitado via configura√ß√£o")
                self.calendar_service = None
            else:
                # Verificar se est√° usando Service Account
                use_service_account = os.getenv('GOOGLE_USE_SERVICE_ACCOUNT', 'true').lower() == 'true'
                
                if use_service_account:
                    # Service Account: inicializar diretamente sem verificar credentials.json
                    logger.info("üîê Usando Google Calendar com Service Account")
                    try:
                        self.calendar_service = GoogleCalendarService(self.config)
                        # Verificar se o servi√ßo foi realmente inicializado
                        if hasattr(self.calendar_service, 'service') and self.calendar_service.service:
                            logger.info("‚úÖ GoogleCalendarService inicializado com sucesso (Service Account)")
                        else:
                            logger.warning("‚ö†Ô∏è Google Calendar Service n√£o p√¥de ser inicializado")
                            logger.info("üí° Verifique as vari√°veis de ambiente do Service Account")
                            self.calendar_service = None
                    except Exception as init_error:
                        logger.warning(f"‚ö†Ô∏è Erro ao inicializar Google Calendar com Service Account: {init_error}")
                        logger.info("üí° Verifique se todas as vari√°veis do Service Account est√£o configuradas:")
                        logger.info("   - GOOGLE_SERVICE_ACCOUNT_EMAIL")
                        logger.info("   - GOOGLE_PRIVATE_KEY")
                        logger.info("   - GOOGLE_PROJECT_ID")
                        logger.info("   - GOOGLE_CALENDAR_ID")
                        self.calendar_service = None
                else:
                    # OAuth: manter l√≥gica original
                    logger.info("üîë Usando Google Calendar com OAuth")
                    # Tentar criar arquivo de credenciais a partir de vari√°veis de ambiente
                    if self._create_google_credentials_from_env():
                        logger.info("‚úÖ Arquivo de credenciais OAuth criado a partir de vari√°veis de ambiente")
                    
                    # Verificar se arquivo existe agora
                    credentials_path = os.getenv("GOOGLE_CALENDAR_CREDENTIALS_PATH", "credentials/google_calendar_credentials.json")
                    if os.path.exists(credentials_path):
                        try:
                            self.calendar_service = GoogleCalendarService(self.config)
                            # Verificar se o servi√ßo foi realmente inicializado
                            if hasattr(self.calendar_service, 'service') and self.calendar_service.service:
                                logger.info("‚úÖ GoogleCalendarService inicializado com sucesso (OAuth)")
                            else:
                                logger.warning("‚ö†Ô∏è Google Calendar Service n√£o p√¥de ser inicializado (possivelmente falta autentica√ß√£o)")
                                logger.info("üí° Em produ√ß√£o, considere usar DISABLE_GOOGLE_CALENDAR=true ou configurar Service Account")
                                self.calendar_service = None
                        except Exception as init_error:
                            logger.warning(f"‚ö†Ô∏è Erro ao inicializar Google Calendar: {init_error}")
                            if "could not locate runnable browser" in str(init_error):
                                logger.info("üí° Ambiente sem interface gr√°fica detectado")
                                logger.info("üìñ Use Service Account definindo GOOGLE_USE_SERVICE_ACCOUNT=true")
                            logger.info("üí° Para desabilitar, defina DISABLE_GOOGLE_CALENDAR=true")
                            self.calendar_service = None
                    else:
                        logger.warning("‚ö†Ô∏è Credenciais OAuth do Google Calendar n√£o encontradas - Calendar desabilitado")
                        logger.info("üí° Para usar Service Account, defina GOOGLE_USE_SERVICE_ACCOUNT=true")
                        logger.info("üí° Para desabilitar este aviso, defina DISABLE_GOOGLE_CALENDAR=true")
                        self.calendar_service = None
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar GoogleCalendarService: {e}")
            if "could not locate runnable browser" in str(e):
                logger.info("üí° Ambiente headless detectado - veja GOOGLE_CALENDAR_HEADLESS_AUTH.md")
            self.calendar_service = None
        
        logger.info(f"SDR Agent '{self.config.personality.name}' inicializado com AGnO Framework")
    
    def _create_google_credentials_from_env(self) -> bool:
        """Cria arquivo de credenciais do Google Calendar a partir de vari√°veis de ambiente"""
        try:
            client_id = os.getenv('GOOGLE_CLIENT_ID')
            client_secret = os.getenv('GOOGLE_CLIENT_SECRET')
            project_id = os.getenv('GOOGLE_PROJECT_ID', 'solarprime-ia-sdr')
            
            if not client_id or not client_secret:
                return False
            
            credentials = {
                "installed": {
                    "client_id": client_id,
                    "project_id": project_id,
                    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                    "token_uri": "https://oauth2.googleapis.com/token",
                    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                    "client_secret": client_secret,
                    "redirect_uris": ["http://localhost"]
                }
            }
            
            # Criar diret√≥rio se n√£o existir
            credentials_dir = os.path.dirname(os.getenv("GOOGLE_CALENDAR_CREDENTIALS_PATH", "credentials/google_calendar_credentials.json"))
            if credentials_dir:
                os.makedirs(credentials_dir, exist_ok=True)
            
            # Salvar arquivo
            credentials_path = os.getenv("GOOGLE_CALENDAR_CREDENTIALS_PATH", "credentials/google_calendar_credentials.json")
            with open(credentials_path, 'w') as f:
                json.dump(credentials, f, indent=2)
            
            logger.info(f"‚úÖ Arquivo de credenciais criado em: {credentials_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar arquivo de credenciais: {e}")
            return False
    
    def _get_or_create_agent(self, phone_number: str) -> Agent:
        """Obt√©m ou cria um agente para o n√∫mero de telefone"""
        if phone_number not in self.agents:
            # Cria um agente √∫nico para este telefone com session_id pr√≥prio
            self.agents[phone_number] = Agent(
                name=self.config.personality.name,
                description=f"Consultora de energia solar da {self.config.personality.company}",
                instructions=PromptTemplates.format_system_prompt(),
                model=self.model,
                reasoning=True,  # Habilita chain of thought
                reasoning_min_steps=2,  # M√≠nimo 2 passos de racioc√≠nio para vendas
                reasoning_max_steps=5,  # M√°ximo 5 passos para n√£o demorar
                reasoning_model=None,  # Usa o mesmo modelo (Gemini 2.5 Pro)
                memory=self.memory_config,
                session_id=f"sdr_{phone_number}",  # ID √∫nico por lead
                storage=self.storage,
                session_state={
                    "lead_info": {"phone": format_phone_number(phone_number)},
                    "current_stage": "INITIAL_CONTACT",
                    "conversation_history": []
                },
                # Configura√ß√µes adicionais para vendas
                debug_mode=config.debug  # Ativa debug do reasoning se configurado
            )
            logger.info(f"Novo agente criado para telefone: {phone_number}")
        return self.agents[phone_number]
    
    def _get_session_state(self, agent: Agent) -> Dict[str, Any]:
        """Obt√©m o estado da sess√£o do agente"""
        if agent.session_state is None:
            agent.session_state = {
                "lead_info": {},
                "current_stage": "INITIAL_CONTACT",
                "conversation_history": []
            }
        return agent.session_state
    
    def _update_session_state(self, agent: Agent, updates: Dict[str, Any]):
        """Atualiza o estado da sess√£o do agente"""
        state = self._get_session_state(agent)
        state.update(updates)
        agent.session_state = state
    
    async def process_message(
        self, 
        message: str,
        phone_number: str,
        media_type: Optional[str] = None,
        media_data: Optional[Any] = None,
        message_id: Optional[str] = None
    ) -> Tuple[str, Dict[str, Any]]:
        """
        Processa mensagem recebida e gera resposta usando AGnO
        
        Args:
            message: Mensagem de texto do usu√°rio
            phone_number: N√∫mero de telefone do lead
            media_type: Tipo de m√≠dia (image, document, audio)
            media_data: Dados da m√≠dia se houver
            
        Returns:
            Tuple com (resposta, metadados)
        """
        try:
            # Log para debug
            logger.info(f"Processando mensagem para telefone: '{phone_number}' (tamanho: {len(phone_number)})")
            
            # Criar ou atualizar lead no Supabase
            lead = await lead_repository.create_or_update(
                LeadCreate(phone_number=phone_number)
            )
            
            # Criar ou retomar conversa
            # Usar hash do phone_number + data para manter o session_id √∫nico mas menor
            import hashlib
            date_str = datetime.now().strftime('%Y%m%d')
            session_hash = hashlib.md5(f"{phone_number}_{date_str}".encode()).hexdigest()[:16]
            session_id = f"s_{session_hash}"
            
            conversation = await conversation_repository.create_or_resume(
                lead_id=lead.id,
                session_id=session_id
            )
            
            # Buscar hist√≥rico completo de mensagens do Supabase
            messages_history = await message_repository.get_conversation_messages(
                conversation_id=conversation.id,
                limit=50  # √öltimas 50 mensagens para contexto completo
            )
            
            # Obter contexto formatado da conversa
            conversation_context = await message_repository.get_conversation_context(
                conversation_id=conversation.id,
                max_messages=20  # √öltimas 20 mensagens formatadas
            )
            
            # Obt√©m ou cria agente espec√≠fico para este telefone
            agent = self._get_or_create_agent(phone_number)
            
            # Obt√©m estado atual da sess√£o
            session_state = self._get_session_state(agent)
            
            # Adicionar IDs do Supabase ao estado da sess√£o
            session_state["lead_id"] = str(lead.id)
            session_state["conversation_id"] = str(conversation.id)
            
            # Adiciona mensagem ao hist√≥rico
            session_state["conversation_history"].append({
                "role": "user",
                "content": message,
                "timestamp": datetime.now().isoformat()
            })
            
            # Salvar mensagem do usu√°rio no Supabase
            await message_repository.save_user_message(
                conversation_id=conversation.id,
                content=message,
                media_type=media_type,
                media_url=media_data.get("url") if isinstance(media_data, dict) else None
            )
            
            # Analisa contexto e determina est√°gio
            analysis = await self._analyze_context(message, agent, session_state, phone_number)
            
            # Atualiza informa√ß√µes do lead
            self._update_lead_info(analysis, agent, session_state)
            
            # Processa m√≠dia se houver
            media_info = None
            processed_images = None
            
            if media_type and media_data:
                # Para imagens, criar objeto Image AGnO primeiro
                if media_type == "image":
                    # Criar imagem AGnO que ser√° usada tanto para an√°lise quanto para o prompt
                    agno_image = self._create_agno_image(media_data)
                    if agno_image:
                        processed_images = [agno_image]
                        
                        # Analisar a imagem para extrair dados
                        media_info = await self._process_media(media_type, media_data)
                        
                        if media_info:
                            # Atualizar lead_info com dados extra√≠dos da conta
                            if 'bill_value' in media_info:
                                session_state["lead_info"]["bill_value"] = media_info['bill_value']
                            if 'customer_name' in media_info:
                                session_state["lead_info"]["customer_name"] = media_info['customer_name']
                            if 'address' in media_info:
                                session_state["lead_info"]["address"] = media_info['address']
                            if 'consumption_kwh' in media_info:
                                session_state["lead_info"]["consumption_kwh"] = media_info['consumption_kwh']
                else:
                    # Para outros tipos de m√≠dia
                    media_info = await self._process_media(media_type, media_data)
            
            # Prepara contexto adicional para o agente
            context_prompt = self._build_context_prompt(
                message, 
                analysis, 
                session_state, 
                media_info,
                conversation_context=conversation_context  # Passar contexto do Supabase
            )
            
            # Executa o agente AGnO para gerar resposta
            # Se houver imagem processada, passar junto
            if processed_images:
                response = await self._run_agent(context_prompt, agent, images=processed_images)
            else:
                response = await self._run_agent(context_prompt, agent)
            
            # Adiciona resposta ao hist√≥rico
            session_state["conversation_history"].append({
                "role": "assistant",
                "content": response,
                "timestamp": datetime.now().isoformat()
            })
            
            # Salvar resposta do assistente no Supabase
            await message_repository.save_assistant_message(
                conversation_id=UUID(session_state["conversation_id"]),
                content=response
            )
            
            # Atualizar conversa no Supabase
            await conversation_repository.update_stage_and_sentiment(
                conversation_id=UUID(session_state["conversation_id"]),
                stage=session_state["current_stage"],
                sentiment=analysis.get("sentiment", "neutro")
            )
            
            # Incrementar contador de mensagens
            await conversation_repository.increment_message_count(
                UUID(session_state["conversation_id"])
            )
            
            # Atualizar lead no Supabase se houver novas informa√ß√µes
            lead_updates = {}
            lead_info = session_state.get("lead_info", {})
            
            if lead_info.get("name"):
                lead_updates["name"] = lead_info["name"]
            if lead_info.get("email"):
                lead_updates["email"] = lead_info["email"]
            if lead_info.get("property_type"):
                lead_updates["property_type"] = lead_info["property_type"]
            if lead_info.get("bill_value"):
                parsed_value = parse_brazilian_currency(lead_info["bill_value"])
                if parsed_value is not None:
                    lead_updates["bill_value"] = parsed_value
                else:
                    logger.warning(f"N√£o foi poss√≠vel converter bill_value: '{lead_info.get('bill_value')}'")
            if lead_info.get("consumption_kwh"):
                try:
                    lead_updates["consumption_kwh"] = int(lead_info["consumption_kwh"])
                except (ValueError, TypeError) as e:
                    logger.warning(f"Erro ao converter consumption_kwh para int: {e}")
            if lead_info.get("address"):
                lead_updates["address"] = lead_info["address"]
            
            # Atualizar stage do lead
            lead_updates["current_stage"] = session_state["current_stage"]
            
            # Calcular score de qualifica√ß√£o baseado nas informa√ß√µes coletadas
            qualification_score = self._calculate_qualification_score(lead_info, session_state)
            if qualification_score:
                lead_updates["qualification_score"] = qualification_score
            
            if lead_updates:
                await lead_repository.update(
                    UUID(session_state["lead_id"]),
                    lead_updates
                )
            
            # Atualiza estado da sess√£o
            self._update_session_state(agent, session_state)
            
            # Determinar se deve reagir e qual emoji usar
            should_react, reaction_emoji = self._should_react_to_message(
                message, 
                analysis, 
                session_state,
                media_type
            )
            
            # Prepara metadados
            metadata = {
                "stage": session_state["current_stage"],
                "sentiment": analysis.get("sentiment", "neutro"),
                "lead_info": session_state["lead_info"],
                "typing_delay": calculate_typing_delay(response),
                "should_schedule": session_state["current_stage"] == "SCHEDULING",
                "session_id": agent.session_id if hasattr(agent, 'session_id') else None,
                "reasoning_enabled": True,
                "model": self.config.gemini.model,
                "should_react": should_react,
                "reaction_emoji": reaction_emoji,
                "message_id": message_id
            }
            
            return response, metadata
            
        except Exception as e:
            logger.error(f"Erro ao processar mensagem: {e}")
            # Usar mensagem humanizada ao inv√©s de erro t√©cnico
            error_msg = get_error_message("ERRO_TECNICO")
            return error_msg, {"error": str(e), "humanized": True}
    
    async def _run_agent(
        self, 
        prompt: str, 
        agent: Agent,
        images: Optional[List] = None,
        documents: Optional[List] = None,
        audio: Optional[List] = None
    ) -> str:
        """Executa o agente AGnO com suporte multimodal e fallback"""
        # Verificar cache primeiro
        cache_key = self._get_cache_key(prompt, agent.session_state)
        cached_response = self._get_cached_response(cache_key)
        if cached_response:
            logger.info("Resposta encontrada no cache")
            return cached_response
        
        # Preparar kwargs para m√≠dias
        kwargs = self._prepare_media_kwargs(images, audio)
        
        # Tentar com Gemini primeiro
        try:
            response = await self._run_agent_with_retry(
                agent, prompt, self.model, **kwargs
            )
            # Salvar no cache
            self._cache_response(cache_key, response)
            return response
        except Exception as gemini_error:
            logger.error(f"Gemini falhou ap√≥s todas tentativas: {gemini_error}")
            
            # Tentar fallback com OpenAI
            if self.fallback_model and self.config.enable_fallback:
                logger.warning("Ativando fallback para OpenAI gpt-4o-mini...")
                try:
                    # Criar agente tempor√°rio com OpenAI
                    fallback_agent = self._create_fallback_agent(agent.session_id)
                    response = await self._run_agent_with_retry(
                        fallback_agent, prompt, self.fallback_model, **kwargs
                    )
                    # Salvar no cache
                    self._cache_response(cache_key, response)
                    return response
                except Exception as openai_error:
                    logger.error(f"OpenAI tamb√©m falhou: {openai_error}")
            
            # Se tudo falhar, usar resposta de fallback contextual
            return self._get_contextual_fallback_response(agent.session_state)
    
    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=2, max=10),
        retry=retry_if_exception_type((httpx.HTTPStatusError, Exception)),
        before_sleep=lambda retry_state: logger.warning(
            f"Tentativa {retry_state.attempt_number}/3, aguardando {retry_state.next_action.sleep} segundos..."
        )
    )
    async def _run_agent_with_retry(
        self, 
        agent: Agent,
        prompt: str,
        model: Any,
        **kwargs
    ) -> str:
        """Executa agente com retry logic"""
        # Usa o m√©todo run do AGnO com timeout de 60 segundos para Gemini
        try:
            response = await asyncio.wait_for(
                asyncio.to_thread(
                    agent.run,
                    prompt,
                    **kwargs
                ),
                timeout=60.0  # 60 segundos de timeout para Gemini
            )
        except asyncio.TimeoutError:
            logger.error("‚è±Ô∏è Timeout ao executar Gemini ap√≥s 60 segundos")
            raise Exception("Timeout na resposta do Gemini. Por favor, tente novamente.")
        
        # Log do reasoning em modo debug
        if self.config.debug and hasattr(response, 'reasoning'):
            logger.debug("=== REASONING STEPS ===")
            if isinstance(response.reasoning, list):
                for i, step in enumerate(response.reasoning, 1):
                    logger.debug(f"Step {i}: {step}")
            else:
                logger.debug(f"Reasoning: {response.reasoning}")
            logger.debug("=== END REASONING ===")
        
        # Extrai o conte√∫do da resposta
        if hasattr(response, 'content'):
            return response.content
        elif hasattr(response, 'messages') and response.messages:
            # Se retornar uma lista de mensagens, pega a √∫ltima
            return response.messages[-1].content
        else:
            return str(response)
    
    def _prepare_media_kwargs(self, images: Optional[List], audio: Optional[List]) -> Dict[str, Any]:
        """Prepara kwargs com m√≠dias convertidas para formato AGnO"""
        kwargs = {}
        
        if images:
            agno_images = []
            for img in images:
                if isinstance(img, Image):
                    agno_images.append(img)
                elif isinstance(img, dict):
                    if 'url' in img:
                        agno_images.append(Image(url=img['url']))
                    elif 'path' in img:
                        agno_images.append(Image(filepath=img['path']))
                    elif 'base64' in img:
                        import base64 as b64
                        img_bytes = b64.b64decode(img['base64'])
                        agno_images.append(Image(content=img_bytes))
                elif isinstance(img, str):
                    if img.startswith('http'):
                        agno_images.append(Image(url=img))
                    else:
                        agno_images.append(Image(filepath=img))
            
            if agno_images:
                kwargs['images'] = agno_images
                logger.debug(f"Preparou {len(agno_images)} imagem(ns)")
        
        if audio:
            agno_audio = []
            for aud in audio:
                if isinstance(aud, Audio):
                    agno_audio.append(aud)
                elif isinstance(aud, dict):
                    if 'content' in aud:
                        agno_audio.append(Audio(content=aud['content'], format=aud.get('format', 'wav')))
                    elif 'path' in aud:
                        with open(aud['path'], 'rb') as f:
                            agno_audio.append(Audio(content=f.read(), format=aud.get('format', 'wav')))
            
            if agno_audio:
                kwargs['audio'] = agno_audio
                logger.debug(f"Preparou {len(agno_audio)} √°udio(s)")
        
        return kwargs
    
    def _get_cache_key(self, prompt: str, session_state: Dict[str, Any]) -> str:
        """Gera chave √∫nica para cache baseada no prompt e contexto"""
        import hashlib
        stage = session_state.get('current_stage', 'INITIAL_CONTACT')
        content = f"{prompt}:{stage}"
        return hashlib.md5(content.encode()).hexdigest()
    
    def _get_cached_response(self, cache_key: str) -> Optional[str]:
        """Busca resposta no cache se ainda v√°lida"""
        if cache_key in self._response_cache:
            response, timestamp = self._response_cache[cache_key]
            # Verificar se ainda est√° dentro do TTL
            if datetime.now() - timestamp < timedelta(minutes=self.config.response_cache_ttl):
                return response
            else:
                # Limpar entrada expirada
                del self._response_cache[cache_key]
        return None
    
    def _cache_response(self, cache_key: str, response: str):
        """Armazena resposta no cache"""
        self._response_cache[cache_key] = (response, datetime.now())
        # Limpar cache antigo se ficar muito grande
        if len(self._response_cache) > 100:
            # Remover 20% das entradas mais antigas
            sorted_keys = sorted(
                self._response_cache.keys(),
                key=lambda k: self._response_cache[k][1]
            )
            for key in sorted_keys[:20]:
                del self._response_cache[key]
    
    def _create_fallback_agent(self, session_id: str) -> Agent:
        """Cria agente tempor√°rio com modelo de fallback"""
        return Agent(
            name=self.config.personality.name,
            description=f"Consultora de energia solar da {self.config.personality.company}",
            instructions=PromptTemplates.format_system_prompt(),
            model=self.fallback_model,
            reasoning=True,
            reasoning_min_steps=1,  # Reduzido para velocidade
            reasoning_max_steps=2,  # M√°ximo 2 para garantir resposta r√°pida
            memory=self.memory_config,
            storage=self.storage,
            session_id=session_id,
            search_knowledge=False,  # Desabilitar para velocidade
            debug_mode=self.config.debug
        )
    
    def _get_contextual_fallback_response(self, session_state: Dict[str, Any]) -> str:
        """Resposta de fallback baseada no contexto da conversa"""
        stage = session_state.get('current_stage', 'INITIAL_CONTACT')
        lead_info = session_state.get('lead_info', {})
        lead_name = lead_info.get('name', '')
        
        # Usar mensagens humanizadas com varia√ß√µes autom√°ticas
        return get_fallback_message(stage, lead_name)
    
    async def _analyze_context(
        self, 
        message: str, 
        agent: Agent,
        session_state: Dict[str, Any],
        phone_number: str
    ) -> Dict[str, Any]:
        """Analisa o contexto da conversa usando AGnO"""
        try:
            # Prepara hist√≥rico resumido
            history_summary = self._get_conversation_summary(session_state)
            
            # Prepara prompt de an√°lise com contexto completo
            analysis_prompt = f"""Voc√™ √© um analisador de contexto para vendas de energia solar.

CONTEXTO DA CONVERSA:
{history_summary}

INFORMA√á√ïES J√Å COLETADAS:
{json.dumps(session_state.get("lead_info", {}), indent=2, ensure_ascii=False)}

EST√ÅGIO ATUAL: {session_state.get("current_stage", "INITIAL_CONTACT")}

NOVA MENSAGEM DO LEAD: {message}

SE a conversa indica que perguntamos o nome e o lead respondeu com uma √∫nica palavra ou nome pr√≥prio, considere isso como o nome do lead.

Analise e determine:
1. Em qual est√°gio a conversa deve estar agora
2. O sentimento do lead em rela√ß√£o √† proposta
3. A inten√ß√£o principal da mensagem
4. Pr√≥xima a√ß√£o recomendada
5. Informa√ß√µes importantes a extrair (IMPORTANTE: Se o lead disse seu nome, inclua "nome: [nome_mencionado]")

IMPORTANTE: Responda APENAS com um JSON v√°lido, sem texto adicional.

{{
    "stage": "IDENTIFICATION ou DISCOVERY ou QUALIFICATION ou OBJECTION_HANDLING ou SCHEDULING ou FOLLOW_UP",
    "sentiment": "positivo ou neutro ou negativo",
    "intent": "descri√ß√£o clara da inten√ß√£o",
    "next_action": "pr√≥xima a√ß√£o espec√≠fica",
    "key_info": ["lista de informa√ß√µes extra√≠das", "Se o lead mencionou nome, adicione: nome: [nome_dito]"]
}}"""
            
            # Cria um agente tempor√°rio para an√°lise
            analysis_agent = Agent(
                name="Analisador",
                description="Analisador de contexto de vendas",
                instructions="Voc√™ analisa conversas e retorna APENAS JSON v√°lido, sem texto adicional.",
                model=self.model
            )
            
            # Executa an√°lise
            result = await asyncio.to_thread(
                analysis_agent.run,
                analysis_prompt
            )
            
            # Parse do resultado
            try:
                if hasattr(result, 'content'):
                    content = result.content
                else:
                    content = str(result)
                
                # Remove poss√≠veis marcadores de c√≥digo
                content = content.strip()
                if content.startswith("```json"):
                    content = content[7:]
                if content.endswith("```"):
                    content = content[:-3]
                content = content.strip()
                
                # Parse JSON
                analysis = json.loads(content)
                
                # Atualiza est√°gio se mudou
                new_stage = analysis.get("stage", session_state.get("current_stage"))
                old_stage = session_state.get("current_stage", "INITIAL_CONTACT")
                
                if new_stage != old_stage:
                    logger.info(f"Mudan√ßa de est√°gio: {old_stage} -> {new_stage}")
                    session_state["current_stage"] = new_stage
                    
                    # Integra√ß√£o com Kommo quando est√°gio muda
                    if self.kommo_service:
                        asyncio.create_task(self._update_kommo_on_stage_change(
                            phone_number=phone_number,
                            old_stage=old_stage,
                            new_stage=new_stage,
                            session_state=session_state,
                            analysis=analysis
                        ))
                
                return analysis
                
            except json.JSONDecodeError as e:
                logger.warning(f"Falha ao parsear an√°lise: {e}, conte√∫do: {content[:200]}")
                return {
                    "stage": session_state.get("current_stage", "INITIAL_CONTACT"),
                    "sentiment": "neutro",
                    "intent": "continua√ß√£o de conversa",
                    "next_action": "responder naturalmente",
                    "key_info": []
                }
                
        except Exception as e:
            logger.error(f"Erro na an√°lise de contexto: {e}")
            return {
                "stage": session_state.get("current_stage", "INITIAL_CONTACT"),
                "sentiment": "neutro",
                "intent": "erro na an√°lise",
                "next_action": "continuar conversa",
                "key_info": []
            }
    
    def _get_conversation_summary(self, session_state: Dict[str, Any]) -> str:
        """Cria um resumo do hist√≥rico da conversa"""
        history = session_state.get("conversation_history", [])
        if not history:
            return "Primeira intera√ß√£o com o lead."
        
        # Pega √∫ltimas 6 mensagens (3 trocas)
        recent = history[-6:]
        summary = []
        
        for msg in recent:
            role = "Lead" if msg["role"] == "user" else "Luna"
            content = msg["content"][:100] + "..." if len(msg["content"]) > 100 else msg["content"]
            summary.append(f"{role}: {content}")
        
        return "\n".join(summary)
    
    def _build_context_prompt(
        self, 
        message: str, 
        analysis: Dict[str, Any], 
        session_state: Dict[str, Any],
        media_info: Optional[Dict[str, Any]] = None,
        conversation_context: Optional[str] = None
    ) -> str:
        """Constr√≥i o prompt com contexto para o agente"""
        # Obt√©m instru√ß√µes espec√≠ficas do est√°gio
        stage_instructions = PromptTemplates.get_stage_prompt(session_state["current_stage"])
        
        # Informa√ß√µes do lead
        lead_info = session_state.get("lead_info", {})
        lead_name = lead_info.get("name", "")
        
        # Monta contexto
        context_parts = [
            f"CONTEXTO IMPORTANTE:",
            f"- Voc√™ j√° est√° em conversa com este lead",
            f"- Est√°gio atual: {session_state['current_stage']}",
            f"- Sentimento detectado: {analysis.get('sentiment', 'neutro')}",
        ]
        
        if lead_name:
            context_parts.append(f"- Nome do lead: {lead_name}")
        
        # Se houver an√°lise de m√≠dia, adicionar contexto especial
        if media_info and 'bill_value' in media_info:
            context_parts.append("\nüéØ DADOS EXTRA√çDOS DA CONTA DE LUZ:")
            context_parts.append(f"- Valor da conta: {media_info.get('bill_value', 'N√£o identificado')}")
            
            if media_info.get('consumption_kwh'):
                context_parts.append(f"- Consumo: {media_info['consumption_kwh']} kWh")
            if media_info.get('customer_name'):
                context_parts.append(f"- Titular: {media_info['customer_name']}")
            if media_info.get('address'):
                context_parts.append(f"- Endere√ßo: {media_info['address']}")
            if media_info.get('reference_period'):
                context_parts.append(f"- Per√≠odo: {media_info['reference_period']}")
            
            # Instru√ß√µes especiais para conta de luz
            context_parts.append("\nüìå INSTRU√á√ïES ESPECIAIS PARA AN√ÅLISE DE CONTA:")
            context_parts.append("- RESPONDA IMEDIATAMENTE com os dados extra√≠dos da conta")
            context_parts.append("- N√ÉO diga que vai analisar ou retornar depois - A AN√ÅLISE J√Å FOI FEITA")
            context_parts.append("- Confirme o valor extra√≠do: 'Vi aqui na sua conta que o valor √© R$ X, est√° correto?'")
            context_parts.append("- Calcule e mencione a economia estimada de 95% AGORA")
            context_parts.append("- Seja espec√≠fico com os n√∫meros NESTA MENSAGEM")
            context_parts.append("- Use os dados para personalizar sua abordagem IMEDIATAMENTE")
            context_parts.append("- NUNCA prometa retornar com n√∫meros - voc√™ J√Å TEM os n√∫meros")
            
            # Se o valor for alto, adicionar contexto de urg√™ncia
            try:
                bill_value = media_info.get('bill_value')
                if bill_value and isinstance(bill_value, str):
                    valor_str = bill_value.replace('R$', '').replace('.', '').replace(',', '.').strip()
                    if valor_str:
                        valor = float(valor_str)
                        if valor > 500:
                            context_parts.append(f"\n‚ö° ALERTA: Conta alta! Enfatize a economia potencial de R$ {valor * 0.95:.2f}")
            except (ValueError, TypeError) as e:
                logger.warning(f"Erro ao converter valor da conta: {bill_value if 'bill_value' in locals() else 'None'} - {e}")
        
        # Adiciona informa√ß√µes conhecidas
        if lead_info:
            context_parts.append("\nINFORMA√á√ïES J√Å COLETADAS:")
            for key, value in lead_info.items():
                if key not in ['phone', 'last_interaction'] and value:
                    # Formatar nome da chave de forma mais amig√°vel
                    friendly_key = key.replace('_', ' ').title()
                    context_parts.append(f"- {friendly_key}: {value}")
        
        # Adiciona hist√≥rico completo do Supabase se dispon√≠vel
        if conversation_context:
            context_parts.append(f"\nHIST√ìRICO COMPLETO DA CONVERSA:\n{conversation_context}")
        else:
            # Fallback para hist√≥rico da sess√£o se n√£o tiver contexto do Supabase
            history_summary = self._get_conversation_summary(session_state)
            if history_summary != "Primeira intera√ß√£o com o lead.":
                context_parts.append(f"\nHIST√ìRICO RECENTE:\n{history_summary}")
        
        # Adiciona mensagem atual
        context_parts.append(f"\nNOVA MENSAGEM DO LEAD: {message}")
        
        # Adiciona instru√ß√µes do est√°gio
        context_parts.append(f"\nINSTRU√á√ïES PARA ESTE EST√ÅGIO:\n{stage_instructions}")
        
        # Adiciona orienta√ß√µes espec√≠ficas
        context_parts.append("\nORIENTA√á√ïES:")
        context_parts.append("- N√ÉO se apresente novamente se j√° conversaram antes")
        context_parts.append("- Continue a conversa naturalmente do ponto onde parou")
        context_parts.append("- Use o nome do lead se j√° souber")
        context_parts.append("- Seja natural e evite repeti√ß√µes")
        
        # Se houver an√°lise de conta, adicionar orienta√ß√£o extra
        if media_info and 'bill_value' in media_info:
            context_parts.append("\n‚ö†Ô∏è IMPORTANTE - AN√ÅLISE DE CONTA J√Å CONCLU√çDA:")
            context_parts.append("- A an√°lise da conta J√Å FOI FEITA - os dados est√£o acima")
            context_parts.append("- RESPONDA AGORA com os valores encontrados")
            context_parts.append("- N√ÉO prometa analisar ou retornar depois")
            context_parts.append("- Exemplo: 'Analisei sua conta e vi que voc√™ paga R$ [VALOR]. Com nossa solu√ß√£o...'")
            context_parts.append("- Demonstre que analisou a conta detalhadamente")
            context_parts.append("- Seja consultivo e mostre expertise")
        
        # Adiciona exemplos se relevante
        if self._should_use_example(analysis):
            example = self._get_relevant_example(analysis)
            if example:
                context_parts.append(f"\nExemplo de resposta apropriada:\n{example}")
        
        return "\n".join(context_parts)
    
    async def _process_media(
        self, 
        media_type: str, 
        media_data: Any
    ) -> Optional[Dict[str, Any]]:
        """Processa m√≠dia usando capacidades do Gemini 2.5 Pro"""
        try:
            logger.info(f"üéØ Processamento de m√≠dia iniciado - Tipo: {media_type}")
            logger.debug(f"Dados recebidos - Tipo: {type(media_data)}, √â dict: {isinstance(media_data, dict)}")
            
            # Definir limite de tamanho (50MB)
            MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB em bytes
            
            # Verificar tamanho do arquivo
            file_size = 0
            if isinstance(media_data, dict):
                if 'content' in media_data and media_data['content']:
                    file_size = len(media_data['content'])
                elif 'base64' in media_data and media_data['base64']:
                    # Estimar tamanho do base64 (aproximadamente 3/4 do tamanho encodado)
                    file_size = int(len(media_data['base64']) * 0.75)
                elif 'filesize' in media_data:
                    file_size = int(media_data['filesize'])
                elif 'size' in media_data:
                    file_size = int(media_data['size'])
            
            if file_size > MAX_FILE_SIZE:
                logger.warning(f"‚ö†Ô∏è Arquivo muito grande: {file_size / (1024*1024):.1f}MB (limite: 50MB)")
                size_mb = file_size / (1024 * 1024)
                return {
                    "media_received": media_type,
                    "analysis_status": "file_too_large",
                    "file_size_mb": f"{size_mb:.1f}",
                    "user_message": f"Opa! Esse arquivo √© muito grande ({size_mb:.1f}MB)! üì¶ Preciso de arquivos menores que 50MB. Que tal enviar uma vers√£o menor ou dividir em partes?",
                    "suggestion": "üí° Dica: Se for PDF, tente enviar s√≥ as p√°ginas importantes. Se for imagem, reduza a qualidade ou tire uma foto mais leve!"
                }
            
            # Log detalhado do conte√∫do recebido para debug
            if isinstance(media_data, dict):
                logger.info(f"üìã Dados dispon√≠veis: {list(media_data.keys())}")
                if 'content' in media_data:
                    logger.info(f"‚úÖ Conte√∫do bin√°rio presente: {len(media_data['content']) if media_data['content'] else 0} bytes")
                if 'base64' in media_data:
                    logger.info(f"‚úÖ Base64 presente: {len(media_data['base64']) if media_data['base64'] else 0} chars")
                if 'url' in media_data:
                    logger.info(f"üîó URL presente: {media_data['url'][:50] if media_data['url'] else 'None'}...")
                    # Avisar sobre URLs do WhatsApp
                    if media_data.get('url') and ('whatsapp.net' in media_data['url'] or 'mmg.whatsapp.net' in media_data['url']):
                        logger.warning("‚ö†Ô∏è URL do WhatsApp detectada - usar√° conte√∫do bin√°rio/base64 ao inv√©s da URL")
            
            if media_type == "image":
                logger.info("üñºÔ∏è Iniciando processamento de imagem...")
                logger.debug(f"Dados da m√≠dia recebidos: type={type(media_data)}, keys={media_data.keys() if isinstance(media_data, dict) else 'N/A'}")
                
                # Criar prompt espec√≠fico para an√°lise de conta de luz
                analysis_prompt = """Analise esta conta de energia el√©trica e extraia IMEDIATAMENTE as seguintes informa√ß√µes:

1. Valor total da fatura (em R$)
2. Consumo em kWh
3. M√™s/Ano de refer√™ncia
4. Nome do titular da conta
5. Endere√ßo completo
6. CPF ou CNPJ
7. Nome da distribuidora de energia
8. Hist√≥rico de consumo (se dispon√≠vel)

IMPORTANTE: Retorne APENAS um JSON v√°lido com essas informa√ß√µes, sem texto adicional.
Formato esperado:
{
    "bill_value": "valor em reais",
    "consumption_kwh": "consumo em kWh",
    "reference_period": "m√™s/ano",
    "customer_name": "nome do titular",
    "address": "endere√ßo completo",
    "document": "CPF ou CNPJ",
    "distributor": "nome da distribuidora",
    "consumption_history": []
}

Se alguma informa√ß√£o n√£o estiver dispon√≠vel, use null."""
                
                # Processar imagem com Gemini Vision
                logger.info("üì§ Enviando imagem para an√°lise com Gemini Vision...")
                result = await self._analyze_image_with_gemini(
                    media_data, 
                    analysis_prompt
                )
                
                if result:
                    logger.success(f"‚úÖ An√°lise conclu√≠da! Dados extra√≠dos: {json.dumps(result, indent=2)}")
                    return result
                else:
                    logger.warning("‚ùå N√£o foi poss√≠vel extrair dados da imagem")
                    import random
                    messages = [
                        "Parece que a imagem n√£o veio completa... ü§î Pode enviar de novo? √Äs vezes o WhatsApp corta a qualidade!",
                        "Opa, a foto t√° meio emba√ßada aqui! üì∏ Tenta tirar outra com mais luz? Prometo que consigo ler!",
                        "Xi, n√£o consegui ler direito a imagem... Que tal mandar outra foto? Capricha na ilumina√ß√£o! üí°"
                    ]
                    return {
                        "media_received": "image",
                        "analysis_status": "failed",
                        "user_message": random.choice(messages),
                        "suggestion": "Dica: Coloca a conta numa superf√≠cie plana e tira a foto de cima, com boa luz! üòä"
                    }
                    
            elif media_type == "audio":
                logger.info("üé§ Iniciando processamento de √°udio...")
                logger.debug(f"Dados do √°udio recebidos: type={type(media_data)}, keys={media_data.keys() if isinstance(media_data, dict) else 'N/A'}")
                
                # Criar prompt para transcri√ß√£o e an√°lise
                audio_prompt = """Transcreva este √°udio e analise o conte√∫do para identificar:

1. Nome do cliente (se mencionado)
2. Valor da conta de luz (se mencionado) 
3. Interesse em economia/desconto
4. D√∫vidas ou perguntas
5. Sentimento geral (positivo/negativo/neutro)

Retorne um JSON com essas informa√ß√µes."""
                
                # Processar √°udio
                result = await self._analyze_audio_with_gemini(media_data, audio_prompt)
                
                if result:
                    logger.success(f"‚úÖ √Åudio processado! Transcri√ß√£o: {result.get('transcription', 'N/A')[:100]}...")
                    return result
                else:
                    logger.warning("‚ùå N√£o foi poss√≠vel processar o √°udio")
                    import random
                    messages = [
                        "O √°udio chegou meio cortado aqui... üé§ Que tal me contar por mensagem mesmo? Prometo que respondo rapidinho! üí¨",
                        "Ops, o √°udio t√° com um chiado! Pode escrever pra mim? Assim a gente conversa melhor! üòä",
                        "Ih, n√£o consegui ouvir direito... üôâ Manda por texto que eu te respondo na hora!"
                    ]
                    return {
                        "media_received": "audio",
                        "analysis_status": "failed",
                        "user_message": random.choice(messages),
                        "suggestion": "Prefiro conversar por mensagem mesmo, assim n√£o perdemos nada! üì±"
                    }
                
            elif media_type == "document":
                # Verificar mimetype (sem underscore)
                mimetype = media_data.get('mimetype') or media_data.get('mime_type', '')
                filename = media_data.get('filename', '')
                
                logger.info(f"üìÑ Documento recebido - Tipo: {mimetype}, Nome: {filename}")
                logger.debug(f"Dados do documento: {list(media_data.keys()) if isinstance(media_data, dict) else 'N/A'}")
                
                if mimetype == 'application/pdf' or filename.lower().endswith('.pdf'):
                    logger.info("üìë Iniciando processamento de PDF...")
                    # Processar PDF com OCR se necess√°rio
                    result = await self._process_pdf_with_ocr(media_data)
                    
                    if result:
                        logger.info(f"‚úÖ PDF processado com sucesso. Status: {result.get('analysis_status', 'completed')}")
                    else:
                        logger.warning("‚ö†Ô∏è Processamento de PDF retornou resultado vazio")
                    
                    return result
                else:
                    logger.info(f"‚ùå Tipo de documento n√£o suportado: {mimetype}")
                    return {
                        "media_received": "document",
                        "mimetype": mimetype,
                        "filename": filename,
                        "analysis_status": "unsupported_type",
                        "suggestion": "Pode mandar um PDF ou foto da conta de luz? Assim calculo sua economia! üì∏"
                    }
            elif media_type == "buffered":
                # Tipo buffered pode conter diferentes tipos de m√≠dia
                logger.info("Processando m√≠dia do tipo buffered...")
                
                # Tentar extrair o tipo real da m√≠dia
                if isinstance(media_data, dict):
                    actual_type = media_data.get('type', 'unknown')
                    logger.info(f"Tipo real da m√≠dia buffered: {actual_type}")
                    
                    # Reprocessar com o tipo correto
                    if actual_type in ["image", "audio", "document"]:
                        return await self._process_media(actual_type, media_data)
                    else:
                        logger.warning(f"Tipo de m√≠dia buffered n√£o reconhecido: {actual_type}")
                        return {
                            "media_received": "buffered",
                            "actual_type": actual_type,
                            "analysis_pending": True
                        }
                else:
                    logger.warning("Dados de m√≠dia buffered inv√°lidos")
                    return None
            else:
                logger.warning(f"‚ùå Tipo de m√≠dia n√£o suportado: {media_type}")
                return {
                    "media_received": media_type,
                    "analysis_status": "unsupported_media_type",
                    "suggestion": "Manda uma imagem, PDF ou √°udio que eu processo pra voc√™! üòä"
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar m√≠dia: {e}", exc_info=True)
            return {
                "media_received": media_type,
                "analysis_status": "error",
                "error": str(e),
                "suggestion": "Opa, deu um probleminha ao processar seu arquivo! üòÖ Tenta mandar de novo?"
            }
    
    def _update_lead_info(self, analysis: Dict[str, Any], agent: Agent, session_state: Dict[str, Any]):
        """Atualiza informa√ß√µes do lead baseado na an√°lise"""
        lead_info = session_state.get("lead_info", {})
        
        # Extrai informa√ß√µes chave
        key_info = analysis.get("key_info", [])
        
        # Lista de palavras comuns que N√ÉO s√£o nomes
        palavras_comuns = [
            "oi", "ol√°", "ola", "sim", "n√£o", "nao", "ok", "okay", "blz", "beleza",
            "voltei", "volto", "aqui", "ali", "tudo", "bem", "bom", "boa", "dia", 
            "tarde", "noite", "obrigado", "obrigada", "valeu", "vlw", "pra", "para",
            "com", "sem", "mais", "menos", "muito", "pouco", "agora", "depois",
            "antes", "sempre", "nunca", "talvez", "quero", "queria", "pode", "posso"
        ]
        
        # Verifica se estamos esperando o nome (ap√≥s pergunta espec√≠fica)
        conversation_history = session_state.get("conversation_history", [])
        esperando_nome = False
        
        # Verifica se a √∫ltima mensagem do assistente perguntou o nome
        if len(conversation_history) >= 2:
            ultima_msg_assistente = conversation_history[-2] if conversation_history[-1]["role"] == "user" else None
            if ultima_msg_assistente and ultima_msg_assistente["role"] == "assistant":
                msg_content = ultima_msg_assistente["content"].lower()
                if any(frase in msg_content for frase in ["como posso te chamar", "qual √© o seu nome", "me diz seu nome", "como voc√™ se chama"]):
                    esperando_nome = True
        
        # Verifica se a mensagem √© simplesmente um nome (resposta √† pergunta sobre nome)
        message = conversation_history[-1].get("content", "") if conversation_history else ""
        if message and esperando_nome and session_state.get("current_stage") == "IDENTIFICATION":
            # Remove pontua√ß√£o e espa√ßos extras
            possible_name = message.strip().strip(".,!?").title()
            
            # Verifica se √© uma palavra v√°lida para nome
            if (possible_name and 
                len(possible_name) > 2 and 
                possible_name[0].isupper() and
                possible_name.lower() not in palavras_comuns and
                not any(char.isdigit() for char in possible_name)):
                
                lead_info["name"] = possible_name
                logger.info(f"Nome identificado pela resposta direta: {possible_name}")
        
        for info in key_info:
            info_lower = info.lower()
            
            # Extrai nome apenas com valida√ß√£o rigorosa
            if "nome:" in info_lower:
                # Extrai o nome ap√≥s "nome:"
                name = info.split(":")[-1].strip().strip(".,!?")
                if (name and 
                    len(name) > 2 and 
                    name.lower() not in ["o lead", "do lead", "usu√°rio"] and
                    name.lower() not in palavras_comuns and
                    not any(char.isdigit() for char in name)):
                    lead_info["name"] = name.title()
                    logger.info(f"Nome identificado: {name}")
            elif any(word in info_lower for word in ["chamo", "sou o", "sou a", "meu nome"]):
                # Tenta extrair o nome de outras formas
                words = info.split()
                for i, word in enumerate(words):
                    if word.lower() in ["chamo", "sou", "nome"] and i + 1 < len(words):
                        name = words[i + 1].strip(".,!?")
                        if (name and 
                            len(name) > 2 and
                            name.lower() not in palavras_comuns and
                            not any(char.isdigit() for char in name)):
                            lead_info["name"] = name.title()
                            logger.info(f"Nome identificado: {name}")
                            break
            
            # Extrai tipo de im√≥vel
            elif any(word in info_lower for word in ["casa", "apartamento", "resid√™ncia", "comercial", "empresa"]):
                if "casa" in info_lower:
                    lead_info["property_type"] = "casa"
                elif "apartamento" in info_lower or "ap" in info_lower.split():
                    lead_info["property_type"] = "apartamento"
                elif "empresa" in info_lower or "comercial" in info_lower:
                    lead_info["property_type"] = "comercial"
                else:
                    lead_info["property_type"] = info
            
            # Extrai valor da conta
            elif "r$" in info_lower or any(char.isdigit() for char in info):
                import re
                # Extrai valores monet√°rios
                money_pattern = r'R\$?\s*(\d+(?:\.\d{3})*(?:,\d{2})?)'
                matches = re.findall(money_pattern, info, re.IGNORECASE)
                if matches:
                    lead_info["bill_value"] = f"R$ {matches[0]}"
                else:
                    # Tenta extrair apenas n√∫meros
                    numbers = re.findall(r'\d+', info)
                    if numbers:
                        lead_info["bill_value"] = f"R$ {numbers[0]}"
            
            # Extrai email
            elif "@" in info and "." in info:
                import re
                email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
                matches = re.findall(email_pattern, info)
                if matches:
                    lead_info["email"] = matches[0].lower()
                    logger.info(f"Email identificado: {matches[0]}")
        
        # Verifica tamb√©m email na mensagem completa
        if "email" not in lead_info and message:
            import re
            email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
            matches = re.findall(email_pattern, message)
            if matches:
                lead_info["email"] = matches[0].lower()
                logger.info(f"Email identificado na mensagem: {matches[0]}")
        
        # Adiciona timestamp
        lead_info["last_interaction"] = datetime.now().isoformat()
        
        # Atualiza no estado da sess√£o
        session_state["lead_info"] = lead_info
        
        # Se temos email e estamos em SCHEDULING, tentar criar reuni√£o no Calendar
        if (lead_info.get("email") and 
            session_state.get("current_stage") == "SCHEDULING" and
            self.calendar_service):
            asyncio.create_task(self._try_schedule_meeting(lead_info, session_state, message))
    
    def _should_use_example(self, analysis: Dict[str, Any]) -> bool:
        """Determina se deve usar resposta de exemplo"""
        intent = analysis.get("intent", "").lower()
        triggers = ["custo", "pre√ßo", "valor", "funciona", "manuten√ß√£o", "caro"]
        return any(trigger in intent for trigger in triggers)
    
    def _get_relevant_example(self, analysis: Dict[str, Any]) -> Optional[str]:
        """Obt√©m exemplo relevante baseado na an√°lise"""
        intent = analysis.get("intent", "").lower()
        
        if "caro" in intent or "custo" in intent:
            return get_example_response("cost_concern")
        elif "funciona" in intent:
            return get_example_response("how_it_works")
        elif "manuten√ß√£o" in intent:
            return get_example_response("maintenance_concern")
        
        return None
    
    async def _analyze_image_with_gemini(
        self, 
        image_data: Any, 
        analysis_prompt: str
    ) -> Optional[Dict[str, Any]]:
        """Analisa imagem usando Gemini 2.5 Pro Vision"""
        try:
            logger.info("üîç Iniciando an√°lise de imagem com Gemini...")
            
            # Criar imagem AGnO usando m√©todo auxiliar
            agno_image = self._create_agno_image(image_data)
            
            if not agno_image:
                logger.error("‚ùå N√£o foi poss√≠vel criar objeto Image AGnO")
                return None
            
            logger.success("‚úÖ Objeto Image AGnO criado com sucesso")
            
            # Executar an√°lise usando o agente principal com prompt espec√≠fico
            logger.info("üì° Enviando imagem para API do Gemini Vision...")
            
            # Criar prompt combinado para an√°lise
            combined_prompt = f"""Voc√™ √© um assistente especializado em an√°lise de contas de energia.
            
{analysis_prompt}

IMPORTANTE: Retorne APENAS um JSON v√°lido, sem texto adicional antes ou depois."""
            
            # Criar agente tempor√°rio para an√°lise de vis√£o
            vision_agent = Agent(
                name="Analisador Vision Gemini",
                description="Analisador de imagens de contas de luz",
                instructions="Analise imagens e retorne APENAS JSON estruturado, sem texto adicional.",
                model=self.model,  # Gemini 2.5 Pro
                reasoning=False  # Desabilitar reasoning para resposta direta
            )
            
            # Executar an√°lise com timeout de 60 segundos
            logger.info("üöÄ Executando an√°lise da imagem...")
            try:
                result = await asyncio.wait_for(
                    asyncio.to_thread(
                        vision_agent.run,
                        combined_prompt,
                        images=[agno_image]  # Passar objeto Image do AGnO
                    ),
                    timeout=60.0  # 60 segundos de timeout para an√°lise de imagem
                )
            except asyncio.TimeoutError:
                logger.error("‚è±Ô∏è Timeout ao analisar imagem com Gemini ap√≥s 60 segundos")
                raise Exception("Timeout na an√°lise da imagem. Por favor, tente novamente.")
            
            logger.info(f"üìù Resposta bruta do Gemini: {result[:200]}..." if result else "‚ùå Resposta vazia")
            
            # Parsear resultado JSON
            parsed_result = self._parse_vision_result(result)
            
            if parsed_result:
                logger.success("‚úÖ Imagem analisada com sucesso pelo Gemini!")
                logger.info(f"üìä Dados estruturados extra√≠dos: {list(parsed_result.keys())}")
                return parsed_result
            else:
                logger.warning("‚ö†Ô∏è Gemini n√£o conseguiu extrair dados estruturados da imagem")
                return None
            
        except Exception as e:
            logger.error(f"Erro ao analisar imagem com Gemini: {e}")
            # Tentar fallback com OpenAI se dispon√≠vel
            if self.fallback_model and self.config.enable_fallback:
                logger.info("Tentando an√°lise de imagem com OpenAI GPT-4.1-nano...")
                return await self._analyze_image_with_openai(image_data, analysis_prompt)
            return None
    
    async def _analyze_audio_with_gemini(
        self,
        audio_data: Any,
        analysis_prompt: str
    ) -> Optional[Dict[str, Any]]:
        """Analisa √°udio usando Gemini 2.5 Pro"""
        try:
            logger.info("üéµ Iniciando an√°lise de √°udio com Gemini...")
            
            # Criar objeto Audio do AGnO
            agno_audio = await self._create_agno_audio(audio_data)
            
            if not agno_audio:
                logger.error("‚ùå N√£o foi poss√≠vel criar objeto Audio AGnO")
                return None
            
            logger.success("‚úÖ Objeto Audio AGnO criado com sucesso")
            
            # Criar agente para an√°lise de √°udio
            audio_agent = Agent(
                name="Analisador de √Åudio Gemini",
                description="Transcritor e analisador de √°udio",
                instructions="Transcreva √°udios e retorne an√°lise estruturada em JSON.",
                model=self.model,  # Gemini 2.5 Pro
                reasoning=False
            )
            
            # Executar an√°lise com timeout de 60 segundos
            logger.info("üöÄ Executando an√°lise do √°udio...")
            try:
                result = await asyncio.wait_for(
                    asyncio.to_thread(
                        audio_agent.run,
                        analysis_prompt,
                        audio=[agno_audio]  # Passar objeto Audio
                    ),
                    timeout=60.0  # 60 segundos de timeout para an√°lise de √°udio
                )
            except asyncio.TimeoutError:
                logger.error("‚è±Ô∏è Timeout ao analisar √°udio com Gemini ap√≥s 60 segundos")
                raise Exception("Timeout na an√°lise do √°udio. Por favor, tente novamente.")
            
            logger.info(f"üìù Resposta do Gemini: {result[:200]}..." if result else "‚ùå Resposta vazia")
            
            # Parsear resultado
            parsed_result = self._parse_audio_result(result)
            
            if parsed_result:
                logger.success("‚úÖ √Åudio analisado com sucesso!")
                return parsed_result
            else:
                logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel extrair dados do √°udio")
                return None
                
        except Exception as e:
            logger.error(f"Erro ao analisar √°udio: {e}")
            # Tentar fallback com OpenAI se dispon√≠vel
            if self.fallback_model and self.config.enable_fallback:
                logger.info("Tentando an√°lise de √°udio com OpenAI...")
                return await self._analyze_audio_with_openai(audio_data, analysis_prompt)
            return None
    
    async def _analyze_image_with_openai(
        self, 
        image_data: Any, 
        analysis_prompt: str
    ) -> Optional[Dict[str, Any]]:
        """Analisa imagem usando OpenAI GPT-4.1-nano Vision como fallback"""
        try:
            # Criar agente tempor√°rio com OpenAI para an√°lise
            openai_agent = Agent(
                name="Analisador Vision OpenAI",
                description="Analisador de imagens de contas de luz usando OpenAI",
                instructions="Analise imagens e retorne APENAS JSON estruturado, sem texto adicional.",
                model=self.fallback_model,  # OpenAI GPT-4.1-nano
                reasoning=False  # Desabilitar reasoning para resposta direta
            )
            
            # Criar imagem AGnO usando m√©todo auxiliar
            agno_image = self._create_agno_image(image_data)
            
            if not agno_image:
                logger.error("N√£o foi poss√≠vel criar objeto Image AGnO para OpenAI")
                return None
            
            # Executar an√°lise
            logger.info("Enviando imagem para an√°lise com OpenAI Vision...")
            result = await asyncio.to_thread(
                openai_agent.run,
                analysis_prompt,
                images=[agno_image]
            )
            
            # Parsear resultado
            parsed_result = self._parse_vision_result(result)
            
            if parsed_result:
                logger.info("Imagem analisada com sucesso pelo OpenAI")
                # Adicionar flag indicando que foi processado por fallback
                parsed_result['_processed_by'] = 'openai_fallback'
                return parsed_result
            
            return None
            
        except Exception as e:
            logger.error(f"Erro ao analisar imagem com OpenAI: {e}")
            return None
    
    def _create_agno_image(self, image_data: Any) -> Optional[Image]:
        """Cria objeto Image do AGnO a partir de diferentes formatos"""
        try:
            logger.info("üèóÔ∏è Criando objeto Image do AGnO...")
            
            # Importar validador
            from utils.image_validator import ImageValidator
            
            # Se j√° √© um objeto Image, retornar
            if isinstance(image_data, Image):
                logger.info("‚úÖ Dados j√° s√£o um objeto Image AGnO")
                return image_data
            
            # Validar dados da imagem primeiro
            if isinstance(image_data, dict):
                logger.info(f"üì¶ Processando dict com keys: {list(image_data.keys())}")
                
                # IMPORTANTE: Priorizar conte√∫do bin√°rio/base64 sobre URL
                # URLs do WhatsApp exigem autentica√ß√£o e n√£o funcionam com APIs externas
                
                # 1. Tentar usar conte√∫do bin√°rio direto primeiro
                if 'content' in image_data and image_data['content']:
                    logger.info("üîÑ Usando conte√∫do bin√°rio direto")
                    try:
                        content = image_data['content']
                        
                        # Validar que √© bytes real e n√£o string
                        if isinstance(content, str):
                            logger.warning("‚ö†Ô∏è Content √© string, convertendo para bytes")
                            try:
                                # Tentar decodificar como base64 primeiro
                                content = base64.b64decode(content)
                                logger.info("‚úÖ String era base64, decodificada com sucesso")
                            except:
                                # Se n√£o for base64, tentar como bytes diretos
                                content = content.encode('latin-1')
                                logger.info("‚úÖ String convertida para bytes (latin-1)")
                        
                        # Validar tamanho m√≠nimo
                        if len(content) < 100:
                            logger.error(f"‚ùå Conte√∫do muito pequeno: {len(content)} bytes")
                            return None
                        
                        logger.info(f"üì¶ Conte√∫do bin√°rio v√°lido: {len(content)} bytes")
                        
                        # Corrigir orienta√ß√£o se necess√°rio
                        img_bytes = ImageValidator.fix_image_orientation(content)
                        return Image(content=img_bytes)
                    except Exception as e:
                        logger.error(f"Erro ao processar conte√∫do bin√°rio: {e}")
                
                # 2. Tentar usar base64
                if 'base64' in image_data and image_data['base64']:
                    logger.info("üîÑ Usando base64")
                    try:
                        img_bytes = base64.b64decode(image_data['base64'])
                        # Corrigir orienta√ß√£o se necess√°rio
                        img_bytes = ImageValidator.fix_image_orientation(img_bytes)
                        return Image(content=img_bytes)
                    except Exception as e:
                        logger.error(f"Erro ao decodificar base64: {e}")
                
                # 3. Tentar ler de arquivo
                if 'path' in image_data and image_data['path']:
                    logger.info("üîÑ Lendo de arquivo")
                    try:
                        with open(image_data['path'], 'rb') as f:
                            img_bytes = f.read()
                        # Corrigir orienta√ß√£o se necess√°rio
                        img_bytes = ImageValidator.fix_image_orientation(img_bytes)
                        return Image(content=img_bytes)
                    except Exception as e:
                        logger.error(f"Erro ao ler arquivo de imagem: {e}")
                
                # 4. URL como √∫ltima op√ß√£o (provavelmente falhar√° com URLs do WhatsApp)
                if 'url' in image_data and image_data['url']:
                    logger.warning("‚ö†Ô∏è Tentando usar URL diretamente (pode falhar com URLs do WhatsApp)")
                    # Verificar se √© URL do WhatsApp
                    if 'whatsapp.net' in image_data['url'] or 'mmg.whatsapp.net' in image_data['url']:
                        logger.error("‚ùå URLs do WhatsApp requerem autentica√ß√£o e n√£o funcionam diretamente com APIs de vis√£o")
                        logger.info("üí° Use o conte√∫do bin√°rio ou base64 ao inv√©s da URL")
                        return None
                    return Image(url=image_data['url'])
                        
            elif isinstance(image_data, str):
                # String pode ser URL ou path
                if image_data.startswith('http'):
                    return Image(url=image_data)
                else:
                    # Validar se arquivo existe
                    import os
                    if os.path.exists(image_data):
                        try:
                            with open(image_data, 'rb') as f:
                                img_bytes = f.read()
                            img_bytes = ImageValidator.fix_image_orientation(img_bytes)
                            return Image(content=img_bytes)
                        except Exception as e:
                            logger.error(f"Erro ao ler arquivo: {e}")
                            return None
                    else:
                        logger.error(f"Arquivo n√£o encontrado: {image_data}")
                        return None
            
            logger.error(f"Formato de imagem n√£o reconhecido: {type(image_data)}")
            return None
            
        except Exception as e:
            logger.error(f"Erro ao criar Image AGnO: {e}")
            return None
    
    async def _create_agno_audio(self, audio_data: Any) -> Optional[Audio]:
        """Cria objeto Audio do AGnO a partir de diferentes formatos"""
        try:
            logger.info("üéµ Criando objeto Audio do AGnO...")
            
            # Se j√° √© um objeto Audio, retornar
            if isinstance(audio_data, Audio):
                logger.info("‚úÖ Dados j√° s√£o um objeto Audio AGnO")
                return audio_data
            
            # Processar diferentes formatos
            if isinstance(audio_data, dict):
                logger.info(f"üì¶ Processando dict com keys: {list(audio_data.keys())}")
                
                # Verificar se √© um objeto de metadados do WhatsApp
                if 'mediaKey' in audio_data or 'directPath' in audio_data:
                    logger.info("üîÑ Detectado √°udio do WhatsApp com metadados - baixando conte√∫do via Evolution API...")
                    
                    # Usar Evolution API para baixar o √°udio
                    try:
                        # Tentar baixar o √°udio usando a mediaKey ou directPath
                        base64_content = None
                        
                        if audio_data.get('url'):
                            # Primeiro tentar a URL se dispon√≠vel
                            logger.info(f"üì• Tentando baixar √°udio via URL: {audio_data['url'][:50]}...")
                            base64_content = await evolution_api.get_media_base64(
                                url=audio_data['url'],
                                media_key=audio_data.get('mediaKey'),
                                direct_path=audio_data.get('directPath'),
                                mimetype=audio_data.get('mimetype', 'audio/ogg')
                            )
                        elif audio_data.get('mediaKey'):
                            # Tentar com mediaKey se URL n√£o estiver dispon√≠vel
                            logger.info("üì• Tentando baixar √°udio via mediaKey...")
                            base64_content = await evolution_api.get_media_base64(
                                media_key=audio_data['mediaKey'],
                                direct_path=audio_data.get('directPath'),
                                mimetype=audio_data.get('mimetype', 'audio/ogg')
                            )
                        
                        if base64_content:
                            logger.success("‚úÖ √Åudio baixado com sucesso via Evolution API!")
                            audio_bytes = base64.b64decode(base64_content)
                            return Audio(content=audio_bytes)
                        else:
                            logger.error("‚ùå N√£o foi poss√≠vel baixar o conte√∫do do √°udio")
                            return None
                            
                    except Exception as e:
                        logger.error(f"‚ùå Erro ao baixar √°udio via Evolution API: {e}")
                        return None
                
                # Criar objeto Audio baseado no tipo
                elif 'url' in audio_data and audio_data['url']:
                    return Audio(url=audio_data['url'])
                elif 'base64' in audio_data:
                    try:
                        audio_bytes = base64.b64decode(audio_data['base64'])
                        return Audio(content=audio_bytes)
                    except Exception as e:
                        logger.error(f"Erro ao decodificar base64 do √°udio: {e}")
                        return None
                elif 'path' in audio_data:
                    # Ler arquivo de √°udio
                    try:
                        with open(audio_data['path'], 'rb') as f:
                            audio_bytes = f.read()
                        return Audio(content=audio_bytes)
                    except Exception as e:
                        logger.error(f"Erro ao ler arquivo de √°udio: {e}")
                        return None
                        
            elif isinstance(audio_data, str):
                # String pode ser URL ou path
                if audio_data.startswith('http'):
                    return Audio(url=audio_data)
                else:
                    # Assumir que √© um path
                    import os
                    if os.path.exists(audio_data):
                        with open(audio_data, 'rb') as f:
                            return Audio(content=f.read())
                    else:
                        logger.error(f"Arquivo de √°udio n√£o encontrado: {audio_data}")
                        return None
                        
            elif isinstance(audio_data, bytes):
                # Bytes diretos
                return Audio(content=audio_data)
            
            logger.error(f"Formato de √°udio n√£o suportado: {type(audio_data)}")
            return None
            
        except Exception as e:
            logger.error(f"Erro ao criar objeto Audio AGnO: {e}")
            return None
    
    def _parse_audio_result(self, result: Any) -> Optional[Dict[str, Any]]:
        """Parseia resultado da an√°lise de √°udio"""
        try:
            if not result:
                return None
            
            # Se j√° √© um dict, retornar
            if isinstance(result, dict):
                return result
            
            # Converter para string se necess√°rio
            result_str = str(result)
            
            # Tentar extrair JSON
            import re
            json_patterns = [
                r'\{[^{}]*\}',  # JSON simples
                r'\{.*?\}(?=\s*$)',  # JSON no final
                r'```json\s*(.*?)\s*```',  # JSON em markdown
                r'```\s*(.*?)\s*```',  # C√≥digo em markdown
            ]
            
            for pattern in json_patterns:
                matches = re.findall(pattern, result_str, re.DOTALL)
                if matches:
                    for match in matches:
                        try:
                            # Tentar parsear como JSON
                            parsed = json.loads(match)
                            # Adicionar transcri√ß√£o se n√£o existir
                            if 'transcription' not in parsed and result_str:
                                # Extrair texto antes do JSON como transcri√ß√£o
                                text_before_json = result_str[:result_str.find(match)].strip()
                                if text_before_json:
                                    parsed['transcription'] = text_before_json
                            return parsed
                        except:
                            continue
            
            # Se n√£o encontrou JSON, retornar como transcri√ß√£o
            return {
                "transcription": result_str,
                "analysis_status": "partial",
                "_raw_response": result_str
            }
            
        except Exception as e:
            logger.error(f"Erro ao parsear resultado de √°udio: {e}")
            return None
    
    async def _analyze_audio_with_openai(
        self,
        audio_data: Any,
        analysis_prompt: str
    ) -> Optional[Dict[str, Any]]:
        """Analisa √°udio usando OpenAI como fallback"""
        try:
            # OpenAI atualmente n√£o suporta √°udio diretamente no GPT-4
            # Retornar mensagem apropriada
            logger.warning("OpenAI GPT-4.1-nano n√£o suporta an√°lise de √°udio diretamente")
            return {
                "media_received": "audio",
                "analysis_status": "unsupported",
                "transcription": None,
                "user_message": "Poxa, ainda n√£o consigo ouvir √°udios! üôâ Mas se voc√™ escrever, eu respondo super r√°pido! üí¨",
                "_processed_by": "openai_fallback"
            }
            
        except Exception as e:
            logger.error(f"Erro no fallback de √°udio: {e}")
            return None
    
    def _parse_vision_result(self, result: Any) -> Optional[Dict[str, Any]]:
        """Parseia resultado da an√°lise de vis√£o"""
        try:
            # Extrair conte√∫do da resposta
            if hasattr(result, 'content'):
                content = result.content
            elif hasattr(result, 'messages') and result.messages:
                content = result.messages[-1].content
            else:
                content = str(result)
            
            # Limpar e parsear JSON
            content = content.strip()
            
            # Remover marcadores de c√≥digo se existirem
            if content.startswith("```json"):
                content = content[7:]
            if content.endswith("```"):
                content = content[:-3]
            content = content.strip()
            
            # Parsear JSON
            parsed = json.loads(content)
            
            # Normalizar valores monet√°rios se existirem
            if 'bill_value' in parsed and parsed['bill_value']:
                # Garantir formato correto do valor
                value = parsed['bill_value']
                if not value.startswith('R$'):
                    value = f"R$ {value}"
                parsed['bill_value'] = value
            
            return parsed
            
        except json.JSONDecodeError as e:
            logger.error(f"Erro ao parsear JSON da an√°lise de vis√£o: {e}")
            logger.debug(f"Conte√∫do recebido: {content[:500] if 'content' in locals() else 'N/A'}")
            return None
        except Exception as e:
            logger.error(f"Erro inesperado ao parsear resultado: {e}")
            return None
    
    async def _process_pdf_with_ocr(self, pdf_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Processa PDF usando capacidades nativas do Gemini 2.5 Pro"""
        try:
            logger.info("üìÑ Processamento de PDF iniciado - usando Gemini 2.5 Pro nativo")
            logger.debug(f"üîç Dados recebidos para processamento: {list(pdf_data.keys())}")
            
            # Preparar conte√∫do do PDF
            pdf_content = None
            temp_file_path = None
            
            try:
                # Primeiro tentar usar conte√∫do bin√°rio se dispon√≠vel
                if 'content' in pdf_data and pdf_data['content']:
                    logger.info("üì¶ Usando conte√∫do bin√°rio direto do PDF")
                    pdf_content = pdf_data['content']
                    if isinstance(pdf_content, bytes):
                        logger.info(f"‚úÖ Conte√∫do bin√°rio recebido: {len(pdf_content)} bytes")
                    else:
                        logger.warning("‚ö†Ô∏è Conte√∫do n√£o √© bytes, tentando converter...")
                        
                elif 'path' in pdf_data:
                    logger.info(f"üìÇ Processando PDF do caminho: {pdf_data['path']}")
                    if os.path.exists(pdf_data['path']):
                        with open(pdf_data['path'], 'rb') as f:
                            pdf_content = f.read()
                        logger.info(f"‚úÖ PDF lido com sucesso: {len(pdf_content)} bytes")
                    else:
                        logger.error(f"‚ùå Arquivo PDF n√£o encontrado: {pdf_data['path']}")
                        
                elif 'url' in pdf_data:
                    logger.info(f"üåê Baixando PDF da URL: {pdf_data['url']}")
                    
                    # Se for URL do WhatsApp, tentar usar Evolution API
                    if 'whatsapp.net' in pdf_data['url']:
                        logger.info("üì± URL do WhatsApp detectada - usando Evolution API")
                        
                        if hasattr(evolution_api, 'get_media_base64'):
                            # Tentar obter m√≠dia via Evolution API
                            media_data = await evolution_api.get_media_base64(
                                pdf_data.get('mediaKey', ''),
                                pdf_data.get('mimetype', 'application/pdf')
                            )
                            if media_data and 'base64' in media_data:
                                pdf_content = base64.b64decode(media_data['base64'])
                                logger.info(f"‚úÖ PDF obtido via Evolution API: {len(pdf_content)} bytes")
                            else:
                                logger.warning("‚ö†Ô∏è Falha ao obter PDF via Evolution API")
                    
                    # Fallback: tentar download direto com aiohttp
                    if not pdf_content:
                        import aiohttp
                        try:
                            async with aiohttp.ClientSession() as session:
                                async with session.get(pdf_data['url'], ssl=False) as response:
                                    pdf_content = await response.read()
                                    logger.info(f"‚úÖ PDF baixado diretamente: {len(pdf_content)} bytes")
                        except Exception as e:
                            logger.error(f"‚ùå Erro ao baixar PDF: {e}")
                            
                elif 'base64' in pdf_data:
                    logger.info("üîê Decodificando PDF de base64")
                    pdf_content = base64.b64decode(pdf_data['base64'])
                    
                if not pdf_content:
                    logger.error("‚ùå N√£o foi poss√≠vel obter conte√∫do do PDF")
                    raise ValueError("Conte√∫do do PDF vazio")
                
                # Salvar temporariamente para processamento
                import tempfile
                import os
                
                with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_file:
                    tmp_file.write(pdf_content)
                    temp_file_path = tmp_file.name
                    logger.info(f"üíæ PDF salvo temporariamente em: {temp_file_path}")
                
                # Criar prompt espec√≠fico para an√°lise de conta de luz
                analysis_prompt = """Analise esta conta de energia el√©trica e extraia IMEDIATAMENTE as seguintes informa√ß√µes:

1. Valor total da fatura (em R$)
2. Consumo em kWh
3. M√™s/Ano de refer√™ncia
4. Nome do titular da conta
5. Endere√ßo completo
6. CPF ou CNPJ
7. Nome da distribuidora de energia
8. Hist√≥rico de consumo (se dispon√≠vel)

IMPORTANTE: Retorne APENAS um JSON v√°lido com essas informa√ß√µes, sem texto adicional.
Formato esperado:
{
    "bill_value": "valor em reais",
    "consumption_kwh": "consumo em kWh",
    "reference_period": "m√™s/ano",
    "customer_name": "nome do titular",
    "address": "endere√ßo completo",
    "document": "CPF ou CNPJ",
    "distributor": "nome da distribuidora",
    "consumption_history": []
}

Se alguma informa√ß√£o n√£o estiver dispon√≠vel, use null."""

                logger.info("ü§ñ Criando agente para an√°lise do PDF")
                
                # Criar agente tempor√°rio para an√°lise
                vision_agent = Agent(
                    name="Analisador PDF Gemini",
                    description="Analisador de contas de luz em PDF",
                    instructions="Analise documentos e retorne APENAS JSON estruturado, sem texto adicional.",
                    model=self.model,  # Gemini 2.5 Pro
                    reasoning=False  # Desabilitar reasoning para resposta direta
                )
                
                # Processar PDF diretamente com Gemini
                # O Gemini 2.5 Pro suporta PDFs nativamente
                logger.info("üöÄ Enviando PDF para an√°lise com Gemini 2.5 Pro...")
                
                # Converter PDF em imagem se o processamento direto falhar
                try:
                    # Primeiro, tentar processar o PDF diretamente como arquivo
                    # Gemini pode processar PDFs, mas √†s vezes funciona melhor convertendo para imagem
                    result = await self._process_pdf_as_image_fallback(temp_file_path, analysis_prompt)
                    
                    if result:
                        logger.success("‚úÖ PDF processado com sucesso!")
                        return result
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Processamento direto falhou: {e}")
                
            finally:
                # Limpar arquivo tempor√°rio
                if temp_file_path and os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)
                    logger.debug(f"üßπ Arquivo tempor√°rio removido: {temp_file_path}")
            
            # Se chegou aqui, o processamento falhou
            logger.warning("‚ùå N√£o foi poss√≠vel processar o PDF")
            
            return {
                "media_received": "pdf",
                "analysis_status": "processing_failed",
                "suggestion": "Recebi o PDF! üìÑ Mas t√° um pouquinho pesado pra processar... Uma foto da conta funciona super bem tamb√©m! Quer tentar? üì±",
                "fallback": "request_image",
                "_attempted_methods": ["gemini_native", "pdf_to_image_conversion"]
            }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao processar PDF: {e}")
            return {
                "media_received": "pdf",
                "analysis_status": "error",
                "error": str(e),
                "suggestion": "Tive um probleminha ao abrir o PDF. üòÖ Que tal enviar uma foto da conta? Assim consigo analisar na hora! üì±"
            }
    
    async def _process_pdf_as_image_fallback(self, pdf_path: str, analysis_prompt: str) -> Optional[Dict[str, Any]]:
        """Processa PDF convertendo para imagem como fallback"""
        try:
            logger.info("üîÑ Tentando converter PDF para imagem...")
            
            # Tentar usar pdf2image se dispon√≠vel
            try:
                from pdf2image import convert_from_path
                import tempfile
                import os
                
                # Converter primeira p√°gina para imagem
                logger.info("üì∏ Convertendo primeira p√°gina do PDF para imagem...")
                images = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=200)
                
                if images:
                    # Salvar imagem temporariamente
                    with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as tmp_file:
                        images[0].save(tmp_file.name, 'JPEG', quality=95)
                        tmp_image_path = tmp_file.name
                        logger.info(f"‚úÖ Imagem criada: {tmp_image_path}")
                    
                    # Processar como imagem
                    image_data = {'path': tmp_image_path}
                    result = await self._analyze_image_with_gemini(image_data, analysis_prompt)
                    
                    # Limpar arquivo tempor√°rio
                    os.unlink(tmp_image_path)
                    
                    if result:
                        logger.success("‚úÖ PDF processado como imagem com sucesso!")
                        result['_processed_by'] = 'pdf2image_conversion'
                        result['_original_format'] = 'pdf'
                        return result
                        
            except ImportError:
                logger.warning("‚ö†Ô∏è pdf2image n√£o est√° instalado")
                
                # Tentar alternativa com Pillow se dispon√≠vel
                try:
                    from PIL import Image as PILImage
                    import fitz  # PyMuPDF
                    import tempfile
                    import os
                    
                    logger.info("üìë Tentando com PyMuPDF...")
                    
                    # Abrir PDF
                    pdf_document = fitz.open(pdf_path)
                    page = pdf_document[0]  # Primeira p√°gina
                    
                    # Renderizar p√°gina como imagem
                    mat = fitz.Matrix(2, 2)  # Zoom 2x para melhor qualidade
                    pix = page.get_pixmap(matrix=mat)
                    
                    # Salvar como imagem
                    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
                        pix.save(tmp_file.name)
                        tmp_image_path = tmp_file.name
                        logger.info(f"‚úÖ Imagem criada com PyMuPDF: {tmp_image_path}")
                    
                    pdf_document.close()
                    
                    # Processar como imagem
                    image_data = {'path': tmp_image_path}
                    result = await self._analyze_image_with_gemini(image_data, analysis_prompt)
                    
                    # Limpar arquivo tempor√°rio
                    os.unlink(tmp_image_path)
                    
                    if result:
                        logger.success("‚úÖ PDF processado com PyMuPDF!")
                        result['_processed_by'] = 'pymupdf_conversion'
                        result['_original_format'] = 'pdf'
                        return result
                        
                except ImportError:
                    logger.warning("‚ö†Ô∏è PyMuPDF tamb√©m n√£o est√° dispon√≠vel")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro no fallback de convers√£o: {e}")
            
        return None
    
    
    def _get_fallback_response(self) -> str:
        """Resposta de fallback em caso de erro"""
        import random
        responses = [
            "Opa, acho que me confundi um pouquinho aqui üòÖ Pode repetir? Prometo prestar mais aten√ß√£o!",
            "Hmm, n√£o entendi direito... ü§î Pode me explicar de outro jeito? √Äs vezes sou meio lerda!",
            "Desculpa, tive uma pequena confus√£o aqui! Vamos tentar de novo? üí´",
            "Eita, me perdi! üòÑ Pode repetir pra mim? Juro que agora vai!",
            "Xi, deu um branco aqui! üôà Me conta de novo que eu prometo caprichar na resposta!"
        ]
        return random.choice(responses)
    
    def _get_error_response(self) -> str:
        """Resposta de erro gen√©rica"""
        import random
        responses = [
            "Opa! Precisei dar uma paradinha t√©cnica aqui üõ†Ô∏è Mas j√°, j√° volto! Voc√™ pode tentar de novo em alguns segundinhos?",
            "Ih, o sistema deu uma travadinha... üòÖ Que tal a gente tentar de novo daqui a pouquinho? Prometo que vai funcionar!",
            "Puxa, t√¥ com uma lentid√£o aqui! üêå Me d√° um minutinho que j√° volto turbinada pra te ajudar!",
            "Ops, preciso de um segundinho pra organizar as coisas aqui! ‚è∞ Tenta de novo rapidinho?",
            "Eita, deu uma engasgada no sistema! ü§ñ Mas relaxa, daqui a pouco t√° tudo funcionando de novo!"
        ]
        return random.choice(responses)
    
    def _should_react_to_message(
        self, 
        message: str,
        analysis: Dict[str, Any],
        session_state: Dict[str, Any],
        media_type: Optional[str] = None
    ) -> Tuple[bool, Optional[str]]:
        """
        Determina se deve reagir √† mensagem e qual emoji usar
        
        Returns:
            Tuple[bool, Optional[str]]: (deve_reagir, emoji)
        """
        message_lower = message.lower()
        
        # Reagir apenas a conta de luz/documento com joinha
        if media_type in ["image", "document"]:
            return True, "üëç"
            
        # Reagir a agradecimentos com cora√ß√£o
        if any(word in message_lower for word in ["obrigado", "obrigada", "agrade√ßo", "valeu", "thanks"]):
            return True, "‚ù§Ô∏è"
                
        # N√£o reagir em outros casos
        return False, None
    
    def _calculate_qualification_score(self, lead_info: Dict[str, Any], session_state: Dict[str, Any]) -> Optional[int]:
        """Calcula score de qualifica√ß√£o do lead baseado nas informa√ß√µes coletadas"""
        score = 0
        
        # Informa√ß√µes b√°sicas (20 pontos)
        if lead_info.get("name"):
            score += 10
        if lead_info.get("email"):
            score += 10
        
        # Informa√ß√µes da propriedade (30 pontos)
        if lead_info.get("property_type"):
            score += 15
        if lead_info.get("address"):
            score += 15
        
        # Informa√ß√µes de consumo (30 pontos)
        if lead_info.get("bill_value"):
            score += 15
            # Bonus por conta alta
            bill_value = parse_brazilian_currency(lead_info["bill_value"])
            if bill_value is not None:
                if bill_value > 500:
                    score += 10
                elif bill_value > 300:
                    score += 5
            else:
                logger.debug(f"N√£o foi poss√≠vel processar valor da conta para lead score: '{lead_info.get('bill_value')}'")
        
        if lead_info.get("consumption_kwh"):
            score += 10
        
        # Progress√£o no funil (20 pontos)
        stage = session_state.get("current_stage", "")
        if stage == "QUALIFICATION":
            score += 10
        elif stage == "OBJECTION_HANDLING":
            score += 15
        elif stage == "SCHEDULING":
            score += 20
        
        return min(score, 100)  # M√°ximo 100 pontos
    
    async def start_conversation(self, phone_number: str) -> Tuple[str, Dict[str, Any]]:
        """Inicia uma nova conversa"""
        # Obt√©m ou cria agente para este telefone
        agent = self._get_or_create_agent(phone_number)
        
        # Reseta o estado da sess√£o
        session_state = {
            "lead_info": {"phone": format_phone_number(phone_number)},
            "current_stage": "INITIAL_CONTACT",
            "conversation_history": []
        }
        self._update_session_state(agent, session_state)
        
        # Gera mensagem de boas-vindas usando o agente
        greeting_prompt = f"""Inicie uma conversa como {self.config.personality.name}, consultora de energia solar.
        
        Use a mensagem de sauda√ß√£o padr√£o adaptando para um tom natural e amig√°vel.
        Mencione a economia de at√© 95% na conta de luz e pergunte sobre o interesse.
        Use no m√°ximo 1-2 emojis apropriados."""
        
        greeting = await self._run_agent(greeting_prompt, agent)
        
        # Adiciona ao hist√≥rico
        session_state["conversation_history"].append({
            "role": "assistant",
            "content": greeting,
            "timestamp": datetime.now().isoformat()
        })
        
        metadata = {
            "stage": session_state["current_stage"],
            "typing_delay": calculate_typing_delay(greeting),
            "is_new_conversation": True
        }
        
        return greeting, metadata
    
    async def handle_no_interest(self, phone_number: str) -> Tuple[str, Dict[str, Any]]:
        """Trata casos de n√£o interesse"""
        agent = self._get_or_create_agent(phone_number)
        session_state = self._get_session_state(agent)
        
        # Usa o agente para gerar despedida apropriada
        farewell_prompt = """O lead n√£o tem interesse em energia solar.
        Agrade√ßa educadamente, deixe a porta aberta para o futuro e deseje um bom dia.
        Seja breve e profissional."""
        
        farewell = await self._run_agent(farewell_prompt, agent)
        
        # Marca lead como n√£o interessado
        session_state["lead_info"]["interested"] = False
        session_state["lead_info"]["closed_at"] = datetime.now().isoformat()
        session_state["current_stage"] = "CLOSED"
        
        metadata = {
            "stage": "CLOSED",
            "lead_qualified": False,
            "reason": "no_interest"
        }
        
        return farewell, metadata
    
    def get_conversation_summary(self, phone_number: str) -> Dict[str, Any]:
        """Obt√©m resumo da conversa para relat√≥rios"""
        if phone_number in self.agents:
            agent = self.agents[phone_number]
            session_state = self._get_session_state(agent)
            
            return {
                "phone": phone_number,
                "lead_info": session_state.get("lead_info", {}),
                "current_stage": session_state.get("current_stage", "UNKNOWN"),
                "conversation_count": len(session_state.get("conversation_history", [])),
                "session_active": True,
                "last_interaction": session_state.get("lead_info", {}).get("last_interaction")
            }
        else:
            return {
                "phone": phone_number,
                "session_active": False
            }
    
    async def _update_kommo_on_stage_change(
        self,
        phone_number: str,
        old_stage: str,
        new_stage: str,
        session_state: Dict[str, Any],
        analysis: Dict[str, Any]
    ):
        """Atualiza Kommo CRM quando o est√°gio do lead muda"""
        try:
            lead_info = session_state.get("lead_info", {})
            
            # Mapear est√°gios do bot para status do Kommo
            stage_to_status = {
                "INITIAL_CONTACT": LeadStatus.NEW,
                "IDENTIFICATION": LeadStatus.NEW,
                "DISCOVERY": LeadStatus.IN_QUALIFICATION,
                "QUALIFICATION": LeadStatus.QUALIFIED,
                "OBJECTION_HANDLING": LeadStatus.IN_QUALIFICATION,
                "SCHEDULING": LeadStatus.MEETING_SCHEDULED
            }
            
            # Preparar dados do lead
            kommo_lead = KommoLead(
                name=lead_info.get("name", f"Lead WhatsApp {phone_number[-4:]}"),
                phone=phone_number,
                whatsapp=phone_number,
                email=lead_info.get("email"),
                qualification_score=self._calculate_qualification_score(lead_info, session_state),
                ai_notes=f"Est√°gio: {new_stage}\n{analysis.get('summary', '')}",
                tags=["WhatsApp Lead", f"Est√°gio: {new_stage}", "WhatsApp AI"]
            )
            
            # Adicionar informa√ß√µes espec√≠ficas por est√°gio
            if new_stage == "DISCOVERY" and lead_info.get("solution_type"):
                kommo_lead.solution_type = self._map_solution_type(lead_info["solution_type"])
                kommo_lead.tags.append(f"Solu√ß√£o: {lead_info['solution_type']}")
            
            # Sempre adicionar valor da conta se dispon√≠vel
            if lead_info.get("bill_value"):
                kommo_lead.energy_bill_value = lead_info["bill_value"]
                kommo_lead.tags.append(f"Conta: R$ {lead_info['bill_value']}")
            
            # Verificar se j√° existe lead
            existing_lead = await self.kommo_service.find_lead_by_whatsapp(phone_number)
            
            if existing_lead:
                # Atualizar lead existente
                lead_id = existing_lead["id"]
                await self.kommo_service.update_lead(lead_id, kommo_lead)
                
                # Mover para novo est√°gio se necess√°rio
                if new_stage != old_stage:
                    await self.kommo_service.move_lead_stage(
                        lead_id, 
                        stage_to_status.get(new_stage, LeadStatus.NEW)
                    )
                    
                logger.info(f"‚úÖ Lead {lead_id} atualizado no Kommo - Est√°gio: {new_stage}")
            else:
                # Criar novo lead
                if new_stage in ["IDENTIFICATION", "DISCOVERY", "QUALIFICATION"]:
                    result = await self.kommo_service.create_lead(kommo_lead)
                    if result:
                        logger.info(f"‚úÖ Novo lead criado no Kommo: {result.get('id')} - {kommo_lead.name}")
                        # Salvar ID do Kommo no session_state
                        session_state["kommo_lead_id"] = result.get("id")
                        
        except Exception as e:
            logger.error(f"‚ùå Erro ao atualizar Kommo: {e}")
            # N√£o falhar a conversa por erro no Kommo
    
    def _map_solution_type(self, solution_type: str) -> SolutionType:
        """Mapeia tipo de solu√ß√£o do bot para enum do Kommo"""
        mapping = {
            "usina pr√≥pria": SolutionType.USINA_PROPRIA,
            "usina parceira": SolutionType.USINA_PARCEIRA,
            "cons√≥rcio": SolutionType.CONSORCIO,
            "instala√ß√£o residencial": SolutionType.INSTALACAO_RESIDENCIAL,
            "instala√ß√£o comercial": SolutionType.INSTALACAO_COMERCIAL
        }
        return mapping.get(solution_type.lower(), SolutionType.USINA_PROPRIA)
    
    async def _get_available_meeting_times(self, date: datetime = None) -> List[Dict[str, Any]]:
        """Busca hor√°rios dispon√≠veis no Google Calendar"""
        try:
            if not self.calendar_service:
                logger.warning("Google Calendar n√£o dispon√≠vel")
                return []
            
            # Se n√£o foi fornecida data, usar pr√≥ximo dia √∫til
            if not date:
                date = datetime.now()
                # Avan√ßar para pr√≥ximo dia √∫til se for fim de semana
                while date.weekday() >= 5:  # S√°bado = 5, Domingo = 6
                    date += timedelta(days=1)
                # Se j√° passou das 17h, usar pr√≥ximo dia √∫til
                if date.hour >= 17:
                    date += timedelta(days=1)
                    while date.weekday() >= 5:
                        date += timedelta(days=1)
            
            # Buscar hor√°rios dispon√≠veis (9h √†s 18h)
            available_slots = await self.calendar_service.check_availability(
                date=date,
                duration_minutes=30,  # Reuni√µes de 30 minutos
                work_hours=(9, 18)    # Hor√°rio comercial
            )
            
            return available_slots
            
        except Exception as e:
            logger.error(f"Erro ao buscar hor√°rios dispon√≠veis: {e}")
            return []
    
    async def _suggest_available_times(self, date: datetime = None) -> str:
        """Formata e sugere hor√°rios dispon√≠veis para o usu√°rio"""
        try:
            available_slots = await self._get_available_meeting_times(date)
            
            if not available_slots:
                return "No momento n√£o encontrei hor√°rios dispon√≠veis. Que tal tentarmos outro dia?"
            
            # Formatar mensagem com hor√°rios dispon√≠veis
            message = "üóìÔ∏è *Hor√°rios dispon√≠veis para nossa reuni√£o:*\n\n"
            
            # Agrupar por dia
            slots_by_day = {}
            for slot in available_slots[:10]:  # Limitar a 10 op√ß√µes
                day = slot['datetime'][:10]
                if day not in slots_by_day:
                    slots_by_day[day] = []
                slots_by_day[day].append(slot)
            
            # Formatar por dia
            for day, day_slots in slots_by_day.items():
                date_obj = datetime.fromisoformat(day)
                day_name = date_obj.strftime('%A, %d/%m')
                message += f"*{day_name}:*\n"
                
                for slot in day_slots:
                    message += f"‚Ä¢ {slot['start']} √†s {slot['end']}\n"
                
                message += "\n"
            
            message += "Por favor, escolha o hor√°rio que melhor se adequa √† sua agenda! üòä"
            
            return message
            
        except Exception as e:
            logger.error(f"Erro ao sugerir hor√°rios: {e}")
            return "Desculpe, tive um problema ao buscar os hor√°rios. Vamos marcar manualmente?"
    
    async def _reschedule_meeting(self, event_id: str, new_datetime: datetime, session_state: Dict[str, Any]) -> bool:
        """Reagenda uma reuni√£o existente"""
        try:
            if not self.calendar_service or not event_id:
                return False
            
            # Calcular novo fim
            new_end = new_datetime + timedelta(minutes=30)
            
            # Atualizar evento
            result = await self.calendar_service.update_event(
                event_id=event_id,
                updates={
                    'start_datetime': new_datetime,
                    'end_datetime': new_end
                }
            )
            
            if result:
                # Atualizar session_state
                session_state["meeting_datetime"] = new_datetime.isoformat()
                logger.info(f"‚úÖ Reuni√£o reagendada para {new_datetime}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"Erro ao reagendar reuni√£o: {e}")
            return False
    
    async def _try_schedule_meeting(self, lead_info: Dict[str, Any], session_state: Dict[str, Any], message: str):
        """Tenta agendar reuni√£o no Google Calendar quando houver hor√°rio escolhido"""
        try:
            # Verificar se a mensagem cont√©m informa√ß√£o de hor√°rio
            import re
            from datetime import datetime, timedelta
            
            # Padr√µes para detectar hor√°rios
            time_patterns = [
                r'(\d{1,2})(?:h|:)?(\d{2})?\s*(?:horas?)?',  # 15h, 15:30, 15h30
                r'√†s\s*(\d{1,2})(?:h|:)?(\d{2})?',           # √†s 15h, √†s 15:30
                r'(\d{1,2})\s*(?:da\s*)?(manh√£|tarde|noite)'  # 9 da manh√£, 3 da tarde
            ]
            
            # Padr√µes para detectar dias
            day_patterns = {
                'hoje': 0,
                'amanh√£': 1,
                'depois de amanh√£': 2,
                'segunda': 'monday',
                'ter√ßa': 'tuesday',
                'quarta': 'wednesday',
                'quinta': 'thursday',
                'sexta': 'friday'
            }
            
            # Tentar extrair hor√°rio
            meeting_time = None
            for pattern in time_patterns:
                match = re.search(pattern, message.lower())
                if match:
                    hour = int(match.group(1))
                    minute = int(match.group(2)) if match.group(2) else 0
                    
                    # Ajustar para per√≠odo do dia se necess√°rio
                    if len(match.groups()) > 2 and match.group(3):
                        period = match.group(3)
                        if period == 'tarde' and hour < 12:
                            hour += 12
                        elif period == 'noite' and hour < 12:
                            hour += 12
                    
                    meeting_time = (hour, minute)
                    break
            
            if not meeting_time:
                logger.info("Hor√°rio n√£o detectado na mensagem, aguardando escolha clara")
                return
            
            # Determinar dia
            meeting_date = datetime.now()
            for day_word, day_value in day_patterns.items():
                if day_word in message.lower():
                    if isinstance(day_value, int):
                        meeting_date += timedelta(days=day_value)
                    else:
                        # Calcular pr√≥ximo dia da semana
                        days_ahead = 0
                        target_day = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'].index(day_value)
                        current_day = meeting_date.weekday()
                        days_ahead = (target_day - current_day) % 7
                        if days_ahead == 0:
                            days_ahead = 7  # Pr√≥xima semana
                        meeting_date += timedelta(days=days_ahead)
                    break
            
            # Criar datetime completo
            hour, minute = meeting_time
            meeting_datetime = meeting_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            # Verificar se √© hor√°rio comercial
            if not (9 <= hour <= 18):
                logger.warning(f"Hor√°rio fora do expediente: {hour}h")
                return
            
            # Criar reuni√£o no Google Calendar
            event_data = {
                'summary': f'Apresenta√ß√£o SolarPrime - {lead_info.get("name", "Lead WhatsApp")}',
                'description': f"""
                Reuni√£o de apresenta√ß√£o da solu√ß√£o SolarPrime
                
                Lead: {lead_info.get("name", "N/A")}
                Telefone: {lead_info.get("phone", "N/A")}
                Email: {lead_info.get("email", "N/A")}
                Valor da conta: {lead_info.get("bill_value", "N/A")}
                Tipo de solu√ß√£o: {lead_info.get("solution_type", "A definir")}
                
                Agendado via WhatsApp AI
                """,
                'start': meeting_datetime,
                'duration': 30,  # 30 minutos
                'attendees': [lead_info.get("email")],
                'location': 'Online - Link ser√° enviado por WhatsApp'
            }
            
            # Criar evento no Google Calendar se dispon√≠vel
            if self.calendar_service:
                # Calcular dura√ß√£o
                end_datetime = meeting_datetime + timedelta(minutes=event_data.get('duration', 30))
                
                # Chamar create_event com argumentos corretos
                result = await self.calendar_service.create_event(
                    title=event_data['title'],
                    start_datetime=event_data['start'],
                    end_datetime=end_datetime,
                    description=event_data.get('description'),
                    location=event_data.get('location'),
                    attendees=event_data.get('attendees', []),
                    lead_data=lead_info
                )
                
                if result and result.get('link'):
                    logger.info(f"‚úÖ Reuni√£o criada no Google Calendar: {result['link']}")
                    
                    # Salvar link no session_state
                    session_state["meeting_link"] = result['link']
                    session_state["meeting_datetime"] = meeting_datetime.isoformat()
                    session_state["meeting_event_id"] = result.get('id')  # Para futuro reagendamento
            else:
                logger.info("‚ÑπÔ∏è Google Calendar n√£o dispon√≠vel - reuni√£o ser√° gerenciada manualmente")
                # Salvar informa√ß√µes b√°sicas da reuni√£o
                session_state["meeting_datetime"] = meeting_datetime.isoformat()
                session_state["meeting_scheduled"] = True
                
                # Atualizar Kommo com link da reuni√£o
                if self.kommo_service and session_state.get("kommo_lead_id") and result:
                    await self.kommo_service.add_note(
                        session_state["kommo_lead_id"],
                        f"Reuni√£o agendada para {meeting_datetime.strftime('%d/%m/%Y √†s %H:%M')}\n"
                        f"Link do Calendar: {result.get('link', 'Link n√£o dispon√≠vel')}"
                    )
                    
                    # Adicionar link como campo customizado se dispon√≠vel
                    if hasattr(self.kommo_service, 'update_custom_field') and result.get('link'):
                        await self.kommo_service.update_custom_field(
                            session_state["kommo_lead_id"],
                            "google_calendar_link",
                            result['link']
                        )
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao agendar reuni√£o no Calendar: {e}")
            # N√£o falhar a conversa por erro no Calendar


# Fun√ß√£o helper para criar agente
def create_sdr_agent() -> SDRAgent:
    """Cria e retorna uma inst√¢ncia do agente SDR"""
    return SDRAgent()


# Exporta componentes
__all__ = ["SDRAgent", "create_sdr_agent"]