"""
Google Calendar Tools for SDR Agent
===================================
Ferramentas customizadas de Google Calendar para o agente SDR
Integra com AGnO Framework GoogleCalendarTools
"""

from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import asyncio
from loguru import logger
from agno.tools import tool
from agno.tools.googlecalendar import GoogleCalendarTools

from config.google_calendar_config import google_calendar_config
from services.google_calendar_service import get_google_calendar_service
from repositories.lead_repository import lead_repository


@tool
async def schedule_solar_meeting(
    lead_phone: str,
    date: str,
    time: str,
    lead_name: Optional[str] = None,
    meeting_type: str = "initial_meeting"
) -> Dict[str, Any]:
    """
    Agenda uma reuni√£o para apresenta√ß√£o da SolarPrime
    
    Args:
        lead_phone: Telefone do lead
        date: Data no formato DD/MM/YYYY
        time: Hor√°rio no formato HH:MM
        lead_name: Nome do lead (opcional)
        meeting_type: Tipo de reuni√£o (initial_meeting, follow_up_meeting, contract_signing)
    
    Returns:
        Dict com status do agendamento e link do evento
    """
    try:
        logger.info(f"üìÖ Agendando reuni√£o: {date} {time} para {lead_phone}")
        
        # Buscar dados do lead
        lead = await lead_repository.get_lead_by_phone(lead_phone)
        if not lead:
            return {
                "status": "erro",
                "mensagem": "Lead n√£o encontrado. Por favor, forne√ßa suas informa√ß√µes primeiro."
            }
        
        # Preparar dados do lead
        lead_data = {
            'id': str(lead.id),
            'name': lead_name or lead.name,
            'phone': lead_phone,
            'email': lead.email,
            'bill_value': lead.bill_value or 0,
            'consumption_kwh': lead.consumption_kwh or 0,
            'solution_interest': lead.solution_interest or 'A definir',
            'crm_link': lead.kommo_lead_id or '#'
        }
        
        # Converter data e hora
        try:
            # Parse da data brasileira
            day, month, year = date.split('/')
            hour, minute = time.split(':')
            
            meeting_datetime = datetime(
                int(year), int(month), int(day),
                int(hour), int(minute)
            )
            
            # Validar hor√°rio comercial
            if not _is_business_hours(meeting_datetime):
                return {
                    "status": "hor√°rio_inv√°lido",
                    "mensagem": "Por favor, escolha um hor√°rio entre 9h e 18h de segunda a sexta.",
                    "horarios_disponiveis": await get_available_slots(date)
                }
            
        except ValueError:
            return {
                "status": "erro",
                "mensagem": "Formato de data ou hora inv√°lido. Use DD/MM/AAAA e HH:MM"
            }
        
        # Obter servi√ßo do Google Calendar
        calendar_service = get_google_calendar_service()
        
        # Obter template
        template = google_calendar_config.get_event_template(meeting_type)
        
        # Formatar t√≠tulo e descri√ß√£o
        title = template['title'].format(lead_name=lead_data['name'])
        description = template['description'].format(**lead_data)
        
        # Criar evento
        event_result = await calendar_service.create_event(
            title=title,
            start_datetime=meeting_datetime,
            description=description,
            location=google_calendar_config.meeting_location,
            attendees=[lead.email] if lead.email else None,
            lead_data=lead_data
        )
        
        if event_result:
            # Atualizar lead com informa√ß√µes da reuni√£o
            await lead_repository.update_lead(
                lead_id=lead.id,
                meeting_scheduled_at=meeting_datetime,
                current_stage='MEETING_SCHEDULED',
                notes=f"Reuni√£o agendada para {date} √†s {time}"
            )
            
            return {
                "status": "sucesso",
                "mensagem": f"""‚úÖ Reuni√£o agendada com sucesso!

üìÖ Data: {date}
üïê Hor√°rio: {time}
üìç Local: {google_calendar_config.meeting_location}

Enviaremos lembretes:
- 1 dia antes
- 1 hora antes
- 15 minutos antes

Link do evento: {event_result['link']}""",
                "event_id": event_result['id'],
                "event_link": event_result['link']
            }
        else:
            return {
                "status": "erro",
                "mensagem": "N√£o foi poss√≠vel agendar a reuni√£o. Por favor, tente novamente."
            }
            
    except Exception as e:
        logger.error(f"Erro ao agendar reuni√£o: {e}")
        return {
            "status": "erro",
            "mensagem": "Ocorreu um erro ao agendar. Nosso time entrar√° em contato."
        }


@tool
async def reschedule_meeting(
    lead_phone: str,
    new_date: str,
    new_time: str,
    reason: Optional[str] = None
) -> Dict[str, Any]:
    """
    Reagenda uma reuni√£o existente
    
    Args:
        lead_phone: Telefone do lead
        new_date: Nova data no formato DD/MM/YYYY
        new_time: Novo hor√°rio no formato HH:MM
        reason: Motivo do reagendamento (opcional)
    
    Returns:
        Dict com status do reagendamento
    """
    try:
        logger.info(f"üîÑ Reagendando reuni√£o para {lead_phone}")
        
        # Buscar lead e evento atual
        lead = await lead_repository.get_lead_by_phone(lead_phone)
        if not lead or not lead.meeting_scheduled_at:
            return {
                "status": "erro",
                "mensagem": "N√£o encontrei uma reuni√£o agendada para reagendar."
            }
        
        # TODO: Buscar event_id do banco ou metadata
        # Por ora, vamos criar um novo evento
        
        # Converter nova data e hora
        try:
            day, month, year = new_date.split('/')
            hour, minute = new_time.split(':')
            
            new_datetime = datetime(
                int(year), int(month), int(day),
                int(hour), int(minute)
            )
            
        except ValueError:
            return {
                "status": "erro",
                "mensagem": "Formato de data ou hora inv√°lido. Use DD/MM/AAAA e HH:MM"
            }
        
        # Agendar nova reuni√£o
        result = await schedule_solar_meeting(
            lead_phone=lead_phone,
            date=new_date,
            time=new_time,
            lead_name=lead.name,
            meeting_type="follow_up_meeting"
        )
        
        if result['status'] == 'sucesso':
            # Adicionar informa√ß√£o sobre reagendamento
            result['mensagem'] = f"‚úÖ Reuni√£o reagendada com sucesso!\n\n{result['mensagem']}"
            
            # Registrar motivo se fornecido
            if reason:
                await lead_repository.update_lead(
                    lead_id=lead.id,
                    notes=f"Reuni√£o reagendada. Motivo: {reason}"
                )
        
        return result
        
    except Exception as e:
        logger.error(f"Erro ao reagendar reuni√£o: {e}")
        return {
            "status": "erro",
            "mensagem": "Ocorreu um erro ao reagendar. Por favor, tente novamente."
        }


@tool
async def cancel_meeting(
    lead_phone: str,
    reason: Optional[str] = None
) -> Dict[str, Any]:
    """
    Cancela uma reuni√£o agendada
    
    Args:
        lead_phone: Telefone do lead
        reason: Motivo do cancelamento (opcional)
    
    Returns:
        Dict com status do cancelamento
    """
    try:
        logger.info(f"‚ùå Cancelando reuni√£o para {lead_phone}")
        
        # Buscar lead
        lead = await lead_repository.get_lead_by_phone(lead_phone)
        if not lead or not lead.meeting_scheduled_at:
            return {
                "status": "erro",
                "mensagem": "N√£o encontrei uma reuni√£o agendada para cancelar."
            }
        
        # TODO: Implementar cancelamento real no Google Calendar
        # Por ora, apenas atualizar o banco
        
        # Atualizar lead
        await lead_repository.update_lead(
            lead_id=lead.id,
            meeting_scheduled_at=None,
            current_stage='QUALIFICATION',
            notes=f"Reuni√£o cancelada. Motivo: {reason or 'N√£o especificado'}"
        )
        
        return {
            "status": "sucesso",
            "mensagem": """‚ùå Reuni√£o cancelada.

Que pena! Quando quiser remarcar, √© s√≥ me avisar.
Estou aqui para ajudar voc√™ a economizar na conta de luz! ‚òÄÔ∏è"""
        }
        
    except Exception as e:
        logger.error(f"Erro ao cancelar reuni√£o: {e}")
        return {
            "status": "erro",
            "mensagem": "Ocorreu um erro ao cancelar. Por favor, tente novamente."
        }


@tool
async def get_available_slots(date: str) -> List[str]:
    """
    Retorna hor√°rios dispon√≠veis para agendamento em uma data
    
    Args:
        date: Data no formato DD/MM/YYYY
    
    Returns:
        Lista de hor√°rios dispon√≠veis no formato HH:MM
    """
    try:
        # Converter data
        day, month, year = date.split('/')
        target_date = datetime(int(year), int(month), int(day))
        
        # Obter servi√ßo
        calendar_service = get_google_calendar_service()
        
        # Buscar disponibilidade
        available_slots = await calendar_service.check_availability(
            date=target_date,
            duration_minutes=google_calendar_config.default_meeting_duration,
            work_hours=(
                google_calendar_config.business_hours_start,
                google_calendar_config.business_hours_end
            )
        )
        
        # Formatar slots
        return [slot['start'] for slot in available_slots]
        
    except Exception as e:
        logger.error(f"Erro ao buscar hor√°rios dispon√≠veis: {e}")
        # Retornar hor√°rios padr√£o se falhar
        return [
            "09:00", "10:00", "11:00",
            "14:00", "15:00", "16:00", "17:00"
        ]


@tool
async def check_next_meeting(lead_phone: str) -> Dict[str, Any]:
    """
    Verifica a pr√≥xima reuni√£o agendada para um lead
    
    Args:
        lead_phone: Telefone do lead
    
    Returns:
        Dict com informa√ß√µes da pr√≥xima reuni√£o
    """
    try:
        lead = await lead_repository.get_lead_by_phone(lead_phone)
        
        if not lead or not lead.meeting_scheduled_at:
            return {
                "status": "sem_reuni√£o",
                "mensagem": "Voc√™ ainda n√£o tem reuni√£o agendada. Quer agendar agora?"
            }
        
        # Verificar se a reuni√£o √© futura
        if lead.meeting_scheduled_at > datetime.now():
            return {
                "status": "agendada",
                "data": lead.meeting_scheduled_at.strftime("%d/%m/%Y"),
                "horario": lead.meeting_scheduled_at.strftime("%H:%M"),
                "mensagem": f"""üìÖ Sua reuni√£o est√° agendada:

Data: {lead.meeting_scheduled_at.strftime("%d/%m/%Y")}
Hor√°rio: {lead.meeting_scheduled_at.strftime("%H:%M")}
Local: {google_calendar_config.meeting_location}

Precisa reagendar?"""
            }
        else:
            return {
                "status": "passada",
                "mensagem": "Sua reuni√£o j√° passou. Gostaria de agendar uma nova?"
            }
            
    except Exception as e:
        logger.error(f"Erro ao verificar reuni√£o: {e}")
        return {
            "status": "erro",
            "mensagem": "N√£o consegui verificar sua reuni√£o. Tente novamente."
        }


def _is_business_hours(dt: datetime) -> bool:
    """Verifica se o hor√°rio est√° dentro do expediente"""
    # Verificar dia da semana (0 = segunda, 6 = domingo)
    if dt.weekday() not in google_calendar_config.business_days:
        return False
    
    # Verificar hor√°rio
    hour = dt.hour
    return (
        google_calendar_config.business_hours_start <= hour < 
        google_calendar_config.business_hours_end
    )


# Exportar tools para uso no agente
calendar_tools = [
    schedule_solar_meeting,
    reschedule_meeting,
    cancel_meeting,
    get_available_slots,
    check_next_meeting
]