"""
Agente SDR Demo - SolarPrime
============================
Vers√£o de demonstra√ß√£o sem necessidade de API key
"""

import json
import asyncio
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime
from loguru import logger
import random

# Configura√ß√µes locais
from config.agent_config import config, get_config
from utils.helpers import calculate_typing_delay, format_phone_number


class DemoSDRAgent:
    """Agente SDR de demonstra√ß√£o para testes sem API key"""
    
    def __init__(self):
        """Inicializa o agente demo"""
        self.config = get_config()
        self.current_stage = "INITIAL_CONTACT"
        self.lead_info = {}
        self.conversation_history = {}
        
        # Respostas pr√©-definidas para demo
        self.demo_responses = {
            "greeting": [
                f"Ol√°! üëã Sou a {self.config.personality.name} da {self.config.personality.company}!\n\nEstou entrando em contato porque temos uma oportunidade incr√≠vel de economia na sua conta de energia atrav√©s da energia solar.\n\nVoc√™ tem interesse em conhecer como pode economizar at√© 95% na sua conta de luz? ‚òÄÔ∏è",
                f"Oi! Tudo bem? üòä Aqui √© a {self.config.personality.name} da {self.config.personality.company}.\n\nVi que voc√™ tem interesse em economizar na conta de luz! Com energia solar, voc√™ pode reduzir at√© 95% do valor.\n\nPosso te explicar como funciona?",
            ],
            "interest": [
                "Que √≥timo! üòä Fico feliz com seu interesse!\n\nA energia solar √© uma das melhores formas de economizar hoje em dia. Antes de te explicar melhor, voc√™ mora em casa ou apartamento?",
                "Maravilha! A energia solar realmente √© um excelente investimento.\n\nPara eu te apresentar a melhor solu√ß√£o, me conta: voc√™ √© propriet√°rio(a) do im√≥vel?",
            ],
            "no_interest": [
                "Entendo perfeitamente! Agrade√ßo sua aten√ß√£o.\n\nCaso mude de ideia ou queira saber mais sobre energia solar no futuro, estarei sempre √† disposi√ß√£o.\n\nTenha um excelente dia! üòä",
                "Sem problemas! Obrigada pelo seu tempo.\n\nSe precisar de informa√ß√µes sobre energia solar no futuro, pode me procurar. Sucesso! üåü",
            ],
            "cost_concern": [
                "Entendo sua preocupa√ß√£o! Na verdade, a energia solar hoje est√° muito mais acess√≠vel.\n\nTemos op√ß√µes de financiamento onde a parcela fica menor que sua economia mensal. Ou seja, voc√™ come√ßa a economizar desde o primeiro m√™s! üí∞\n\nQual o valor m√©dio da sua conta de luz hoje?",
                "√ìtima pergunta! O investimento inicial pode parecer alto, mas pense assim:\n\n‚úÖ Retorno em 3-4 anos\n‚úÖ 25+ anos de energia gr√°tis\n‚úÖ Valoriza√ß√£o do im√≥vel\n‚úÖ Financiamento com parcelas menores que a economia\n\nVale muito a pena! Posso fazer uma simula√ß√£o para voc√™?",
            ],
            "how_it_works": [
                "Claro! √â bem simples:\n\n1Ô∏è‚É£ Instalamos pain√©is solares no seu telhado\n2Ô∏è‚É£ Eles captam a luz do sol e geram energia\n3Ô∏è‚É£ Voc√™ usa essa energia na sua casa\n4Ô∏è‚É£ O excesso vai para a rede e gera cr√©ditos\n5Ô∏è‚É£ √Ä noite voc√™ usa os cr√©ditos acumulados\n\nTudo isso reduz sua conta em at√© 95%! Legal, n√©?",
                "Com prazer! O sistema funciona assim:\n\n‚òÄÔ∏è Durante o dia, os pain√©is geram energia\nüè† Sua casa consome direto dos pain√©is\nüîå O excedente gera cr√©ditos na distribuidora\nüåô √Ä noite, voc√™ usa os cr√©ditos\nüí∞ Economia de at√© 95% todo m√™s!\n\n√â totalmente automatizado e monitorado por app!",
            ],
            "property_info": [
                "Perfeito! {property_type} √© ideal para energia solar!\n\nAgora me conta: qual o valor m√©dio da sua conta de energia?",
                "Excelente! Em {property_type} a instala√ß√£o √© ainda mais simples.\n\nPara fazer uma proposta personalizada, preciso saber: sua conta de luz vem em torno de quanto por m√™s?",
            ],
            "bill_value": [
                "R$ {value}? Excelente! Com esse consumo, voc√™ tem um potencial de economia muito bom! üí∞\n\nCom energia solar, essa conta pode cair para apenas R$ {savings}!\n\nGostaria de receber uma proposta personalizada sem compromisso?",
                "Perfeito! Com uma conta de R$ {value}, voc√™ economizaria cerca de R$ {yearly} por ano!\n\nIsso d√° quase {months} meses de conta gr√°tis por ano! üéâ\n\nQue tal agendarmos uma conversa com nosso consultor para ver a melhor solu√ß√£o?",
            ],
            "scheduling": [
                "Maravilha! Vou agendar uma conversa com nosso especialista.\n\nüìÖ Quando seria melhor para voc√™?\n- Amanh√£ √†s 10h ou 14h?\n- Quinta-feira √†s 9h ou 16h?\n\nOu prefere sugerir outro hor√°rio?",
                "√ìtimo! Nosso consultor vai adorar conversar com voc√™!\n\nQual per√≠odo funciona melhor:\nüåÖ Manh√£ (9h-12h)\n‚òÄÔ∏è Tarde (14h-18h)\n\nE qual dia da semana?",
            ],
            "default": [
                "Interessante sua pergunta! Para te dar uma resposta mais precisa, me conta um pouco mais sobre o que voc√™ gostaria de saber?",
                "Boa pergunta! Cada caso √© √∫nico, mas posso te ajudar. O que especificamente voc√™ gostaria de entender melhor?",
            ]
        }
        
        logger.info(f"Demo SDR Agent '{self.config.personality.name}' inicializado")
    
    def _get_demo_response(self, category: str, **kwargs) -> str:
        """Retorna uma resposta demo baseada na categoria"""
        responses = self.demo_responses.get(category, self.demo_responses["default"])
        response = random.choice(responses)
        
        # Substitui placeholders
        for key, value in kwargs.items():
            response = response.replace(f"{{{key}}}", str(value))
        
        return response
    
    def _analyze_message(self, message: str) -> Dict[str, Any]:
        """Analisa a mensagem e determina inten√ß√£o (vers√£o simplificada)"""
        message_lower = message.lower()
        
        # An√°lise b√°sica de sentimento e inten√ß√£o
        if any(word in message_lower for word in ["n√£o", "nao", "nem", "nunca", "desculp"]):
            sentiment = "negativo"
            if any(word in message_lower for word in ["interesse", "quero", "preciso"]):
                intent = "no_interest"
            else:
                intent = "objection"
        elif any(word in message_lower for word in ["sim", "claro", "quero", "interesse", "legal", "√≥timo"]):
            sentiment = "positivo"
            intent = "interest"
        elif any(word in message_lower for word in ["caro", "custo", "valor", "pre√ßo", "quanto"]):
            sentiment = "neutro"
            intent = "cost_concern"
        elif any(word in message_lower for word in ["funciona", "como", "explica"]):
            sentiment = "neutro"
            intent = "how_it_works"
        elif any(word in message_lower for word in ["casa", "apartamento", "ap"]):
            sentiment = "positivo"
            self.lead_info["property_type"] = "casa" if "casa" in message_lower else "apartamento"
            intent = "property_info"
        elif "r$" in message_lower or any(char.isdigit() for char in message):
            sentiment = "positivo"
            # Extrai valor aproximado
            import re
            numbers = re.findall(r'\d+', message)
            if numbers:
                self.lead_info["bill_value"] = numbers[0]
            intent = "bill_value"
        else:
            sentiment = "neutro"
            intent = "general"
        
        # Determina pr√≥ximo est√°gio
        next_stage = self.current_stage
        if intent == "no_interest":
            next_stage = "CLOSED"
        elif intent == "interest" and self.current_stage == "INITIAL_CONTACT":
            next_stage = "IDENTIFICATION"
        elif intent == "property_info":
            next_stage = "DISCOVERY"
        elif intent == "bill_value":
            next_stage = "QUALIFICATION"
        elif self.current_stage == "QUALIFICATION" and sentiment == "positivo":
            next_stage = "SCHEDULING"
        
        return {
            "sentiment": sentiment,
            "intent": intent,
            "next_stage": next_stage,
            "confidence": 0.85
        }
    
    async def process_message(
        self, 
        message: str,
        phone_number: str,
        media_type: Optional[str] = None,
        media_data: Optional[Any] = None
    ) -> Tuple[str, Dict[str, Any]]:
        """Processa mensagem e retorna resposta demo"""
        try:
            # Inicializa hist√≥rico se necess√°rio
            if phone_number not in self.conversation_history:
                self.conversation_history[phone_number] = []
            
            # Analisa mensagem
            analysis = self._analyze_message(message)
            self.current_stage = analysis["next_stage"]
            
            # Gera resposta apropriada
            if analysis["intent"] == "no_interest":
                response = self._get_demo_response("no_interest")
            elif analysis["intent"] == "interest":
                response = self._get_demo_response("interest")
            elif analysis["intent"] == "cost_concern":
                response = self._get_demo_response("cost_concern")
            elif analysis["intent"] == "how_it_works":
                response = self._get_demo_response("how_it_works")
            elif analysis["intent"] == "property_info" and "property_type" in self.lead_info:
                response = self._get_demo_response("property_info", 
                    property_type=self.lead_info["property_type"])
            elif analysis["intent"] == "bill_value" and "bill_value" in self.lead_info:
                value = int(self.lead_info.get("bill_value", 500))
                savings = int(value * 0.05)  # 5% da conta atual
                yearly = int(value * 0.95 * 12)  # Economia anual
                months = int(yearly / value)
                response = self._get_demo_response("bill_value", 
                    value=value, savings=savings, yearly=yearly, months=months)
            elif self.current_stage == "SCHEDULING":
                response = self._get_demo_response("scheduling")
            else:
                response = self._get_demo_response("default")
            
            # Salva no hist√≥rico
            self.conversation_history[phone_number].append({
                "user": message,
                "assistant": response,
                "timestamp": datetime.now().isoformat()
            })
            
            # Prepara metadados
            metadata = {
                "stage": self.current_stage,
                "sentiment": analysis["sentiment"],
                "intent": analysis["intent"],
                "lead_info": self.lead_info,
                "typing_delay": calculate_typing_delay(response),
                "demo_mode": True
            }
            
            return response, metadata
            
        except Exception as e:
            logger.error(f"Erro no demo agent: {e}")
            return "Desculpe, tive um problema. Pode repetir?", {"error": str(e)}
    
    async def start_conversation(self, phone_number: str) -> Tuple[str, Dict[str, Any]]:
        """Inicia nova conversa demo"""
        self.current_stage = "INITIAL_CONTACT"
        self.lead_info = {"phone": format_phone_number(phone_number)}
        
        greeting = self._get_demo_response("greeting")
        
        metadata = {
            "stage": self.current_stage,
            "typing_delay": calculate_typing_delay(greeting),
            "is_new_conversation": True,
            "demo_mode": True
        }
        
        return greeting, metadata
    
    async def handle_no_interest(self, phone_number: str) -> Tuple[str, Dict[str, Any]]:
        """Trata casos de n√£o interesse"""
        farewell = self._get_demo_response("no_interest")
        
        self.lead_info["interested"] = False
        self.lead_info["closed_at"] = datetime.now().isoformat()
        
        metadata = {
            "stage": "CLOSED",
            "lead_qualified": False,
            "reason": "no_interest",
            "demo_mode": True
        }
        
        return farewell, metadata
    
    def get_conversation_summary(self, phone_number: str) -> Dict[str, Any]:
        """Retorna resumo da conversa"""
        return {
            "phone": phone_number,
            "lead_info": self.lead_info,
            "current_stage": self.current_stage,
            "conversation_count": len(self.conversation_history.get(phone_number, [])),
            "demo_mode": True
        }


# Fun√ß√£o helper
def create_demo_agent() -> DemoSDRAgent:
    """Cria e retorna uma inst√¢ncia do agente demo"""
    return DemoSDRAgent()

__all__ = ["DemoSDRAgent", "create_demo_agent"]