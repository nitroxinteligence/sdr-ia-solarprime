#!/usr/bin/env python3
"""
Teste das Novas Regras de Formata√ß√£o
=====================================
Valida que o agente n√£o usa listas, bulletpoints ou negrito excessivo
"""

import sys
import re
sys.path.append('.')

from config.prompts import PromptTemplates


def test_no_lists_or_bullets():
    """Testa que os prompts n√£o cont√™m listas numeradas ou com bullets"""
    print("\n=== Teste de Aus√™ncia de Listas e Bullets ===")
    
    # Padr√µes proibidos
    forbidden_patterns = [
        r'^\d+\.',  # Listas numeradas (1., 2., etc)
        r'^-\s',    # H√≠fens como bullets
        r'^‚Ä¢\s',    # Bullets
        r'^\*\s',   # Asteriscos como bullets (n√£o confundir com negrito)
        r'^‚úÖ',     # Checkmarks
        r'^‚ùå',     # X marks
        r'^üìÖ',     # Emojis de calend√°rio em listas
    ]
    
    # Verificar cada prompt de est√°gio
    issues_found = []
    
    for stage, prompt in PromptTemplates.STAGE_PROMPTS.items():
        lines = prompt.split('\n')
        for i, line in enumerate(lines):
            for pattern in forbidden_patterns:
                if re.match(pattern, line.strip()):
                    issues_found.append(f"{stage} (linha {i+1}): '{line.strip()}'")
    
    if issues_found:
        print("‚ùå Encontrados padr√µes proibidos:")
        for issue in issues_found:
            print(f"  - {issue}")
        raise AssertionError(f"Encontrados {len(issues_found)} padr√µes proibidos")
    else:
        print("‚úÖ Nenhuma lista ou bullet encontrado nos prompts!")


def test_bold_usage():
    """Testa uso apropriado de negrito"""
    print("\n=== Teste de Uso de Negrito ===")
    
    # Contar uso de negrito em cada prompt
    for stage, prompt in PromptTemplates.STAGE_PROMPTS.items():
        # Contar ocorr√™ncias de *texto*
        bold_matches = re.findall(r'\*[^*]+\*', prompt)
        
        print(f"\n{stage}:")
        print(f"  Total de negritos: {len(bold_matches)}")
        
        if len(bold_matches) > 0:
            print("  Exemplos encontrados:")
            for match in bold_matches[:5]:  # Mostrar apenas os 5 primeiros
                print(f"    - {match}")
        
        # Verificar se h√° negrito excessivo (mais de 10 em um √∫nico prompt)
        if len(bold_matches) > 10:
            print(f"  ‚ö†Ô∏è AVISO: Poss√≠vel uso excessivo de negrito ({len(bold_matches)} ocorr√™ncias)")


def test_formatting_examples():
    """Testa exemplos de formata√ß√£o corretos e incorretos"""
    print("\n=== Teste de Exemplos de Formata√ß√£o ===")
    
    # Verificar se os exemplos est√£o presentes
    system_prompt = PromptTemplates.SYSTEM_PROMPT
    
    if "Exemplo CORRETO:" in system_prompt:
        print("‚úÖ Exemplo de formata√ß√£o CORRETA encontrado")
    else:
        print("‚ùå Exemplo de formata√ß√£o CORRETA n√£o encontrado")
    
    if "Exemplo ERRADO:" in system_prompt:
        print("‚úÖ Exemplo de formata√ß√£o ERRADA encontrado")
    else:
        print("‚ùå Exemplo de formata√ß√£o ERRADA n√£o encontrado")


def test_specific_rules():
    """Testa regras espec√≠ficas de formata√ß√£o"""
    print("\n=== Teste de Regras Espec√≠ficas ===")
    
    # Verificar se as regras est√£o documentadas
    system_prompt = PromptTemplates.SYSTEM_PROMPT
    
    rules_to_check = [
        ("NUNCA use listas numeradas", "Regra sobre listas numeradas"),
        ("NUNCA use enumera√ß√µes ou bulletpoints", "Regra sobre bulletpoints"),
        ("NUNCA use negrito em excesso", "Regra sobre negrito"),
        ("apenas em *palavras-chave*", "Orienta√ß√£o sobre uso de negrito"),
        ("Use retic√™ncias (...) ao inv√©s de dois pontos", "Regra sobre pontua√ß√£o"),
    ]
    
    for rule, description in rules_to_check:
        if rule in system_prompt:
            print(f"‚úÖ {description} encontrada")
        else:
            print(f"‚ùå {description} N√ÉO encontrada")


def test_energy_bill_response():
    """Testa formata√ß√£o espec√≠fica da resposta de conta de luz"""
    print("\n=== Teste de Resposta de Conta de Luz ===")
    
    energy_bill_prompt = PromptTemplates.STAGE_PROMPTS.get("ENERGY_BILL_ANALYSIS", "")
    
    # Verificar aus√™ncia de checkmarks
    if "‚úÖ" in energy_bill_prompt:
        print("‚ùå ERRO: Resposta de conta ainda cont√©m checkmarks!")
    else:
        print("‚úÖ Resposta de conta sem checkmarks")
    
    # Verificar formato correto
    if "Com nossa solu√ß√£o de *Energia por Assinatura*, voc√™ teria uma economia de" in energy_bill_prompt:
        print("‚úÖ Formato de resposta sem lista encontrado")
    else:
        print("‚ùå Formato de resposta pode precisar de ajuste")


def analyze_all_prompts():
    """An√°lise geral de todos os prompts"""
    print("\n=== An√°lise Geral dos Prompts ===")
    
    total_chars = 0
    total_bolds = 0
    
    for stage, prompt in PromptTemplates.STAGE_PROMPTS.items():
        chars = len(prompt)
        bolds = len(re.findall(r'\*[^*]+\*', prompt))
        
        total_chars += chars
        total_bolds += bolds
        
        print(f"{stage:20} - {chars:5} caracteres, {bolds:2} negritos")
    
    print(f"\nTOTAL: {total_chars} caracteres, {total_bolds} negritos")
    print(f"M√©dia de negritos por prompt: {total_bolds/len(PromptTemplates.STAGE_PROMPTS):.1f}")


if __name__ == "__main__":
    print("üß™ Testando novas regras de formata√ß√£o...")
    
    try:
        test_no_lists_or_bullets()
        test_bold_usage()
        test_formatting_examples()
        test_specific_rules()
        test_energy_bill_response()
        analyze_all_prompts()
        
        print("\n‚úÖ TODOS OS TESTES PASSARAM! üéâ")
        print("\nAs regras de formata√ß√£o foram implementadas com sucesso:")
        print("1. ‚úì Sem listas numeradas ou bulletpoints")
        print("2. ‚úì Negrito usado apenas em palavras-chave")
        print("3. ‚úì Exemplos de formata√ß√£o inclu√≠dos")
        print("4. ‚úì Regras claramente documentadas")
        
    except AssertionError as e:
        print(f"\n‚ùå ERRO: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå ERRO INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)