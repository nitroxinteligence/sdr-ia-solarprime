"""
Google Calendar Configuration
=============================
Configura√ß√£o para integra√ß√£o com Google Calendar
"""

import os
from pathlib import Path
from typing import Optional

class GoogleCalendarConfig:
    """Configura√ß√£o do Google Calendar"""
    
    def __init__(self):
        # Paths para credenciais
        self.credentials_path = os.getenv(
            'GOOGLE_CALENDAR_CREDENTIALS_PATH', 
            'credentials/google_calendar_credentials.json'
        )
        self.token_path = os.getenv(
            'GOOGLE_CALENDAR_TOKEN_PATH', 
            'credentials/google_calendar_token.pickle'
        )
        
        # ID do calend√°rio (primary = calend√°rio principal do usu√°rio)
        self.calendar_id = os.getenv('GOOGLE_CALENDAR_ID', 'primary')
        
        # Configura√ß√µes de reuni√£o
        self.default_meeting_duration = int(os.getenv('MEETING_DURATION_MINUTES', '60'))
        self.meeting_location = os.getenv(
            'MEETING_LOCATION', 
            'SolarPrime - Av. Boa Viagem, 3344 - Boa Viagem, Recife - PE'
        )
        
        # Hor√°rios de atendimento
        self.business_hours_start = int(os.getenv('BUSINESS_HOURS_START', '9'))
        self.business_hours_end = int(os.getenv('BUSINESS_HOURS_END', '18'))
        self.business_days = [0, 1, 2, 3, 4]  # Segunda a sexta
        
        # Configura√ß√µes de notifica√ß√£o
        self.reminder_minutes = [
            24 * 60,  # 1 dia antes
            60,       # 1 hora antes
            15        # 15 minutos antes
        ]
        
        # Templates de evento
        self.event_templates = {
            'initial_meeting': {
                'title': '‚òÄÔ∏è Reuni√£o SolarPrime - {lead_name}',
                'description': """
üåü REUNI√ÉO DE APRESENTA√á√ÉO - SOLARPRIME

üë§ Cliente: {lead_name}
üì± Telefone: {lead_phone}
üí∞ Valor da conta: R$ {bill_value}
‚ö° Consumo: {consumption_kwh} kWh
üéØ Solu√ß√£o de interesse: {solution_type}

üìã AGENDA DA REUNI√ÉO:
1. Apresenta√ß√£o da SolarPrime
2. An√°lise da conta de energia
3. Demonstra√ß√£o da economia
4. Apresenta√ß√£o das solu√ß√µes
5. Proposta personalizada
6. Esclarecimento de d√∫vidas

üí° PREPARAR:
- Proposta personalizada
- Simula√ß√£o de economia
- Cases de sucesso similares
- Contrato padr√£o

üîó Mais informa√ß√µes no CRM: {crm_link}
                """
            },
            'follow_up_meeting': {
                'title': 'üîÑ Follow-up SolarPrime - {lead_name}',
                'description': """
üîÑ REUNI√ÉO DE FOLLOW-UP - SOLARPRIME

üë§ Cliente: {lead_name}
üì± Telefone: {lead_phone}
üìÖ Reuni√£o anterior: {last_meeting_date}

üìã PONTOS A REVISAR:
- Status da proposta
- D√∫vidas pendentes
- Ajustes necess√°rios
- Pr√≥ximos passos

üîó Hist√≥rico no CRM: {crm_link}
                """
            },
            'contract_signing': {
                'title': '‚úçÔ∏è Assinatura Contrato - {lead_name}',
                'description': """
‚úçÔ∏è ASSINATURA DE CONTRATO - SOLARPRIME

üë§ Cliente: {lead_name}
üì± Telefone: {lead_phone}
üí∞ Valor do investimento: R$ {investment_value}
üìä Economia prevista: R$ {monthly_savings}/m√™s

üìã DOCUMENTOS NECESS√ÅRIOS:
- RG e CPF
- Comprovante de resid√™ncia
- √öltima conta de energia
- Comprovante de renda (se financiamento)

üîó Proposta no CRM: {crm_link}
                """
            }
        }
        
        # Configura√ß√µes AGnO Framework
        self.agno_config = {
            'use_agno_tools': True,  # Usar GoogleCalendarTools do AGnO
            'fallback_to_api': True,  # Fallback para API direta se AGnO falhar
            'cache_events': True,     # Cache de eventos para performance
            'cache_duration': 300     # 5 minutos de cache
        }
    
    def validate(self) -> bool:
        """Valida se as configura√ß√µes est√£o corretas"""
        # Verificar se arquivo de credenciais existe
        if not Path(self.credentials_path).exists():
            print(f"‚ö†Ô∏è  Arquivo de credenciais n√£o encontrado: {self.credentials_path}")
            print("üìù Para configurar o Google Calendar:")
            print("1. Acesse: https://console.cloud.google.com/")
            print("2. Crie um novo projeto ou selecione um existente")
            print("3. Ative a API do Google Calendar")
            print("4. Crie credenciais OAuth 2.0")
            print("5. Baixe o arquivo JSON e salve em: " + self.credentials_path)
            return False
        
        return True
    
    def get_event_template(self, template_type: str = 'initial_meeting') -> dict:
        """Retorna template de evento"""
        return self.event_templates.get(template_type, self.event_templates['initial_meeting'])


# Inst√¢ncia global
google_calendar_config = GoogleCalendarConfig()