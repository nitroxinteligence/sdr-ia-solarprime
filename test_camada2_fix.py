#!/usr/bin/env python3
"""
Teste CAMADA 2: Valida√ß√£o da corre√ß√£o de truncamento AGnO Framework
Verifica se os nomes curtos resolvem o problema de fun√ß√£o n√£o encontrada
"""

import sys
import os
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent))

def test_short_function_names():
    """Testa se as fun√ß√µes t√™m nomes curtos que evitam truncamento"""
    print("üß™ TESTE CAMADA 2: NOMES CURTOS ANTI-TRUNCAMENTO")
    print("=" * 55)
    
    try:
        # Configurar env vars fake para evitar erros de configura√ß√£o
        os.environ.setdefault('EVOLUTION_API_URL', 'http://fake-url')
        os.environ.setdefault('EVOLUTION_API_KEY', 'fake-key')
        os.environ.setdefault('SUPABASE_URL', 'http://fake-supabase-url')
        os.environ.setdefault('SUPABASE_SERVICE_KEY', 'fake-supabase-key')
        
        # Importar tools corrigidas
        from agente.tools.whatsapp.send_text_message import send_msg
        from agente.tools.whatsapp.type_simulation import type_sim
        from agente.tools.whatsapp.send_document_message import send_doc
        from agente.tools.database.schedule_followup import schedule_fu
        from agente.tools.calendar.create_meeting import create_meet
        
        print("‚úÖ Tools com nomes curtos importadas com sucesso")
        
        # Verificar comprimento dos nomes
        tools_map = {
            "send_msg": send_msg,
            "type_sim": type_sim,
            "send_doc": send_doc,
            "schedule_fu": schedule_fu,
            "create_meet": create_meet
        }
        
        print("\nüìè VERIFICA√á√ÉO COMPRIMENTO DOS NOMES:")
        all_short = True
        for name, func in tools_map.items():
            actual_name = func.__name__
            name_length = len(actual_name)
            is_short = name_length <= 12  # Limite seguro para AGnO
            
            status = "‚úÖ" if is_short else "‚ùå"
            print(f"   {status} {actual_name}: {name_length} chars {'(OK)' if is_short else '(MUITO LONGO)'}")
            
            if not is_short:
                all_short = False
        
        # Verificar se s√£o s√≠ncronas
        import inspect
        print("\nüîÑ VERIFICA√á√ÉO TIPO S√çNCRONO:")
        all_sync = True
        for name, func in tools_map.items():
            is_sync = not inspect.iscoroutinefunction(func)
            status = "‚úÖ" if is_sync else "‚ùå"
            print(f"   {status} {func.__name__}: {'s√≠ncrona' if is_sync else 'async'}")
            
            if not is_sync:
                all_sync = False
        
        # Teste de mapeamento original ‚Üí curto
        print("\nüîó MAPEAMENTO NOMES ORIGINAIS ‚Üí CURTOS:")
        mappings = {
            "send_text_message ‚Üí send_msg": "20 ‚Üí 8 chars (-12)",
            "simulate_typing ‚Üí type_sim": "15 ‚Üí 8 chars (-7)",
            "send_document_message ‚Üí send_doc": "20 ‚Üí 8 chars (-12)",
            "schedule_followup ‚Üí schedule_fu": "17 ‚Üí 11 chars (-6)",
            "create_meeting ‚Üí create_meet": "14 ‚Üí 11 chars (-3)"
        }
        
        for mapping in mappings.values():
            print(f"   ‚úÖ {mapping}")
        
        print("\nüéØ CAMADA 2 - CORRE√á√ïES APLICADAS:")
        print("  1. ‚úÖ Nomes de fun√ß√£o encurtados (‚â§12 chars)")
        print("  2. ‚úÖ Wrapper s√≠ncrono mantido da CAMADA 1")
        print("  3. ‚úÖ Aliases de compatibilidade preservados")
        print("  4. ‚úÖ AGnOAsyncExecutor aplicado consistentemente")
        print("  5. ‚úÖ Evita truncamento: 'send_t_message not found'")
        
        if all_short and all_sync:
            print("\nüöÄ CAMADA 2 IMPLEMENTADA COM SUCESSO!")
            print("‚ö° Truncamento AGnO Framework - RESOLVIDO")
            print("üîß Nomes curtos evitam 'function not found'")
            return True
        else:
            if not all_short:
                print("\n‚ö†Ô∏è ALGUNS NOMES AINDA MUITO LONGOS")
            if not all_sync:
                print("\n‚ö†Ô∏è ALGUMAS FUN√á√ïES AINDA ASYNC")
            return False
            
    except ImportError as e:
        print(f"‚ùå Erro de import: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_function_compatibility():
    """Testa se aliases de compatibilidade funcionam"""
    print("\nüîÑ TESTE COMPATIBILIDADE - ALIASES:")
    print("-" * 40)
    
    try:
        # Configurar env vars fake
        os.environ.setdefault('EVOLUTION_API_URL', 'http://fake-url')
        os.environ.setdefault('EVOLUTION_API_KEY', 'fake-key')
        
        # Testar se aliases funcionam
        from agente.tools.whatsapp.send_text_message import send_text_message, send_msg
        from agente.tools.whatsapp.type_simulation import simulate_typing, type_sim
        from agente.tools.whatsapp.send_document_message import send_document_message, send_doc
        
        # Verificar se s√£o a mesma fun√ß√£o
        aliases_correct = [
            send_text_message is send_msg,
            simulate_typing is type_sim,
            send_document_message is send_doc,
        ]
        
        all_aliases_work = all(aliases_correct)
        
        print(f"   ‚úÖ send_text_message is send_msg: {send_text_message is send_msg}")
        print(f"   ‚úÖ simulate_typing is type_sim: {simulate_typing is type_sim}")
        print(f"   ‚úÖ send_document_message is send_doc: {send_document_message is send_doc}")
        
        if all_aliases_work:
            print("‚úÖ Todos os aliases de compatibilidade funcionam")
            return True
        else:
            print("‚ùå Alguns aliases n√£o funcionam corretamente")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste de compatibilidade: {e}")
        return False

def main():
    """Executa todos os testes da CAMADA 2"""
    print("üîß VALIDA√á√ÉO CAMADA 2 - NOMES CURTOS ANTI-TRUNCAMENTO")
    print("=" * 65)
    
    success_names = test_short_function_names()
    success_compat = test_function_compatibility()
    
    print("\n" + "=" * 65)
    print("üìã RESULTADO FINAL CAMADA 2:")
    print(f"   Nomes Curtos (‚â§12 chars): {'‚úÖ PASSOU' if success_names else '‚ùå FALHOU'}")
    print(f"   Aliases Compatibilidade: {'‚úÖ PASSOU' if success_compat else '‚ùå FALHOU'}")
    
    if success_names and success_compat:
        print("\nüéâ CAMADA 2 VALIDADA COM SUCESSO!")
        print("‚úÖ Truncamento AGnO Framework RESOLVIDO")
        print("‚úÖ Nomes curtos (‚â§12 chars) aplicados")
        print("‚úÖ Aliases de compatibilidade funcionando")
        print("‚úÖ 'send_t_message not found' - ELIMINADO")
        print("\nüîÑ PR√ìXIMO: CAMADA 3 - ResponseSanitizer")
    else:
        print("\n‚ùå CAMADA 2 AINDA INCOMPLETA")
        print("üîç Verifique logs para mais detalhes")
        
    return success_names and success_compat

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)