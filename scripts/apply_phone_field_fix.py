#!/usr/bin/env python3
"""
Script para aplicar corre√ß√£o do campo phone_number com seguran√ßa
================================================
Aplica a corre√ß√£o do tamanho do campo phone_number com valida√ß√µes
e capacidade de rollback em caso de erro.
"""

import os
import sys
from pathlib import Path
from datetime import datetime
import psycopg2
from psycopg2 import sql
from loguru import logger
from dotenv import load_dotenv
from supabase import create_client

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

load_dotenv()

def parse_database_url(url: str) -> dict:
    """Parse DATABASE_URL para componentes de conex√£o"""
    # Formato: postgresql://user:password@host:port/database
    from urllib.parse import urlparse
    
    parsed = urlparse(url)
    return {
        'host': parsed.hostname,
        'port': parsed.port or 5432,
        'database': parsed.path[1:],  # Remove leading /
        'user': parsed.username,
        'password': parsed.password
    }

def check_current_field_size():
    """Verifica o tamanho atual do campo phone_number"""
    logger.info("üîç Verificando tamanho atual do campo phone_number...")
    
    try:
        # Usar Supabase client para verificar
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_ANON_KEY")
        
        if not supabase_url or not supabase_key:
            logger.error("‚ùå Credenciais Supabase n√£o encontradas")
            return None
            
        client = create_client(supabase_url, supabase_key)
        
        # Query para verificar estrutura
        query = """
        SELECT column_name, data_type, character_maximum_length
        FROM information_schema.columns
        WHERE table_name = 'leads' 
        AND column_name = 'phone_number'
        """
        
        # Executar via SQL direto se poss√≠vel
        database_url = os.getenv("DATABASE_URL")
        if database_url:
            conn_params = parse_database_url(database_url)
            
            with psycopg2.connect(**conn_params) as conn:
                with conn.cursor() as cur:
                    cur.execute(query)
                    result = cur.fetchone()
                    
                    if result:
                        col_name, data_type, max_length = result
                        logger.info(f"üìä Campo atual: {col_name} - {data_type}({max_length})")
                        return max_length
                    else:
                        logger.error("‚ùå Campo phone_number n√£o encontrado")
                        return None
        else:
            logger.warning("‚ö†Ô∏è DATABASE_URL n√£o configurado, verifica√ß√£o limitada")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar campo: {e}")
        return None

def apply_fix():
    """Aplica a corre√ß√£o do campo phone_number"""
    logger.info("üöÄ Iniciando aplica√ß√£o da corre√ß√£o...")
    
    # Verificar tamanho atual
    current_size = check_current_field_size()
    
    if current_size == 50:
        logger.success("‚úÖ Campo j√° est√° com tamanho correto (50 caracteres)")
        return True
    elif current_size == 20:
        logger.info("üìù Campo est√° com 20 caracteres, aplicando corre√ß√£o...")
    else:
        logger.warning(f"‚ö†Ô∏è Tamanho inesperado: {current_size}")
    
    try:
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            logger.error("‚ùå DATABASE_URL n√£o configurado")
            return False
            
        conn_params = parse_database_url(database_url)
        
        with psycopg2.connect(**conn_params) as conn:
            with conn.cursor() as cur:
                # Criar backup dos dados atuais
                logger.info("üíæ Criando backup dos dados...")
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS leads_backup_phone_fix AS 
                    SELECT * FROM leads
                """)
                
                # Aplicar corre√ß√£o
                logger.info("üîß Aplicando corre√ß√£o...")
                cur.execute("""
                    ALTER TABLE leads 
                    ALTER COLUMN phone_number TYPE VARCHAR(50)
                """)
                
                # Verificar se funcionou
                cur.execute("""
                    SELECT character_maximum_length 
                    FROM information_schema.columns
                    WHERE table_name = 'leads' 
                    AND column_name = 'phone_number'
                """)
                
                new_size = cur.fetchone()[0]
                
                if new_size == 50:
                    conn.commit()
                    logger.success("‚úÖ Corre√ß√£o aplicada com sucesso!")
                    
                    # Verificar dados existentes
                    cur.execute("SELECT COUNT(*) FROM leads WHERE LENGTH(phone_number) > 20")
                    long_phones = cur.fetchone()[0]
                    
                    if long_phones > 0:
                        logger.info(f"üì± Encontrados {long_phones} registros com telefones > 20 caracteres")
                    
                    return True
                else:
                    conn.rollback()
                    logger.error(f"‚ùå Corre√ß√£o falhou, tamanho ap√≥s altera√ß√£o: {new_size}")
                    return False
                    
    except Exception as e:
        logger.error(f"‚ùå Erro ao aplicar corre√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    logger.info("=" * 60)
    logger.info("üîß CORRE√á√ÉO DO CAMPO PHONE_NUMBER")
    logger.info("=" * 60)
    
    # Verificar ambiente
    env = os.getenv("ENVIRONMENT", "development")
    logger.info(f"üåç Ambiente: {env}")
    
    if env == "production":
        logger.warning("‚ö†Ô∏è ATEN√á√ÉO: Executando em PRODU√á√ÉO!")
        response = input("Deseja continuar? (sim/n√£o): ")
        if response.lower() != "sim":
            logger.info("‚ùå Opera√ß√£o cancelada")
            return
    
    # Aplicar corre√ß√£o
    success = apply_fix()
    
    if success:
        logger.success("‚úÖ Processo conclu√≠do com sucesso!")
        logger.info("üìù Pr√≥ximos passos:")
        logger.info("1. Testar inser√ß√£o de n√∫meros longos do WhatsApp")
        logger.info("2. Verificar se aplica√ß√£o est√° funcionando corretamente")
        logger.info("3. Remover tabela de backup ap√≥s confirma√ß√£o: DROP TABLE leads_backup_phone_fix")
    else:
        logger.error("‚ùå Processo falhou!")
        logger.info("üí° Verifique os logs e tente novamente")

if __name__ == "__main__":
    main()