#!/usr/bin/env python3
"""
Script de Teste do Agente SDR
=============================
Testa o agente de IA no terminal de forma interativa
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt
from rich.table import Table
from rich.markdown import Markdown
from loguru import logger

# Adiciona o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

# Importa√ß√µes locais
from agents.sdr_agent import create_sdr_agent
from config.agent_config import config, validate_config
from utils.helpers import format_phone_number, get_greeting_by_time

# Console rico para output formatado
console = Console()

class AgentTester:
    """Classe para testar o agente de forma interativa"""
    
    def __init__(self):
        """Inicializa o testador"""
        self.agent = None
        self.test_phone = "+5511999999999"
        self.conversation_active = False
        
    async def setup(self):
        """Configura o ambiente de teste"""
        console.print("\n[bold cyan]ü§ñ SDR IA SolarPrime - Modo de Teste[/bold cyan]\n")
        
        # Valida configura√ß√£o
        try:
            validate_config()
            console.print("‚úÖ Configura√ß√£o validada com sucesso!", style="green")
        except ValueError as e:
            console.print(f"‚ùå Erro de configura√ß√£o: {e}", style="red")
            console.print("\nüí° Dica: Verifique se o arquivo .env est√° configurado corretamente")
            return False
        
        # Cria o agente
        try:
            self.agent = create_sdr_agent()
            console.print("‚úÖ Agente criado com sucesso!", style="green")
            return True
        except Exception as e:
            console.print(f"‚ùå Erro ao criar agente: {e}", style="red")
            return False
    
    async def run_interactive_test(self):
        """Executa teste interativo"""
        if not await self.setup():
            return
        
        # Mostra informa√ß√µes do agente
        self._show_agent_info()
        
        # Menu principal
        while True:
            console.print("\n[bold yellow]üìã Menu de Teste[/bold yellow]")
            console.print("1. Iniciar nova conversa")
            console.print("2. Testar resposta espec√≠fica")
            console.print("3. Simular envio de imagem (conta de luz)")
            console.print("4. Ver m√©tricas da conversa")
            console.print("5. Testar casos espec√≠ficos")
            console.print("6. Sair")
            
            choice = Prompt.ask("\nEscolha uma op√ß√£o", choices=["1", "2", "3", "4", "5", "6"])
            
            if choice == "1":
                await self._start_conversation()
            elif choice == "2":
                await self._test_specific_response()
            elif choice == "3":
                await self._simulate_image_upload()
            elif choice == "4":
                await self._show_conversation_metrics()
            elif choice == "5":
                await self._test_specific_cases()
            elif choice == "6":
                console.print("\nüëã At√© logo!", style="cyan")
                break
    
    async def _start_conversation(self):
        """Inicia uma conversa interativa"""
        console.print("\n[bold green]üöÄ Iniciando Nova Conversa[/bold green]\n")
        
        # Pergunta se quer personalizar o telefone
        custom_phone = Prompt.ask(
            "Digite o n√∫mero de telefone (ou Enter para usar padr√£o)",
            default=self.test_phone
        )
        self.test_phone = format_phone_number(custom_phone)
        
        # Inicia conversa
        response, metadata = await self.agent.start_conversation(self.test_phone)
        self._display_agent_response(response, metadata)
        
        # Loop de conversa
        self.conversation_active = True
        while self.conversation_active:
            # Recebe input do usu√°rio
            user_input = Prompt.ask("\n[cyan]Voc√™[/cyan]")
            
            if user_input.lower() in ['/sair', '/exit', '/quit']:
                self.conversation_active = False
                console.print("\nüëã Conversa encerrada", style="yellow")
                break
            
            # Processa mensagem
            console.print("\n[dim]Agente digitando...[/dim]")
            response, metadata = await self.agent.process_message(
                user_input,
                self.test_phone
            )
            
            # Simula delay de digita√ß√£o
            await asyncio.sleep(metadata.get("typing_delay", 3))
            
            # Exibe resposta
            self._display_agent_response(response, metadata)
    
    async def _test_specific_response(self):
        """Testa uma resposta espec√≠fica"""
        console.print("\n[bold blue]üß™ Teste de Resposta Espec√≠fica[/bold blue]\n")
        
        # Recebe mensagem
        test_message = Prompt.ask("Digite a mensagem de teste")
        
        # Processa
        console.print("\n[dim]Processando...[/dim]")
        response, metadata = await self.agent.process_message(
            test_message,
            self.test_phone
        )
        
        # Exibe resultado
        self._display_agent_response(response, metadata)
        
        # Mostra an√°lise
        console.print("\n[bold]üìä An√°lise da Resposta:[/bold]")
        table = Table()
        table.add_column("M√©trica", style="cyan")
        table.add_column("Valor", style="green")
        
        table.add_row("Est√°gio", metadata.get("stage", "N/A"))
        table.add_row("Sentimento", metadata.get("sentiment", "N/A"))
        table.add_row("Delay de Digita√ß√£o", f"{metadata.get('typing_delay', 0):.1f}s")
        table.add_row("Deve Agendar?", "Sim" if metadata.get("should_schedule") else "N√£o")
        
        console.print(table)
    
    async def _simulate_image_upload(self):
        """Simula upload de imagem"""
        console.print("\n[bold magenta]üì∏ Simula√ß√£o de Upload de Imagem[/bold magenta]\n")
        
        # Menu de op√ß√µes de teste
        console.print("Escolha o tipo de simula√ß√£o:")
        console.print("1. URL de imagem (conta de luz exemplo)")
        console.print("2. Dados base64 simulados")
        console.print("3. Caminho de arquivo local")
        console.print("4. PDF de conta de luz")
        
        choice = Prompt.ask("Escolha", choices=["1", "2", "3", "4"])
        
        if choice == "1":
            # Simula URL de imagem
            console.print("Simulando envio de conta de luz via URL...")
            media_data = {
                "url": "https://exemplo.com/conta-luz.jpg"  # URL simulada
            }
            message = "Aqui est√° minha conta de luz"
            
        elif choice == "2":
            # Simula dados base64
            console.print("Simulando envio de conta de luz em base64...")
            # Base64 simulado (n√£o √© uma imagem real)
            media_data = {
                "base64": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
            }
            message = "Segue a foto da minha conta"
            
        elif choice == "3":
            # Simula caminho de arquivo
            console.print("Simulando envio de arquivo local...")
            media_data = {
                "path": "/tmp/conta_luz_exemplo.jpg"  # Caminho simulado
            }
            message = "Est√° aqui a conta"
            
        else:
            # Simula PDF
            console.print("Simulando envio de PDF...")
            media_data = {
                "url": "https://exemplo.com/conta.pdf",
                "mime_type": "application/pdf"
            }
            message = "Enviei o PDF da conta"
            media_type = "document"
        
        # Define tipo de m√≠dia
        media_type = "document" if choice == "4" else "image"
        
        # Processa mensagem com m√≠dia
        console.print(f"\n[dim]Processando {media_type}...[/dim]")
        
        try:
            response, metadata = await self.agent.process_message(
                message,
                self.test_phone,
                media_type=media_type,
                media_data=media_data
            )
            
            # Simula delay de an√°lise
            await asyncio.sleep(2)
            
            # Exibe resposta
            self._display_agent_response(response, metadata)
            
            # Mostra dados extra√≠dos se houver
            if metadata.get("lead_info", {}).get("bill_value"):
                console.print("\n[bold green]‚úÖ Dados Extra√≠dos da Conta:[/bold green]")
                lead_info = metadata["lead_info"]
                
                table = Table()
                table.add_column("Campo", style="cyan")
                table.add_column("Valor", style="green")
                
                if lead_info.get("bill_value"):
                    table.add_row("Valor da Conta", lead_info["bill_value"])
                if lead_info.get("consumption_kwh"):
                    table.add_row("Consumo", f"{lead_info['consumption_kwh']} kWh")
                if lead_info.get("customer_name"):
                    table.add_row("Titular", lead_info["customer_name"])
                if lead_info.get("address"):
                    table.add_row("Endere√ßo", lead_info["address"])
                    
                console.print(table)
                
        except Exception as e:
            console.print(f"[red]‚ùå Erro ao processar m√≠dia: {e}[/red]")
            if config.debug:
                console.print_exception()
    
    async def _show_conversation_metrics(self):
        """Mostra m√©tricas da conversa"""
        console.print("\n[bold yellow]üìà M√©tricas da Conversa[/bold yellow]\n")
        
        # Obt√©m resumo da conversa
        summary = self.agent.get_conversation_summary(self.test_phone)
        
        # Tabela de m√©tricas
        table = Table(title="Informa√ß√µes do Lead")
        table.add_column("Campo", style="cyan")
        table.add_column("Valor", style="green")
        
        # Informa√ß√µes do lead
        lead_info = summary.get("lead_info", {})
        for key, value in lead_info.items():
            if key not in ['current_stage', 'last_interaction']:
                table.add_row(key.replace("_", " ").title(), str(value))
        
        table.add_row("Est√°gio Atual", summary.get("current_stage", "N/A"))
        table.add_row("Sess√£o Ativa", "Sim" if summary.get("session_active") else "N√£o")
        
        if summary.get("last_interaction"):
            table.add_row("√öltima Intera√ß√£o", summary["last_interaction"])
        
        console.print(table)
        
        # Informa√ß√µes adicionais
        if lead_info:
            console.print("\n[bold]üìã Status da Qualifica√ß√£o:[/bold]")
            console.print(f"‚Ä¢ Nome: {'‚úÖ' if lead_info.get('name') else '‚ùå'} {'Capturado' if lead_info.get('name') else 'Pendente'}")
            console.print(f"‚Ä¢ Tipo de Im√≥vel: {'‚úÖ' if lead_info.get('property_type') else '‚ùå'} {'Identificado' if lead_info.get('property_type') else 'Pendente'}")
            console.print(f"‚Ä¢ Valor da Conta: {'‚úÖ' if lead_info.get('bill_value') else '‚ùå'} {'Informado' if lead_info.get('bill_value') else 'Pendente'}")
    
    async def _test_specific_cases(self):
        """Testa casos espec√≠ficos"""
        console.print("\n[bold purple]üéØ Casos de Teste Espec√≠ficos[/bold purple]\n")
        
        cases = [
            ("Obje√ß√£o de Custo", "Mas energia solar n√£o √© muito caro?"),
            ("Pergunta T√©cnica", "Como funciona em dias nublados?"),
            ("Interesse Alto", "Quero muito economizar na conta de luz!"),
            ("Sem Interesse", "N√£o tenho interesse, obrigado"),
            ("Valor da Conta", "Minha conta vem uns 450 reais por m√™s"),
            ("Agendamento", "Sim, quero marcar uma reuni√£o para saber mais")
        ]
        
        console.print("Escolha um caso de teste:")
        for i, (name, _) in enumerate(cases, 1):
            console.print(f"{i}. {name}")
        
        choice = Prompt.ask("Escolha", choices=[str(i) for i in range(1, len(cases) + 1)])
        case_name, case_message = cases[int(choice) - 1]
        
        console.print(f"\n[bold]Testando: {case_name}[/bold]")
        console.print(f"Mensagem: {case_message}\n")
        
        # Processa
        response, metadata = await self.agent.process_message(
            case_message,
            self.test_phone
        )
        
        self._display_agent_response(response, metadata)
    
    def _show_agent_info(self):
        """Mostra informa√ß√µes do agente"""
        info = Panel(
            f"""[bold cyan]Agente:[/bold cyan] {config.personality.name}
[bold cyan]Empresa:[/bold cyan] {config.personality.company}
[bold cyan]Modelo:[/bold cyan] {config.gemini.model}
[bold cyan]Personalidade:[/bold cyan] {config.personality.voice_tone}
[bold cyan]Caracter√≠sticas:[/bold cyan] {', '.join(config.personality.traits[:3])}...""",
            title="ü§ñ Informa√ß√µes do Agente",
            border_style="cyan"
        )
        console.print(info)
    
    def _display_agent_response(self, response: str, metadata: dict):
        """Exibe resposta do agente formatada"""
        # Painel com a resposta
        panel = Panel(
            response,
            title=f"ü§ñ {config.personality.name}",
            border_style="green",
            padding=(1, 2)
        )
        console.print(panel)
        
        # Mostra metadados em modo debug
        if config.debug:
            console.print(
                f"\n[dim]Debug: Est√°gio={metadata.get('stage')}, "
                f"Sentimento={metadata.get('sentiment')}, "
                f"Delay={metadata.get('typing_delay', 0):.1f}s[/dim]"
            )

async def main():
    """Fun√ß√£o principal"""
    # Configura logging
    logger.remove()
    logger.add(
        sys.stderr,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>",
        level="INFO" if not config.debug else "DEBUG"
    )
    
    # Cria e executa testador
    tester = AgentTester()
    try:
        await tester.run_interactive_test()
    except KeyboardInterrupt:
        console.print("\n\nüëã Teste interrompido pelo usu√°rio", style="yellow")
    except Exception as e:
        console.print(f"\n‚ùå Erro durante teste: {e}", style="red")
        if config.debug:
            console.print_exception()

if __name__ == "__main__":
    # Limpa tela
    os.system('clear' if os.name == 'posix' else 'cls')
    
    # Executa teste
    asyncio.run(main())