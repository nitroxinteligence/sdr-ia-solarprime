#!/usr/bin/env python3
"""
Script para corrigir problemas com inst√¢ncia Evolution API
"""

import httpx
import asyncio
import os
from dotenv import load_dotenv
import json
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm

load_dotenv()

console = Console()

async def main():
    base_url = os.getenv("EVOLUTION_API_URL", "")
    api_key = os.getenv("EVOLUTION_API_KEY", "")
    instance_name = os.getenv("EVOLUTION_INSTANCE_NAME", "Teste-Agente")
    
    if base_url.endswith('/manager'):
        base_url = base_url[:-8]
    
    headers = {
        "apikey": api_key,
        "Content-Type": "application/json"
    }
    
    print(f"üîß Corrigindo inst√¢ncia '{instance_name}'...")
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # 1. Primeiro, tentar obter status da inst√¢ncia
            print("\n1Ô∏è‚É£ Verificando status da inst√¢ncia...")
            try:
                response = await client.get(
                    f"{base_url}/instance/connectionState/{instance_name}",
                    headers=headers
                )
                
                if response.status_code == 200:
                    state_data = response.json()
                    state = state_data.get("state", "unknown")
                    print(f"   Status atual: {state}")
                    
                    if state == "open":
                        print("   ‚úÖ WhatsApp j√° est√° conectado!")
                        return True
                    elif state == "close":
                        print("   ‚ö†Ô∏è WhatsApp desconectado")
                else:
                    print(f"   Erro ao verificar status: {response.status_code}")
            except:
                print("   ‚ùå N√£o foi poss√≠vel verificar status")
            
            # 2. Tentar conectar/reconectar
            print("\n2Ô∏è‚É£ Tentando conectar inst√¢ncia...")
            try:
                response = await client.get(
                    f"{base_url}/instance/connect/{instance_name}",
                    headers=headers
                )
                
                if response.status_code == 200:
                    result = response.json()
                    print("   ‚úÖ Comando de conex√£o enviado")
                    
                    # Verificar se tem QR Code
                    qrcode = result.get("qrcode")
                    if qrcode:
                        pairingCode = qrcode.get("pairingCode")
                        base64 = qrcode.get("base64", "")
                        
                        print("\nüì± QR CODE DISPON√çVEL!")
                        print("=" * 60)
                        
                        if pairingCode:
                            print(f"üî¢ C√ìDIGO DE PAREAMENTO: {pairingCode}")
                            print("\nComo usar o c√≥digo:")
                            print("1. No WhatsApp, v√° em Configura√ß√µes > Dispositivos conectados")
                            print("2. Toque em 'Conectar dispositivo'")
                            print("3. Escolha 'Conectar com n√∫mero de telefone'")
                            print(f"4. Digite o c√≥digo: {pairingCode}")
                        
                        print(f"\nüåê Ou acesse para ver QR Code:")
                        print(f"   {base_url}/instance/qrcode/{instance_name}")
                        
                        if base64:
                            print(f"\nüìÑ Base64 (primeiros 100 chars):")
                            print(f"   {base64[:100]}...")
                        
                        print("=" * 60)
                    else:
                        print("   ‚ö†Ô∏è QR Code n√£o dispon√≠vel no momento")
                else:
                    print(f"   ‚ùå Erro ao conectar: {response.status_code}")
                    print(f"   Resposta: {response.text}")
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
            
            # 3. Verificar/configurar webhook
            print("\n3Ô∏è‚É£ Verificando webhook...")
            try:
                response = await client.get(
                    f"{base_url}/webhook/find/{instance_name}",
                    headers=headers
                )
                
                webhook_url = os.getenv("WEBHOOK_BASE_URL", "http://localhost:8000")
                expected_url = f"{webhook_url}/webhook/whatsapp"
                
                if response.status_code == 200:
                    webhook_data = response.json()
                    current_url = webhook_data.get("url", "")
                    enabled = webhook_data.get("enabled", False)
                    
                    if current_url == expected_url and enabled:
                        print(f"   ‚úÖ Webhook j√° configurado corretamente")
                        print(f"   URL: {current_url}")
                    else:
                        print(f"   ‚ö†Ô∏è Webhook precisa ser atualizado")
                        # Configurar webhook
                        webhook_payload = {
                            "url": expected_url,
                            "enabled": True,
                            "events": [
                                "MESSAGES_UPSERT",
                                "MESSAGES_UPDATE",
                                "CONNECTION_UPDATE",
                                "PRESENCE_UPDATE",
                                "SEND_MESSAGE",
                                "QRCODE_UPDATED"
                            ]
                        }
                        
                        response = await client.post(
                            f"{base_url}/webhook/set/{instance_name}",
                            headers=headers,
                            json=webhook_payload
                        )
                        
                        if response.status_code in [200, 201]:
                            print(f"   ‚úÖ Webhook atualizado!")
                            print(f"   URL: {expected_url}")
                        else:
                            print(f"   ‚ùå Erro ao atualizar webhook")
                else:
                    print(f"   ‚ùå Erro ao verificar webhook: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå Erro: {e}")
            
            print("\n‚úÖ Processo conclu√≠do!")
            print("\nüìã Pr√≥ximos passos:")
            print("1. Se apareceu c√≥digo de pareamento, use-o no WhatsApp")
            print("2. Ou escaneie o QR Code na URL fornecida")
            print("3. Ap√≥s conectar, teste enviando uma mensagem")
            print("4. Monitore os logs: tail -f app.log")
            
        except Exception as e:
            print(f"\n‚ùå Erro geral: {e}")
            return False

if __name__ == "__main__":
    asyncio.run(main())