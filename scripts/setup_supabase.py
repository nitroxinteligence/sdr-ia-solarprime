#!/usr/bin/env python3
"""
Setup do Supabase
=================
Script interativo para configurar a integra√ß√£o com Supabase
"""

import os
import sys
from pathlib import Path
from colorama import init, Fore, Style

# Inicializar colorama
init(autoreset=True)


def print_header(text: str):
    """Imprime cabe√ßalho formatado"""
    print(f"\n{Fore.CYAN}{'=' * 60}")
    print(f"{Fore.CYAN}{text}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}\n")


def print_step(number: int, text: str):
    """Imprime passo numerado"""
    print(f"{Fore.YELLOW}Passo {number}:{Style.RESET_ALL} {text}")


def check_env_file():
    """Verifica e cria arquivo .env se necess√°rio"""
    env_path = Path(".env")
    env_example_path = Path(".env.example")
    
    if not env_path.exists():
        print(f"{Fore.YELLOW}Arquivo .env n√£o encontrado.{Style.RESET_ALL}")
        
        if env_example_path.exists():
            print("Copiando .env.example para .env...")
            env_path.write_text(env_example_path.read_text())
            print(f"{Fore.GREEN}‚úÖ Arquivo .env criado!{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚ùå .env.example tamb√©m n√£o encontrado!{Style.RESET_ALL}")
            return False
    
    return True


def update_env_variable(key: str, value: str):
    """Atualiza vari√°vel no arquivo .env"""
    env_path = Path(".env")
    
    if not env_path.exists():
        return False
    
    lines = env_path.read_text().splitlines()
    updated = False
    
    for i, line in enumerate(lines):
        if line.startswith(f"{key}="):
            lines[i] = f"{key}={value}"
            updated = True
            break
    
    if not updated:
        lines.append(f"{key}={value}")
    
    env_path.write_text("\n".join(lines) + "\n")
    return True


def main():
    """Fun√ß√£o principal"""
    print(f"{Fore.CYAN}üöÄ Setup Supabase - SDR IA SolarPrime{Style.RESET_ALL}")
    print_header("Configura√ß√£o Inicial do Supabase")
    
    # Verificar arquivo .env
    if not check_env_file():
        print(f"{Fore.RED}Crie o arquivo .env antes de continuar!{Style.RESET_ALL}")
        return
    
    print("Este script ajudar√° voc√™ a configurar a integra√ß√£o com Supabase.\n")
    
    # Passo 1: Credenciais
    print_step(1, "Configurar Credenciais do Supabase")
    print("\nVoc√™ precisar√° das seguintes informa√ß√µes do seu projeto Supabase:")
    print("- URL do projeto")
    print("- Anon Key (p√∫blica)")
    print("- Service Key (privada - recomendada para backend)")
    print(f"\n{Fore.BLUE}Encontre em: Supabase Dashboard > Settings > API{Style.RESET_ALL}")
    
    configure = input("\nDeseja configurar as credenciais agora? (s/n): ").lower()
    
    if configure == 's':
        url = input("\nSUPABASE_URL: ").strip()
        if url:
            update_env_variable("SUPABASE_URL", url)
            print(f"{Fore.GREEN}‚úÖ URL configurada!{Style.RESET_ALL}")
        
        anon_key = input("\nSUPABASE_ANON_KEY: ").strip()
        if anon_key:
            update_env_variable("SUPABASE_ANON_KEY", anon_key)
            print(f"{Fore.GREEN}‚úÖ Anon Key configurada!{Style.RESET_ALL}")
        
        service_key = input("\nSUPABASE_SERVICE_KEY (opcional mas recomendada): ").strip()
        if service_key:
            update_env_variable("SUPABASE_SERVICE_KEY", service_key)
            print(f"{Fore.GREEN}‚úÖ Service Key configurada!{Style.RESET_ALL}")
    
    # Passo 2: Criar tabelas
    print_step(2, "Criar Tabelas no Banco de Dados")
    print("\nPara criar as tabelas necess√°rias:")
    print(f"1. Abra o {Fore.CYAN}scripts/create_supabase_tables.sql{Style.RESET_ALL}")
    print("2. Copie todo o conte√∫do")
    print("3. Cole no SQL Editor do Supabase")
    print("4. Execute o script")
    
    input("\nPressione ENTER quando as tabelas estiverem criadas...")
    
    # Passo 3: Configurar RLS
    print_step(3, "Configurar Row Level Security (RLS)")
    print("\nPara desenvolvimento, voc√™ tem duas op√ß√µes:")
    print(f"1. {Fore.GREEN}Usar Service Key (recomendado){Style.RESET_ALL} - bypassa RLS automaticamente")
    print(f"2. {Fore.YELLOW}Desabilitar RLS temporariamente{Style.RESET_ALL} - execute scripts/disable_rls_for_testing.sql")
    print(f"\n{Fore.RED}‚ö†Ô∏è  NUNCA desabilite RLS em produ√ß√£o!{Style.RESET_ALL}")
    
    # Passo 4: Instalar depend√™ncias
    print_step(4, "Instalar Depend√™ncias Python")
    print("\nExecute o seguinte comando:")
    print(f"{Fore.CYAN}pip install -r requirements.txt{Style.RESET_ALL}")
    
    install = input("\nDeseja instalar as depend√™ncias agora? (s/n): ").lower()
    if install == 's':
        os.system("pip install -r requirements.txt")
        print(f"{Fore.GREEN}‚úÖ Depend√™ncias instaladas!{Style.RESET_ALL}")
    
    # Passo 5: Testar integra√ß√£o
    print_step(5, "Testar Integra√ß√£o")
    print("\nPara verificar se tudo est√° funcionando:")
    print(f"1. Teste r√°pido: {Fore.CYAN}python scripts/quick_test_supabase.py{Style.RESET_ALL}")
    print(f"2. Verifica√ß√£o completa: {Fore.CYAN}python scripts/verify_supabase_setup.py{Style.RESET_ALL}")
    
    # Resumo
    print_header("RESUMO")
    print("‚úÖ Arquivo .env verificado")
    print("üìã Pr√≥ximos passos:")
    print("   1. Configure as credenciais no .env (se ainda n√£o fez)")
    print("   2. Execute o SQL para criar as tabelas")
    print("   3. Configure RLS conforme necess√°rio")
    print("   4. Execute os scripts de teste")
    
    print(f"\n{Fore.GREEN}üéâ Setup conclu√≠do!{Style.RESET_ALL}")
    print(f"Execute {Fore.CYAN}python scripts/verify_supabase_setup.py{Style.RESET_ALL} para verificar a configura√ß√£o.")


if __name__ == "__main__":
    main()