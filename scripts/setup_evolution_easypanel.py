#!/usr/bin/env python3
"""
Setup Evolution API for EasyPanel
=================================
Script completo para configurar a Evolution API para funcionar com EasyPanel.
"""

import asyncio
import os
import sys
import httpx
from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt, Confirm
from rich.table import Table
from datetime import datetime
import json

# Adicionar diret√≥rio pai ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Carregar vari√°veis de ambiente
load_dotenv()

console = Console()


async def find_instance_name(instances: list) -> str:
    """Extrai o nome da inst√¢ncia da resposta da API"""
    
    for inst in instances:
        # Tentar diferentes estruturas poss√≠veis
        if isinstance(inst, dict):
            # Estrutura 1: {"instance": {"instanceName": "nome"}}
            if "instance" in inst and isinstance(inst["instance"], dict):
                name = inst["instance"].get("instanceName")
                if name:
                    return name
            
            # Estrutura 2: {"instanceName": "nome"}
            if "instanceName" in inst:
                return inst["instanceName"]
            
            # Estrutura 3: {"name": "nome"}
            if "name" in inst:
                return inst["name"]
    
    return None


async def main():
    """Fun√ß√£o principal"""
    
    console.print(Panel.fit(
        "[bold]üöÄ SDR IA SolarPrime - Setup Evolution API para EasyPanel[/bold]\n"
        f"[dim]{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}[/dim]",
        border_style="bold blue"
    ))
    
    # Verificar configura√ß√µes
    base_url = os.getenv("EVOLUTION_API_URL", "")
    api_key = os.getenv("EVOLUTION_API_KEY", "")
    current_instance_name = os.getenv("EVOLUTION_INSTANCE_NAME", "")
    
    if not all([base_url, api_key]):
        console.print("[red]‚ùå EVOLUTION_API_URL ou EVOLUTION_API_KEY n√£o configurados[/red]")
        return
    
    # Remover /manager se existir
    if base_url.endswith('/manager'):
        base_url = base_url[:-8]
    
    console.print(f"\n[bold]üìã Configura√ß√£o Atual:[/bold]")
    console.print(f"[yellow]Evolution API URL:[/yellow] {base_url}")
    console.print(f"[yellow]Instance Name no .env:[/yellow] {current_instance_name}")
    
    headers = {
        "apikey": api_key,
        "Content-Type": "application/json"
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        # 1. Buscar inst√¢ncias
        console.print("\n[bold]1Ô∏è‚É£ Buscando inst√¢ncias...[/bold]")
        
        try:
            response = await client.get(
                f"{base_url}/instance/fetchInstances",
                headers=headers
            )
            
            if response.status_code == 200:
                instances = response.json()
                
                if instances:
                    console.print(f"[green]‚úÖ Encontradas {len(instances)} inst√¢ncia(s)[/green]")
                    
                    # Encontrar nome da inst√¢ncia
                    instance_name = find_instance_name(instances)
                    
                    if instance_name:
                        console.print(f"\n[green]‚úÖ Inst√¢ncia encontrada: '{instance_name}'[/green]")
                        
                        if instance_name != current_instance_name:
                            console.print(f"[yellow]‚ö†Ô∏è Nome diferente do configurado no .env![/yellow]")
                            console.print(f"[yellow]Configure: EVOLUTION_INSTANCE_NAME={instance_name}[/yellow]")
                    else:
                        console.print("[yellow]‚ö†Ô∏è Inst√¢ncia existe mas nome n√£o identificado[/yellow]")
                        console.print("[dim]Estrutura da resposta:[/dim]")
                        console.print(json.dumps(instances[0], indent=2)[:500] + "...")
                        
                        # Permitir entrada manual
                        instance_name = Prompt.ask("\nDigite o nome da inst√¢ncia manualmente")
                    
                    # 2. Configurar webhook para EasyPanel
                    console.print("\n[bold]2Ô∏è‚É£ Configurando webhook para EasyPanel...[/bold]")
                    
                    # Nome do servi√ßo no EasyPanel
                    sdr_service = Prompt.ask(
                        "Nome do servi√ßo SDR IA no EasyPanel",
                        default="sdr-ia"
                    )
                    
                    webhook_url = f"http://{sdr_service}:8000/webhook/whatsapp"
                    
                    webhook_config = {
                        "url": webhook_url,
                        "enabled": True,
                        "webhook_by_events": False,
                        "events": [
                            "MESSAGES_UPSERT",
                            "MESSAGES_UPDATE",
                            "CONNECTION_UPDATE",
                            "QRCODE_UPDATED",
                            "SEND_MESSAGE",
                            "PRESENCE_UPDATE"
                        ]
                    }
                    
                    console.print(f"[dim]Configurando webhook: {webhook_url}[/dim]")
                    
                    response = await client.post(
                        f"{base_url}/webhook/set/{instance_name}",
                        headers=headers,
                        json=webhook_config
                    )
                    
                    if response.status_code == 200:
                        console.print("[green]‚úÖ Webhook configurado com sucesso![/green]")
                    else:
                        console.print(f"[red]‚ùå Erro ao configurar webhook: {response.status_code}[/red]")
                        console.print(f"[dim]{response.text}[/dim]")
                    
                    # 3. Verificar conex√£o WhatsApp
                    console.print("\n[bold]3Ô∏è‚É£ Verificando conex√£o WhatsApp...[/bold]")
                    
                    try:
                        response = await client.get(
                            f"{base_url}/instance/connectionState/{instance_name}",
                            headers=headers
                        )
                        
                        if response.status_code == 200:
                            state_data = response.json()
                            state = state_data.get("state", "unknown")
                            
                            if state == "open":
                                console.print("[green]‚úÖ WhatsApp conectado e pronto![/green]")
                            else:
                                console.print(f"[yellow]‚ö†Ô∏è WhatsApp n√£o conectado: {state}[/yellow]")
                                console.print("[dim]Conecte usando o QR Code no Evolution Manager[/dim]")
                        
                    except Exception:
                        console.print("[yellow]‚ö†Ô∏è N√£o foi poss√≠vel verificar estado da conex√£o[/yellow]")
                    
                    # 4. Mostrar configura√ß√£o final
                    console.print("\n")
                    console.print(Panel(
                        "[bold green]‚úÖ Configura√ß√£o Completa para EasyPanel:[/bold green]\n\n"
                        "[yellow]Arquivo .env.easypanel:[/yellow]\n"
                        f"EVOLUTION_API_URL=http://evolution-api:8080\n"
                        f"EVOLUTION_API_KEY={api_key}\n"
                        f"EVOLUTION_INSTANCE_NAME={instance_name}\n"
                        f"WEBHOOK_BASE_URL=http://{sdr_service}:8000\n\n"
                        "[yellow]Pr√≥ximos passos:[/yellow]\n"
                        "1. Atualize o .env.easypanel com os valores acima\n"
                        "2. Fa√ßa o deploy no EasyPanel\n"
                        "3. Configure as vari√°veis de ambiente\n"
                        "4. Teste enviando uma mensagem no WhatsApp",
                        border_style="green"
                    ))
                    
                else:
                    console.print("[red]‚ùå Nenhuma inst√¢ncia encontrada[/red]")
                    console.print("[yellow]Crie uma inst√¢ncia no Evolution Manager primeiro[/yellow]")
                    
        except Exception as e:
            console.print(f"[red]‚ùå Erro: {e}[/red]")
            
            # Diagn√≥stico adicional
            console.print("\n[yellow]üí° Diagn√≥stico:[/yellow]")
            console.print("1. Verifique se a Evolution API est√° acess√≠vel")
            console.print("2. Confirme que a API Key est√° correta")
            console.print("3. Teste a URL no navegador")
            console.print(f"   {base_url}/instance/fetchInstances")


if __name__ == "__main__":
    asyncio.run(main())